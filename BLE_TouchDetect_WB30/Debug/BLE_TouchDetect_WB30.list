
BLE_TouchDetect_WB30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa6c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800aba8  0800aba8  0001aba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ae5c  0800ae5c  0001ae5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ae60  0800ae60  0001ae60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  0800ae64  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  0800ae88  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c4  0800af21  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  0800af5e  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000090  20000118  0800af6f  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000040c  200001a8  0800afff  000201a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005b4  0800afff  000205b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0003dd4d  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006afb  00000000  00000000  0005df25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002948  00000000  00000000  00064a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000026c0  00000000  00000000  00067368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000294a7  00000000  00000000  00069a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002d903  00000000  00000000  00092ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e82bc  00000000  00000000  000c07d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001a8a8e  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000ae1c  00000000  00000000  001a8ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001a8 	.word	0x200001a8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800ab90 	.word	0x0800ab90

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001ac 	.word	0x200001ac
 8000178:	0800ab90 	.word	0x0800ab90

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000196:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800019a:	4905      	ldr	r1, [pc, #20]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4313      	orrs	r3, r2
 80001a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr
 80001b0:	58000800 	.word	0x58000800

080001b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4013      	ands	r3, r2
 80001d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d8:	68fb      	ldr	r3, [r7, #12]
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b085      	sub	sp, #20
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80001f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4013      	ands	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000210:	68fb      	ldr	r3, [r7, #12]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021e:	b580      	push	{r7, lr}
 8000220:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000222:	f002 fb2f 	bl	8002884 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000226:	f002 fb33 	bl	8002890 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800022a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800022e:	f7ff ffad 	bl	800018c <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000232:	f000 f821 	bl	8000278 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000236:	f000 f8c3 	bl	80003c0 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800023a:	bf00      	nop
}
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <APPD_EnableCPU2+0x34>)
 8000248:	1d3c      	adds	r4, r7, #4
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000254:	c403      	stmia	r4!, {r0, r1}
 8000256:	8022      	strh	r2, [r4, #0]
 8000258:	3402      	adds	r4, #2
 800025a:	0c13      	lsrs	r3, r2, #16
 800025c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800025e:	f009 f9a7 	bl	80095b0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f008 fd06 	bl	8008c76 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800026a:	bf00      	nop
}
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	bf00      	nop
 8000274:	0800aba8 	.word	0x0800aba8

08000278 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000298:	2300      	movs	r3, #0
 800029a:	77fb      	strb	r3, [r7, #31]
 800029c:	e038      	b.n	8000310 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800029e:	7ffb      	ldrb	r3, [r7, #31]
 80002a0:	4a44      	ldr	r2, [pc, #272]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	4413      	add	r3, r2
 80002a6:	799b      	ldrb	r3, [r3, #6]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d02b      	beq.n	8000304 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002ac:	7ffb      	ldrb	r3, [r7, #31]
 80002ae:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002b4:	4a40      	ldr	r2, [pc, #256]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d01b      	beq.n	80002f2 <APPD_SetCPU2GpioConfig+0x7a>
 80002ba:	4a3f      	ldr	r2, [pc, #252]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d823      	bhi.n	8000308 <APPD_SetCPU2GpioConfig+0x90>
 80002c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002c4:	d003      	beq.n	80002ce <APPD_SetCPU2GpioConfig+0x56>
 80002c6:	4a3d      	ldr	r2, [pc, #244]	; (80003bc <APPD_SetCPU2GpioConfig+0x144>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d009      	beq.n	80002e0 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80002cc:	e01c      	b.n	8000308 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002ce:	7ffb      	ldrb	r3, [r7, #31]
 80002d0:	4a38      	ldr	r2, [pc, #224]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	4413      	add	r3, r2
 80002d6:	889a      	ldrh	r2, [r3, #4]
 80002d8:	8bbb      	ldrh	r3, [r7, #28]
 80002da:	4313      	orrs	r3, r2
 80002dc:	83bb      	strh	r3, [r7, #28]
          break;
 80002de:	e014      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002e0:	7ffb      	ldrb	r3, [r7, #31]
 80002e2:	4a34      	ldr	r2, [pc, #208]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	4413      	add	r3, r2
 80002e8:	889a      	ldrh	r2, [r3, #4]
 80002ea:	8b7b      	ldrh	r3, [r7, #26]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	837b      	strh	r3, [r7, #26]
          break;
 80002f0:	e00b      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80002f2:	7ffb      	ldrb	r3, [r7, #31]
 80002f4:	4a2f      	ldr	r2, [pc, #188]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4413      	add	r3, r2
 80002fa:	889a      	ldrh	r2, [r3, #4]
 80002fc:	8b3b      	ldrh	r3, [r7, #24]
 80002fe:	4313      	orrs	r3, r2
 8000300:	833b      	strh	r3, [r7, #24]
          break;
 8000302:	e002      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000304:	bf00      	nop
 8000306:	e000      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000308:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800030a:	7ffb      	ldrb	r3, [r7, #31]
 800030c:	3301      	adds	r3, #1
 800030e:	77fb      	strb	r3, [r7, #31]
 8000310:	7ffb      	ldrb	r3, [r7, #31]
 8000312:	2b21      	cmp	r3, #33	; 0x21
 8000314:	d9c3      	bls.n	800029e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800031e:	2303      	movs	r3, #3
 8000320:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000322:	8bbb      	ldrh	r3, [r7, #28]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d014      	beq.n	8000352 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000328:	8bbb      	ldrh	r3, [r7, #28]
 800032a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff41 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000332:	2001      	movs	r0, #1
 8000334:	f7ff ff57 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f004 f8de 	bl	8004500 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000344:	8bbb      	ldrh	r3, [r7, #28]
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034e:	f004 fa3f 	bl	80047d0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000352:	8b7b      	ldrh	r3, [r7, #26]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d012      	beq.n	800037e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000358:	8b7b      	ldrh	r3, [r7, #26]
 800035a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	2002      	movs	r0, #2
 800035e:	f7ff ff29 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000362:	2002      	movs	r0, #2
 8000364:	f7ff ff3f 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <APPD_SetCPU2GpioConfig+0x144>)
 800036e:	f004 f8c7 	bl	8004500 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000372:	8b7b      	ldrh	r3, [r7, #26]
 8000374:	2200      	movs	r2, #0
 8000376:	4619      	mov	r1, r3
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <APPD_SetCPU2GpioConfig+0x144>)
 800037a:	f004 fa29 	bl	80047d0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800037e:	8b3b      	ldrh	r3, [r7, #24]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d013      	beq.n	80003ac <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000384:	8b3b      	ldrh	r3, [r7, #24]
 8000386:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000388:	2004      	movs	r0, #4
 800038a:	f7ff ff13 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800038e:	2004      	movs	r0, #4
 8000390:	f7ff ff29 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 800039a:	f004 f8b1 	bl	8004500 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800039e:	8b3b      	ldrh	r3, [r7, #24]
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80003a6:	f004 fa13 	bl	80047d0 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
}
 80003ae:	3720      	adds	r7, #32
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	0800ac1c 	.word	0x0800ac1c
 80003b8:	48000800 	.word	0x48000800
 80003bc:	48000400 	.word	0x48000400

080003c0 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80003c4:	bf00      	nop
}
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <LL_C2_PWR_SetPowerMode+0x28>)
 80003da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003de:	f023 0207 	bic.w	r2, r3, #7
 80003e2:	4905      	ldr	r1, [pc, #20]	; (80003f8 <LL_C2_PWR_SetPowerMode+0x28>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	58000400 	.word	0x58000400

080003fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800040e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	608b      	str	r3, [r1, #8]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000428:	f000 f814 	bl	8000454 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <APPE_Init+0x2c>)
 800042e:	2000      	movs	r0, #0
 8000430:	f000 fcde 	bl	8000df0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000434:	f7ff fef3 	bl	800021e <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000438:	2101      	movs	r1, #1
 800043a:	2001      	movs	r0, #1
 800043c:	f00a f8c6 	bl	800a5cc <UTIL_LPM_SetOffMode>

  Led_Init();
 8000440:	f000 f867 	bl	8000512 <Led_Init>

  Button_Init();
 8000444:	f000 f86c 	bl	8000520 <Button_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000448:	f000 f812 	bl	8000470 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800044c:	bf00      	nop
}
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000053c 	.word	0x2000053c

08000454 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000458:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800045c:	f7ff ffce 	bl	80003fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000460:	f00a f8a2 	bl	800a5a8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000464:	2004      	movs	r0, #4
 8000466:	f7ff ffb3 	bl	80003d0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800046a:	bf00      	nop
}
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000476:	f008 fee5 	bl	8009244 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800047a:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <appe_Tl_Init+0x50>)
 800047c:	2100      	movs	r1, #0
 800047e:	2008      	movs	r0, #8
 8000480:	f00a f9b8 	bl	800a7f4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <appe_Tl_Init+0x54>)
 8000486:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <appe_Tl_Init+0x58>)
 800048a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800048c:	463b      	mov	r3, r7
 800048e:	4619      	mov	r1, r3
 8000490:	480e      	ldr	r0, [pc, #56]	; (80004cc <appe_Tl_Init+0x5c>)
 8000492:	f008 fd9d 	bl	8008fd0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <appe_Tl_Init+0x60>)
 8000498:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <appe_Tl_Init+0x64>)
 800049c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <appe_Tl_Init+0x68>)
 80004a0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80004a2:	f240 533c 	movw	r3, #1340	; 0x53c
 80004a6:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80004a8:	f107 0308 	add.w	r3, r7, #8
 80004ac:	4618      	mov	r0, r3
 80004ae:	f009 f80b 	bl	80094c8 <TL_MM_Init>

  TL_Enable();
 80004b2:	f008 fec1 	bl	8009238 <TL_Enable>

  return;
 80004b6:	bf00      	nop
}
 80004b8:	3720      	adds	r7, #32
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	08009009 	.word	0x08009009
 80004c4:	20030724 	.word	0x20030724
 80004c8:	080004dd 	.word	0x080004dd
 80004cc:	080004f3 	.word	0x080004f3
 80004d0:	2003093c 	.word	0x2003093c
 80004d4:	20030830 	.word	0x20030830
 80004d8:	200301e8 	.word	0x200301e8

080004dc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80004e6:	bf00      	nop
}
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80004fa:	f7ff fea1 	bl	8000240 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80004fe:	f009 f9ed 	bl	80098dc <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000502:	2100      	movs	r1, #0
 8000504:	2001      	movs	r0, #1
 8000506:	f00a f861 	bl	800a5cc <UTIL_LPM_SetOffMode>
  return;
 800050a:	bf00      	nop
}
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
//  BSP_LED_Init(LED_RED);
//
//  BSP_LED_On(LED_GREEN);
#endif

  return;
 8000516:	bf00      	nop
}
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <Button_Init>:

static void Button_Init( void )
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

//  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
//  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
#endif

  return;
 8000524:	bf00      	nop
}
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000532:	bf00      	nop
}
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f00a f86f 	bl	800a62c <UTIL_SEQ_Run>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800055e:	2100      	movs	r1, #0
 8000560:	2008      	movs	r0, #8
 8000562:	f00a f969 	bl	800a838 <UTIL_SEQ_SetTask>
  return;
 8000566:	bf00      	nop
}
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000576:	2002      	movs	r0, #2
 8000578:	f00a f9ca 	bl	800a910 <UTIL_SEQ_SetEvt>
  return;
 800057c:	bf00      	nop
}
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800058c:	2002      	movs	r0, #2
 800058e:	f00a f9df 	bl	800a950 <UTIL_SEQ_WaitEvt>
  return;
 8000592:	bf00      	nop
}
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <LL_EXTI_EnableIT_0_31>:
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80005a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80005aa:	4905      	ldr	r1, [pc, #20]	; (80005c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	58000800 	.word	0x58000800

080005c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4904      	ldr	r1, [pc, #16]	; (80005e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	600b      	str	r3, [r1, #0]

}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	58000800 	.word	0x58000800

080005e8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <ReadRtcSsrValue+0x3c>)
 80005f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <ReadRtcSsrValue+0x3c>)
 80005f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80005fe:	e005      	b.n	800060c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <ReadRtcSsrValue+0x3c>)
 8000606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000608:	b29b      	uxth	r3, r3
 800060a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d1f5      	bne.n	8000600 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000614:	683b      	ldr	r3, [r7, #0]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40002800 	.word	0x40002800

08000628 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000638:	79ba      	ldrb	r2, [r7, #6]
 800063a:	491d      	ldr	r1, [pc, #116]	; (80006b0 <LinkTimerAfter+0x88>)
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	440b      	add	r3, r1
 8000646:	3315      	adds	r3, #21
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b06      	cmp	r3, #6
 8000650:	d009      	beq.n	8000666 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000652:	7bfa      	ldrb	r2, [r7, #15]
 8000654:	4916      	ldr	r1, [pc, #88]	; (80006b0 <LinkTimerAfter+0x88>)
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	440b      	add	r3, r1
 8000660:	3314      	adds	r3, #20
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000666:	79fa      	ldrb	r2, [r7, #7]
 8000668:	4911      	ldr	r1, [pc, #68]	; (80006b0 <LinkTimerAfter+0x88>)
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	440b      	add	r3, r1
 8000674:	3315      	adds	r3, #21
 8000676:	7bfa      	ldrb	r2, [r7, #15]
 8000678:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800067a:	79fa      	ldrb	r2, [r7, #7]
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <LinkTimerAfter+0x88>)
 800067e:	4613      	mov	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4413      	add	r3, r2
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	440b      	add	r3, r1
 8000688:	3314      	adds	r3, #20
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800068e:	79ba      	ldrb	r2, [r7, #6]
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <LinkTimerAfter+0x88>)
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	440b      	add	r3, r1
 800069c:	3315      	adds	r3, #21
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	701a      	strb	r2, [r3, #0]

  return;
 80006a2:	bf00      	nop
}
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028

080006b4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <LinkTimerBefore+0xb8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	79ba      	ldrb	r2, [r7, #6]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d032      	beq.n	8000736 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80006d0:	79ba      	ldrb	r2, [r7, #6]
 80006d2:	4927      	ldr	r1, [pc, #156]	; (8000770 <LinkTimerBefore+0xbc>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	440b      	add	r3, r1
 80006de:	3314      	adds	r3, #20
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80006e4:	7bfa      	ldrb	r2, [r7, #15]
 80006e6:	4922      	ldr	r1, [pc, #136]	; (8000770 <LinkTimerBefore+0xbc>)
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	440b      	add	r3, r1
 80006f2:	3315      	adds	r3, #21
 80006f4:	79fa      	ldrb	r2, [r7, #7]
 80006f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80006f8:	79fa      	ldrb	r2, [r7, #7]
 80006fa:	491d      	ldr	r1, [pc, #116]	; (8000770 <LinkTimerBefore+0xbc>)
 80006fc:	4613      	mov	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	440b      	add	r3, r1
 8000706:	3315      	adds	r3, #21
 8000708:	79ba      	ldrb	r2, [r7, #6]
 800070a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800070c:	79fa      	ldrb	r2, [r7, #7]
 800070e:	4918      	ldr	r1, [pc, #96]	; (8000770 <LinkTimerBefore+0xbc>)
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	440b      	add	r3, r1
 800071a:	3314      	adds	r3, #20
 800071c:	7bfa      	ldrb	r2, [r7, #15]
 800071e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000720:	79ba      	ldrb	r2, [r7, #6]
 8000722:	4913      	ldr	r1, [pc, #76]	; (8000770 <LinkTimerBefore+0xbc>)
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	440b      	add	r3, r1
 800072e:	3314      	adds	r3, #20
 8000730:	79fa      	ldrb	r2, [r7, #7]
 8000732:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000734:	e014      	b.n	8000760 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	490d      	ldr	r1, [pc, #52]	; (8000770 <LinkTimerBefore+0xbc>)
 800073a:	4613      	mov	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	3315      	adds	r3, #21
 8000746:	79ba      	ldrb	r2, [r7, #6]
 8000748:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <LinkTimerBefore+0xbc>)
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	440b      	add	r3, r1
 8000758:	3314      	adds	r3, #20
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	701a      	strb	r2, [r3, #0]
  return;
 800075e:	bf00      	nop
}
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200000b8 	.word	0x200000b8
 8000770:	20000028 	.word	0x20000028

08000774 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800077e:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <linkTimer+0x144>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b06      	cmp	r3, #6
 8000786:	d118      	bne.n	80007ba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000788:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <linkTimer+0x144>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <linkTimer+0x148>)
 8000790:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000792:	4a49      	ldr	r2, [pc, #292]	; (80008b8 <linkTimer+0x144>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000798:	79fa      	ldrb	r2, [r7, #7]
 800079a:	4949      	ldr	r1, [pc, #292]	; (80008c0 <linkTimer+0x14c>)
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	440b      	add	r3, r1
 80007a6:	3315      	adds	r3, #21
 80007a8:	2206      	movs	r2, #6
 80007aa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80007ac:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <linkTimer+0x150>)
 80007ae:	f04f 32ff 	mov.w	r2, #4294967295
 80007b2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	81fb      	strh	r3, [r7, #14]
 80007b8:	e078      	b.n	80008ac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80007ba:	f000 f909 	bl	80009d0 <ReturnTimeElapsed>
 80007be:	4603      	mov	r3, r0
 80007c0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80007c2:	79fa      	ldrb	r2, [r7, #7]
 80007c4:	493e      	ldr	r1, [pc, #248]	; (80008c0 <linkTimer+0x14c>)
 80007c6:	4613      	mov	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	440b      	add	r3, r1
 80007d0:	3308      	adds	r3, #8
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	4419      	add	r1, r3
 80007da:	4839      	ldr	r0, [pc, #228]	; (80008c0 <linkTimer+0x14c>)
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4403      	add	r3, r0
 80007e6:	3308      	adds	r3, #8
 80007e8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	4934      	ldr	r1, [pc, #208]	; (80008c0 <linkTimer+0x14c>)
 80007ee:	4613      	mov	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	440b      	add	r3, r1
 80007f8:	3308      	adds	r3, #8
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <linkTimer+0x144>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <linkTimer+0x14c>)
 8000808:	460b      	mov	r3, r1
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	440b      	add	r3, r1
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4413      	add	r3, r2
 8000812:	3308      	adds	r3, #8
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	429a      	cmp	r2, r3
 800081a:	d337      	bcc.n	800088c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800081c:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <linkTimer+0x144>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000822:	7b7a      	ldrb	r2, [r7, #13]
 8000824:	4926      	ldr	r1, [pc, #152]	; (80008c0 <linkTimer+0x14c>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	3315      	adds	r3, #21
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000836:	e013      	b.n	8000860 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000838:	7b7a      	ldrb	r2, [r7, #13]
 800083a:	4921      	ldr	r1, [pc, #132]	; (80008c0 <linkTimer+0x14c>)
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	440b      	add	r3, r1
 8000846:	3315      	adds	r3, #21
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800084c:	7b7a      	ldrb	r2, [r7, #13]
 800084e:	491c      	ldr	r1, [pc, #112]	; (80008c0 <linkTimer+0x14c>)
 8000850:	4613      	mov	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	440b      	add	r3, r1
 800085a:	3315      	adds	r3, #21
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000860:	7b3b      	ldrb	r3, [r7, #12]
 8000862:	2b06      	cmp	r3, #6
 8000864:	d00b      	beq.n	800087e <linkTimer+0x10a>
 8000866:	7b3a      	ldrb	r2, [r7, #12]
 8000868:	4915      	ldr	r1, [pc, #84]	; (80008c0 <linkTimer+0x14c>)
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	440b      	add	r3, r1
 8000874:	3308      	adds	r3, #8
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	429a      	cmp	r2, r3
 800087c:	d2dc      	bcs.n	8000838 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fecf 	bl	8000628 <LinkTimerAfter>
 800088a:	e00f      	b.n	80008ac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <linkTimer+0x144>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff0c 	bl	80006b4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <linkTimer+0x144>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <linkTimer+0x148>)
 80008a4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <linkTimer+0x144>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80008ac:	89fb      	ldrh	r3, [r7, #14]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	200000b9 	.word	0x200000b9
 80008c0:	20000028 	.word	0x20000028
 80008c4:	200000bc 	.word	0x200000bc

080008c8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	460a      	mov	r2, r1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4613      	mov	r3, r2
 80008d6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <UnlinkTimer+0xf8>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d111      	bne.n	8000908 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80008e4:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <UnlinkTimer+0xf8>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <UnlinkTimer+0xfc>)
 80008ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4935      	ldr	r1, [pc, #212]	; (80009c8 <UnlinkTimer+0x100>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	3315      	adds	r3, #21
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <UnlinkTimer+0xf8>)
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e03e      	b.n	8000986 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	492f      	ldr	r1, [pc, #188]	; (80009c8 <UnlinkTimer+0x100>)
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	440b      	add	r3, r1
 8000916:	3314      	adds	r3, #20
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800091c:	79fa      	ldrb	r2, [r7, #7]
 800091e:	492a      	ldr	r1, [pc, #168]	; (80009c8 <UnlinkTimer+0x100>)
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	440b      	add	r3, r1
 800092a:	3315      	adds	r3, #21
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000930:	79f9      	ldrb	r1, [r7, #7]
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	4824      	ldr	r0, [pc, #144]	; (80009c8 <UnlinkTimer+0x100>)
 8000936:	460b      	mov	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	440b      	add	r3, r1
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4403      	add	r3, r0
 8000940:	3315      	adds	r3, #21
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2d8      	uxtb	r0, r3
 8000946:	4920      	ldr	r1, [pc, #128]	; (80009c8 <UnlinkTimer+0x100>)
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	440b      	add	r3, r1
 8000952:	3315      	adds	r3, #21
 8000954:	4602      	mov	r2, r0
 8000956:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	2b06      	cmp	r3, #6
 800095c:	d013      	beq.n	8000986 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800095e:	79f9      	ldrb	r1, [r7, #7]
 8000960:	7bba      	ldrb	r2, [r7, #14]
 8000962:	4819      	ldr	r0, [pc, #100]	; (80009c8 <UnlinkTimer+0x100>)
 8000964:	460b      	mov	r3, r1
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	440b      	add	r3, r1
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	4403      	add	r3, r0
 800096e:	3314      	adds	r3, #20
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2d8      	uxtb	r0, r3
 8000974:	4914      	ldr	r1, [pc, #80]	; (80009c8 <UnlinkTimer+0x100>)
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	3314      	adds	r3, #20
 8000982:	4602      	mov	r2, r0
 8000984:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	490f      	ldr	r1, [pc, #60]	; (80009c8 <UnlinkTimer+0x100>)
 800098a:	4613      	mov	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	330c      	adds	r3, #12
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <UnlinkTimer+0xf8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b06      	cmp	r3, #6
 80009a2:	d107      	bne.n	80009b4 <UnlinkTimer+0xec>
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d104      	bne.n	80009b4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <UnlinkTimer+0x104>)
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	601a      	str	r2, [r3, #0]
  }

  return;
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
}
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	200000b8 	.word	0x200000b8
 80009c4:	200000b9 	.word	0x200000b9
 80009c8:	20000028 	.word	0x20000028
 80009cc:	200000bc 	.word	0x200000bc

080009d0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <ReturnTimeElapsed+0x70>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009de:	d026      	beq.n	8000a2e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80009e0:	f7ff fe02 	bl	80005e8 <ReadRtcSsrValue>
 80009e4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <ReturnTimeElapsed+0x70>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d805      	bhi.n	80009fc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <ReturnTimeElapsed+0x70>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	e00a      	b.n	8000a12 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <ReturnTimeElapsed+0x74>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <ReturnTimeElapsed+0x70>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <ReturnTimeElapsed+0x78>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	fb02 f303 	mul.w	r3, r2, r3
 8000a1e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <ReturnTimeElapsed+0x7c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	40d3      	lsrs	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	e001      	b.n	8000a32 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	b29b      	uxth	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000bc 	.word	0x200000bc
 8000a44:	200001ca 	.word	0x200001ca
 8000a48:	200001c9 	.word	0x200001c9
 8000a4c:	200001c8 	.word	0x200001c8

08000a50 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d108      	bne.n	8000a72 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a60:	f7ff fdc2 	bl	80005e8 <ReadRtcSsrValue>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <RestartWakeupCounter+0xa8>)
 8000a68:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f003 fa27 	bl	8003ebe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000a70:	e03e      	b.n	8000af0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d803      	bhi.n	8000a80 <RestartWakeupCounter+0x30>
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <RestartWakeupCounter+0xac>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d002      	beq.n	8000a86 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000a86:	bf00      	nop
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f7      	beq.n	8000a88 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000aac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <RestartWakeupCounter+0xb4>)
 8000ab0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ab4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f003 fa0f 	bl	8003eda <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <RestartWakeupCounter+0xb8>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	0c1b      	lsrs	r3, r3, #16
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	88fa      	ldrh	r2, [r7, #6]
 8000ac6:	4910      	ldr	r1, [pc, #64]	; (8000b08 <RestartWakeupCounter+0xb8>)
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000acc:	f7ff fd8c 	bl	80005e8 <ReadRtcSsrValue>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <RestartWakeupCounter+0xa8>)
 8000ad4:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ae8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000aea:	f3af 8000 	nop.w
  return ;
 8000aee:	bf00      	nop
}
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000bc 	.word	0x200000bc
 8000afc:	200001c8 	.word	0x200001c8
 8000b00:	200001c4 	.word	0x200001c4
 8000b04:	58000800 	.word	0x58000800
 8000b08:	40002800 	.word	0x40002800

08000b0c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b12:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <RescheduleTimerList+0x124>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b1e:	d108      	bne.n	8000b32 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b20:	bf00      	nop
 8000b22:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <RescheduleTimerList+0x128>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f7      	bne.n	8000b22 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b32:	4b40      	ldr	r3, [pc, #256]	; (8000c34 <RescheduleTimerList+0x128>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <RescheduleTimerList+0x128>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000b46:	4b3c      	ldr	r3, [pc, #240]	; (8000c38 <RescheduleTimerList+0x12c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000b4c:	7bfa      	ldrb	r2, [r7, #15]
 8000b4e:	493b      	ldr	r1, [pc, #236]	; (8000c3c <RescheduleTimerList+0x130>)
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	440b      	add	r3, r1
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000b60:	f7ff ff36 	bl	80009d0 <ReturnTimeElapsed>
 8000b64:	4603      	mov	r3, r0
 8000b66:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d205      	bcs.n	8000b7c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <RescheduleTimerList+0x134>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e04d      	b.n	8000c18 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <RescheduleTimerList+0x138>)
 8000b80:	8812      	ldrh	r2, [r2, #0]
 8000b82:	b292      	uxth	r2, r2
 8000b84:	4413      	add	r3, r2
 8000b86:	461a      	mov	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d906      	bls.n	8000b9c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <RescheduleTimerList+0x138>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <RescheduleTimerList+0x134>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e03d      	b.n	8000c18 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <RescheduleTimerList+0x134>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bac:	e034      	b.n	8000c18 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000bae:	7bfa      	ldrb	r2, [r7, #15]
 8000bb0:	4922      	ldr	r1, [pc, #136]	; (8000c3c <RescheduleTimerList+0x130>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	440b      	add	r3, r1
 8000bbc:	3308      	adds	r3, #8
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d20a      	bcs.n	8000bdc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000bc6:	7bfa      	ldrb	r2, [r7, #15]
 8000bc8:	491c      	ldr	r1, [pc, #112]	; (8000c3c <RescheduleTimerList+0x130>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	e013      	b.n	8000c04 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000bdc:	7bfa      	ldrb	r2, [r7, #15]
 8000bde:	4917      	ldr	r1, [pc, #92]	; (8000c3c <RescheduleTimerList+0x130>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
 8000bea:	3308      	adds	r3, #8
 8000bec:	6819      	ldr	r1, [r3, #0]
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	7bfa      	ldrb	r2, [r7, #15]
 8000bf2:	1ac9      	subs	r1, r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <RescheduleTimerList+0x130>)
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	4403      	add	r3, r0
 8000c00:	3308      	adds	r3, #8
 8000c02:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c04:	7bfa      	ldrb	r2, [r7, #15]
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <RescheduleTimerList+0x130>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	3315      	adds	r3, #21
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d1c7      	bne.n	8000bae <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c1e:	89bb      	ldrh	r3, [r7, #12]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff15 	bl	8000a50 <RestartWakeupCounter>

  return ;
 8000c26:	bf00      	nop
}
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40002800 	.word	0x40002800
 8000c34:	200001c4 	.word	0x200001c4
 8000c38:	200000b8 	.word	0x200000b8
 8000c3c:	20000028 	.word	0x20000028
 8000c40:	200000c0 	.word	0x200000c0
 8000c44:	200001cc 	.word	0x200001cc

08000c48 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8000c52:	617b      	str	r3, [r7, #20]
  return(result);
 8000c54:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c5c:	4b5f      	ldr	r3, [pc, #380]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	22ca      	movs	r2, #202	; 0xca
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
 8000c66:	4b5d      	ldr	r3, [pc, #372]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2253      	movs	r2, #83	; 0x53
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000c70:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c82:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000c84:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000c8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c90:	4954      	ldr	r1, [pc, #336]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d172      	bne.n	8000d8c <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ca6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000caa:	494e      	ldr	r1, [pc, #312]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000cba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cbe:	4949      	ldr	r1, [pc, #292]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	440b      	add	r3, r1
 8000cca:	3310      	adds	r3, #16
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d050      	beq.n	8000d7c <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000cda:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cde:	4941      	ldr	r1, [pc, #260]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	330d      	adds	r3, #13
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d126      	bne.n	8000d42 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fde4 	bl	80008c8 <UnlinkTimer>
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	f383 8810 	msr	PRIMASK, r3
}
 8000d0a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d0c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d10:	4934      	ldr	r1, [pc, #208]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fa4e 	bl	80011c8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	22ca      	movs	r2, #202	; 0xca
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2253      	movs	r2, #83	; 0x53
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8000d40:	e014      	b.n	8000d6c <HW_TS_RTC_Wakeup_Handler+0x124>
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f383 8810 	msr	PRIMASK, r3
}
 8000d4c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9ac 	bl	80010b0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	22ca      	movs	r2, #202	; 0xca
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2253      	movs	r2, #83	; 0x53
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d70:	69fa      	ldr	r2, [r7, #28]
 8000d72:	4619      	mov	r1, r3
 8000d74:	69b8      	ldr	r0, [r7, #24]
 8000d76:	f000 faaf 	bl	80012d8 <HW_TS_RTC_Int_AppNot>
 8000d7a:	e025      	b.n	8000dc8 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000d7c:	f7ff fec6 	bl	8000b0c <RescheduleTimerList>
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	f383 8810 	msr	PRIMASK, r3
}
 8000d8a:	e01d      	b.n	8000dc8 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d8c:	bf00      	nop
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f7      	beq.n	8000d8e <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000db2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000db6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f383 8810 	msr	PRIMASK, r3
}
 8000dc6:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000dd2:	bf00      	nop
}
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001c4 	.word	0x200001c4
 8000de0:	200000b8 	.word	0x200000b8
 8000de4:	20000028 	.word	0x20000028
 8000de8:	200000c0 	.word	0x200000c0
 8000dec:	58000800 	.word	0x58000800

08000df0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000dfc:	4a64      	ldr	r2, [pc, #400]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e02:	4b63      	ldr	r3, [pc, #396]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	22ca      	movs	r2, #202	; 0xca
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e0c:	4b60      	ldr	r3, [pc, #384]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2253      	movs	r2, #83	; 0x53
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e16:	4b5f      	ldr	r3, [pc, #380]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	4a5e      	ldr	r2, [pc, #376]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e22:	4b5c      	ldr	r3, [pc, #368]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f1c3 0304 	rsb	r3, r3, #4
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b58      	ldr	r3, [pc, #352]	; (8000f98 <HW_TS_Init+0x1a8>)
 8000e36:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e38:	4b56      	ldr	r3, [pc, #344]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000e40:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000e44:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	fa92 f2a2 	rbit	r2, r2
 8000e4c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d101      	bne.n	8000e5c <HW_TS_Init+0x6c>
  {
    return 32U;
 8000e58:	2220      	movs	r2, #32
 8000e5a:	e003      	b.n	8000e64 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	fab2 f282 	clz	r2, r2
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	40d3      	lsrs	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <HW_TS_Init+0x1ac>)
 8000e6e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000e70:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <HW_TS_Init+0x1b0>)
 8000e82:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000e84:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <HW_TS_Init+0x1b0>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	4a44      	ldr	r2, [pc, #272]	; (8000f9c <HW_TS_Init+0x1ac>)
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	fb02 f303 	mul.w	r3, r2, r3
 8000e92:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000e96:	4a40      	ldr	r2, [pc, #256]	; (8000f98 <HW_TS_Init+0x1a8>)
 8000e98:	7812      	ldrb	r2, [r2, #0]
 8000e9a:	40d3      	lsrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d904      	bls.n	8000eb2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <HW_TS_Init+0x1b4>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	801a      	strh	r2, [r3, #0]
 8000eb0:	e003      	b.n	8000eba <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <HW_TS_Init+0x1b4>)
 8000eb8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000eba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ebe:	f7ff fb81 	bl	80005c4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ec2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ec6:	f7ff fb69 	bl	800059c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d143      	bne.n	8000f58 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HW_TS_Init+0x1b8>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <HW_TS_Init+0x1bc>)
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	77fb      	strb	r3, [r7, #31]
 8000ee2:	e00c      	b.n	8000efe <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000ee4:	7ffa      	ldrb	r2, [r7, #31]
 8000ee6:	4932      	ldr	r1, [pc, #200]	; (8000fb0 <HW_TS_Init+0x1c0>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	330c      	adds	r3, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ef8:	7ffb      	ldrb	r3, [r7, #31]
 8000efa:	3301      	adds	r3, #1
 8000efc:	77fb      	strb	r3, [r7, #31]
 8000efe:	7ffb      	ldrb	r3, [r7, #31]
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d9ef      	bls.n	8000ee4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HW_TS_Init+0x1c4>)
 8000f06:	2206      	movs	r2, #6
 8000f08:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f1c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f32:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f34:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HW_TS_Init+0x1c8>)
 8000f36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f3a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f002 ffcc 	bl	8003eda <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	e00a      	b.n	8000f6e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f002 ffa8 	bl	8003ebe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	22ff      	movs	r2, #255	; 0xff
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f002 ff5c 	bl	8003e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f82:	2003      	movs	r0, #3
 8000f84:	f002 ff73 	bl	8003e6e <HAL_NVIC_EnableIRQ>

  return;
 8000f88:	bf00      	nop
}
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001c4 	.word	0x200001c4
 8000f94:	40002800 	.word	0x40002800
 8000f98:	200001c8 	.word	0x200001c8
 8000f9c:	200001c9 	.word	0x200001c9
 8000fa0:	200001ca 	.word	0x200001ca
 8000fa4:	200001cc 	.word	0x200001cc
 8000fa8:	200000c0 	.word	0x200000c0
 8000fac:	200000bc 	.word	0x200000bc
 8000fb0:	20000028 	.word	0x20000028
 8000fb4:	200000b8 	.word	0x200000b8
 8000fb8:	58000800 	.word	0x58000800

08000fbc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8000fd6:	61fb      	str	r3, [r7, #28]
  return(result);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000fe0:	e004      	b.n	8000fec <HW_TS_Create+0x30>
  {
    loop++;
 8000fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d80c      	bhi.n	800100e <HW_TS_Create+0x52>
 8000ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ff8:	492c      	ldr	r1, [pc, #176]	; (80010ac <HW_TS_Create+0xf0>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	440b      	add	r3, r1
 8001004:	330c      	adds	r3, #12
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1e9      	bne.n	8000fe2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800100e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001012:	2b06      	cmp	r3, #6
 8001014:	d038      	beq.n	8001088 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001016:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800101a:	4924      	ldr	r1, [pc, #144]	; (80010ac <HW_TS_Create+0xf0>)
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	330c      	adds	r3, #12
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	f383 8810 	msr	PRIMASK, r3
}
 8001036:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001038:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800103c:	491b      	ldr	r1, [pc, #108]	; (80010ac <HW_TS_Create+0xf0>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3310      	adds	r3, #16
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800104e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001052:	4916      	ldr	r1, [pc, #88]	; (80010ac <HW_TS_Create+0xf0>)
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	330d      	adds	r3, #13
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001064:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001068:	4910      	ldr	r1, [pc, #64]	; (80010ac <HW_TS_Create+0xf0>)
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800107e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001086:	e008      	b.n	800109a <HW_TS_Create+0xde>
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f383 8810 	msr	PRIMASK, r3
}
 8001092:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001094:	2301      	movs	r3, #1
 8001096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800109a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800109e:	4618      	mov	r0, r3
 80010a0:	372c      	adds	r7, #44	; 0x2c
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000028 	.word	0x20000028

080010b0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010ba:	f3ef 8310 	mrs	r3, PRIMASK
 80010be:	60fb      	str	r3, [r7, #12]
  return(result);
 80010c0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80010c8:	2003      	movs	r0, #3
 80010ca:	f002 fede 	bl	8003e8a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HW_TS_Stop+0x100>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	22ca      	movs	r2, #202	; 0xca
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <HW_TS_Stop+0x100>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2253      	movs	r2, #83	; 0x53
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	4933      	ldr	r1, [pc, #204]	; (80011b4 <HW_TS_Stop+0x104>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	330c      	adds	r3, #12
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d148      	bne.n	800118c <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fbe2 	bl	80008c8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HW_TS_Stop+0x108>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800110a:	7cfb      	ldrb	r3, [r7, #19]
 800110c:	2b06      	cmp	r3, #6
 800110e:	d135      	bne.n	800117c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HW_TS_Stop+0x10c>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111c:	d108      	bne.n	8001130 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800111e:	bf00      	nop
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HW_TS_Stop+0x100>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f7      	bne.n	8001120 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HW_TS_Stop+0x100>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HW_TS_Stop+0x100>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001142:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001144:	bf00      	nop
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HW_TS_Stop+0x100>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f7      	beq.n	8001146 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HW_TS_Stop+0x100>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HW_TS_Stop+0x100>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800116a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HW_TS_Stop+0x110>)
 800116e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001172:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001174:	2003      	movs	r0, #3
 8001176:	f002 feb0 	bl	8003eda <HAL_NVIC_ClearPendingIRQ>
 800117a:	e007      	b.n	800118c <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HW_TS_Stop+0x114>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	7cfa      	ldrb	r2, [r7, #19]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001188:	f7ff fcc0 	bl	8000b0c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HW_TS_Stop+0x100>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001196:	2003      	movs	r0, #3
 8001198:	f002 fe69 	bl	8003e6e <HAL_NVIC_EnableIRQ>
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f383 8810 	msr	PRIMASK, r3
}
 80011a6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011a8:	bf00      	nop
}
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001c4 	.word	0x200001c4
 80011b4:	20000028 	.word	0x20000028
 80011b8:	200000b8 	.word	0x200000b8
 80011bc:	40002800 	.word	0x40002800
 80011c0:	58000800 	.word	0x58000800
 80011c4:	200000b9 	.word	0x200000b9

080011c8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	493c      	ldr	r1, [pc, #240]	; (80012c8 <HW_TS_Start+0x100>)
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	330c      	adds	r3, #12
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d103      	bne.n	80011f4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff5e 	bl	80010b0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011f4:	f3ef 8310 	mrs	r3, PRIMASK
 80011f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80011fa:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80011fe:	b672      	cpsid	i
}
 8001200:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001202:	2003      	movs	r0, #3
 8001204:	f002 fe41 	bl	8003e8a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HW_TS_Start+0x104>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	22ca      	movs	r2, #202	; 0xca
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HW_TS_Start+0x104>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2253      	movs	r2, #83	; 0x53
 800121a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	492a      	ldr	r1, [pc, #168]	; (80012c8 <HW_TS_Start+0x100>)
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	330c      	adds	r3, #12
 800122c:	2202      	movs	r2, #2
 800122e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	4925      	ldr	r1, [pc, #148]	; (80012c8 <HW_TS_Start+0x100>)
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	3308      	adds	r3, #8
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	4920      	ldr	r1, [pc, #128]	; (80012c8 <HW_TS_Start+0x100>)
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	3304      	adds	r3, #4
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fa8a 	bl	8000774 <linkTimer>
 8001260:	4603      	mov	r3, r0
 8001262:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HW_TS_Start+0x108>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HW_TS_Start+0x10c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	7c7a      	ldrb	r2, [r7, #17]
 8001272:	429a      	cmp	r2, r3
 8001274:	d002      	beq.n	800127c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001276:	f7ff fc49 	bl	8000b0c <RescheduleTimerList>
 800127a:	e013      	b.n	80012a4 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	4912      	ldr	r1, [pc, #72]	; (80012c8 <HW_TS_Start+0x100>)
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	3308      	adds	r3, #8
 800128c:	6819      	ldr	r1, [r3, #0]
 800128e:	8a7b      	ldrh	r3, [r7, #18]
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	1ac9      	subs	r1, r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <HW_TS_Start+0x100>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4403      	add	r3, r0
 80012a0:	3308      	adds	r3, #8
 80012a2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HW_TS_Start+0x104>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	22ff      	movs	r2, #255	; 0xff
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012ae:	2003      	movs	r0, #3
 80012b0:	f002 fddd 	bl	8003e6e <HAL_NVIC_EnableIRQ>
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f383 8810 	msr	PRIMASK, r3
}
 80012be:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012c0:	bf00      	nop
}
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000028 	.word	0x20000028
 80012cc:	200001c4 	.word	0x200001c4
 80012d0:	200000b8 	.word	0x200000b8
 80012d4:	200000b9 	.word	0x200000b9

080012d8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	460b      	mov	r3, r1
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4798      	blx	r3

  return;
 80012ea:	bf00      	nop
}
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <LL_EXTI_DisableIT_0_31>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <LL_EXTI_DisableIT_0_31+0x28>)
 80012fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	43db      	mvns	r3, r3
 8001306:	4905      	ldr	r1, [pc, #20]	; (800131c <LL_EXTI_DisableIT_0_31+0x28>)
 8001308:	4013      	ands	r3, r2
 800130a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	58000800 	.word	0x58000800

08001320 <LL_EXTI_DisableIT_32_63>:
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <LL_EXTI_DisableIT_32_63+0x28>)
 800132a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	43db      	mvns	r3, r3
 8001332:	4905      	ldr	r1, [pc, #20]	; (8001348 <LL_EXTI_DisableIT_32_63+0x28>)
 8001334:	4013      	ands	r3, r2
 8001336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	58000800 	.word	0x58000800

0800134c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800135a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800135e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001366:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001372:	4313      	orrs	r3, r2
 8001374:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	cafecafe 	.word	0xcafecafe

08001388 <LL_RCC_LSE_SetDriveCapability>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001398:	f023 0218 	bic.w	r2, r3, #24
 800139c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800140c:	d101      	bne.n	8001412 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001432:	d101      	bne.n	8001438 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_AHB1_GRP1_EnableClock>:
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4313      	orrs	r3, r2
 800145a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800145c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4013      	ands	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001468:	68fb      	ldr	r3, [r7, #12]
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_AHB2_GRP1_EnableClock>:
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4313      	orrs	r3, r2
 800148c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4013      	ands	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_AHB3_GRP1_EnableClock>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80014b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014cc:	68fb      	ldr	r3, [r7, #12]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	041b      	lsls	r3, r3, #16
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	605a      	str	r2, [r3, #4]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	605a      	str	r2, [r3, #4]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	615a      	str	r2, [r3, #20]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	615a      	str	r2, [r3, #20]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	609a      	str	r2, [r3, #8]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0ac      	sub	sp, #176	; 0xb0
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t i = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  uint8_t UART_count = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 // char UART_string[33] = {"\0"};
  char buffer[3];
  char char_buffer[4];
  char UART_String[98] = {0};
 80015b2:	2300      	movs	r3, #0
 80015b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ba:	225e      	movs	r2, #94	; 0x5e
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f009 fa9c 	bl	800aafc <memset>
  char ADC_UART_String[33] = {0};
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	221d      	movs	r2, #29
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f009 fa93 	bl	800aafc <memset>
  UART_String[97] = 10; // line feed
 80015d6:	230a      	movs	r3, #10
 80015d8:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
  UART_String[96] = 13; // carriage return
 80015dc:	230d      	movs	r3, #13
 80015de:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
  Custom_Notification = 0;
 80015e2:	4bc5      	ldr	r3, [pc, #788]	; (80018f8 <main+0x358>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
  uint8_t SequenceLoop = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
  uint8_t UART_Transmit_ADC_values = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  uint8_t ADC_Read_Array_Complete = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
  uint16_t BatV = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
  GPIO_InitTypeDef GPIO_ChgMode = {0}; //This is used to change GPIO mode
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800160e:	4bbb      	ldr	r3, [pc, #748]	; (80018fc <main+0x35c>)
 8001610:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001614:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001616:	f001 f8af 	bl	8002778 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 800161a:	f000 fd7c 	bl	8002116 <Reset_Device>
  Config_HSE();
 800161e:	f000 fd66 	bl	80020ee <Config_HSE>
	
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 fafd 	bl	8001c20 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001626:	f000 fc1d 	bl	8001e64 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 800162a:	f000 fd59 	bl	80020e0 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 800162e:	f000 fdb4 	bl	800219a <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001632:	f000 fd11 	bl	8002058 <MX_GPIO_Init>
  MX_DMA_Init();
 8001636:	f000 fcf5 	bl	8002024 <MX_DMA_Init>
  MX_RF_Init();
 800163a:	f000 fc27 	bl	8001e8c <MX_RF_Init>
  MX_RTC_Init();
 800163e:	f000 fc2d 	bl	8001e9c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001642:	f000 fca3 	bl	8001f8c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001646:	f000 fc53 	bl	8001ef0 <MX_TIM2_Init>
  MX_ADC1_Init();
 800164a:	f000 fb55 	bl	8001cf8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Calibration for ADC
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800164e:	217f      	movs	r1, #127	; 0x7f
 8001650:	48ab      	ldr	r0, [pc, #684]	; (8001900 <main+0x360>)
 8001652:	f002 fa55 	bl	8003b00 <HAL_ADCEx_Calibration_Start>

  UART_Transmit_ADC_values = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 800165c:	f7fe fee2 	bl	8000424 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  HAL_TIM_Base_Start_IT(&htim2); //start timer2 with interrupt
 8001660:	48a8      	ldr	r0, [pc, #672]	; (8001904 <main+0x364>)
 8001662:	f004 fe03 	bl	800626c <HAL_TIM_Base_Start_IT>
  {
  	
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001666:	f04f 30ff 	mov.w	r0, #4294967295
 800166a:	f008 ffdf 	bl	800a62c <UTIL_SEQ_Run>

	// RunningState = 1 means BLE is running
	// This if function is meant to let STM micro to send data to computer once data is compiled.
	if ((RunningState == 1) && (ADC_Read_Array_Complete == 1)) {
 800166e:	4ba6      	ldr	r3, [pc, #664]	; (8001908 <main+0x368>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10a      	bne.n	800168c <main+0xec>
 8001676:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800167a:	2b01      	cmp	r3, #1
 800167c:	d106      	bne.n	800168c <main+0xec>

		}
*/
		// Compile data into an array for sending via BLE

		RunningState = 0; // reset variable
 800167e:	4ba2      	ldr	r3, [pc, #648]	; (8001908 <main+0x368>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8001684:	2100      	movs	r1, #0
 8001686:	2002      	movs	r0, #2
 8001688:	f009 f8d6 	bl	800a838 <UTIL_SEQ_SetTask>
		// Temporarily disable the UART transmit to reduce time for processing
		// HAL_UART_Transmit(&huart1, &UART_String, sizeof(UART_String), 100); // Send data via UART (working)
	}

	if (TimeReady == 1) {
 800168c:	4b9f      	ldr	r3, [pc, #636]	; (800190c <main+0x36c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d11c      	bne.n	80016ce <main+0x12e>

		// reset variables
		SequenceLoop = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
		TimeReady = 0; // reset trigger
 800169a:	4b9c      	ldr	r3, [pc, #624]	; (800190c <main+0x36c>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]

		// start GPIO1

		// Set GPIO from to Output Push Pull mode
		GPIO_ChgMode.Pin = GPIO1_Pin;
 80016a0:	2304      	movs	r3, #4
 80016a2:	607b      	str	r3, [r7, #4]
		GPIO_ChgMode.Mode = GPIO_MODE_OUTPUT_PP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
		GPIO_ChgMode.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
		GPIO_ChgMode.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_ChgMode);
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4896      	ldr	r0, [pc, #600]	; (8001910 <main+0x370>)
 80016b6:	f002 ff23 	bl	8004500 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_SET);
 80016ba:	2201      	movs	r2, #1
 80016bc:	2104      	movs	r1, #4
 80016be:	4894      	ldr	r0, [pc, #592]	; (8001910 <main+0x370>)
 80016c0:	f003 f886 	bl	80047d0 <HAL_GPIO_WritePin>
//		HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
//		HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
//		HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6

		// start adc conversion
		HAL_ADC_Start_DMA(&hadc1, &ADC_Buffer, 6); //This needs to be changed later, ADC reads 7 values
 80016c4:	2206      	movs	r2, #6
 80016c6:	4993      	ldr	r1, [pc, #588]	; (8001914 <main+0x374>)
 80016c8:	488d      	ldr	r0, [pc, #564]	; (8001900 <main+0x360>)
 80016ca:	f001 fc21 	bl	8002f10 <HAL_ADC_Start_DMA>

	}

	// ADC_Read_Complete only goes 1 when ADC conversion is finished
	if (ADC_Read_Complete == 1) {
 80016ce:	4b92      	ldr	r3, [pc, #584]	; (8001918 <main+0x378>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d1c7      	bne.n	8001666 <main+0xc6>

		// Save data to BT array
		for (i=0; i<6; i++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80016dc:	e02d      	b.n	800173a <main+0x19a>
			BTdata[SequenceLoop*12 + i*2] = ADC_Buffer[i]>>8; //high byte
 80016de:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80016e2:	4a8c      	ldr	r2, [pc, #560]	; (8001914 <main+0x374>)
 80016e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	b299      	uxth	r1, r3
 80016ec:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	461a      	mov	r2, r3
 80016fa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80016fe:	4413      	add	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b2c9      	uxtb	r1, r1
 8001704:	4a85      	ldr	r2, [pc, #532]	; (800191c <main+0x37c>)
 8001706:	54d1      	strb	r1, [r2, r3]
			BTdata[SequenceLoop*12 + i*2 + 1] = ADC_Buffer[i]; //low byte
 8001708:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800170c:	4a81      	ldr	r2, [pc, #516]	; (8001914 <main+0x374>)
 800170e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001712:	f897 20ad 	ldrb.w	r2, [r7, #173]	; 0xad
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	461a      	mov	r2, r3
 8001720:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	3301      	adds	r3, #1
 800172a:	b2c9      	uxtb	r1, r1
 800172c:	4a7b      	ldr	r2, [pc, #492]	; (800191c <main+0x37c>)
 800172e:	54d1      	strb	r1, [r2, r3]
		for (i=0; i<6; i++) {
 8001730:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001734:	3301      	adds	r3, #1
 8001736:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800173a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800173e:	2b05      	cmp	r3, #5
 8001740:	d9cd      	bls.n	80016de <main+0x13e>
		}

		// UART Debug transmission, set UART_Transmit_ADC_values to 0 to quicken operation
		if (UART_Transmit_ADC_values == 1) {
 8001742:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 8150 	bne.w	80019ec <main+0x44c>
			itoa(SequenceLoop, buffer, 10);
 800174c:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001750:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001754:	220a      	movs	r2, #10
 8001756:	4618      	mov	r0, r3
 8001758:	f009 f9c0 	bl	800aadc <itoa>
			buffer[1] = '=';
 800175c:	233d      	movs	r3, #61	; 0x3d
 800175e:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
			buffer[2] = '>';
 8001762:	233e      	movs	r3, #62	; 0x3e
 8001764:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
			HAL_UART_Transmit(&huart1, buffer, 3, 10); // Send data via UART (working)
 8001768:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800176c:	230a      	movs	r3, #10
 800176e:	2203      	movs	r2, #3
 8001770:	486b      	ldr	r0, [pc, #428]	; (8001920 <main+0x380>)
 8001772:	f005 f9b5 	bl	8006ae0 <HAL_UART_Transmit>

			UART_count = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae

			// Reading the ADC buffer results
			for (i=0; i<6; i++) {
 800177c:	2300      	movs	r3, #0
 800177e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8001782:	e109      	b.n	8001998 <main+0x3f8>
				// Making a char array for transmitting via UART for checking
				itoa(ADC_Buffer[i], char_buffer, 10);
 8001784:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001788:	4a62      	ldr	r2, [pc, #392]	; (8001914 <main+0x374>)
 800178a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800178e:	4618      	mov	r0, r3
 8001790:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001794:	220a      	movs	r2, #10
 8001796:	4619      	mov	r1, r3
 8001798:	f009 f9a0 	bl	800aadc <itoa>

				if (ADC_Buffer[i] < 10) {
 800179c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80017a0:	4a5c      	ldr	r2, [pc, #368]	; (8001914 <main+0x374>)
 80017a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a6:	2b09      	cmp	r3, #9
 80017a8:	d832      	bhi.n	8001810 <main+0x270>
					ADC_UART_String[UART_count+0] = '0';
 80017aa:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80017ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80017b2:	4413      	add	r3, r2
 80017b4:	2230      	movs	r2, #48	; 0x30
 80017b6:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+1] = '0';
 80017ba:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80017be:	3301      	adds	r3, #1
 80017c0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80017c4:	4413      	add	r3, r2
 80017c6:	2230      	movs	r2, #48	; 0x30
 80017c8:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+2] = '0';
 80017cc:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80017d0:	3302      	adds	r3, #2
 80017d2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80017d6:	4413      	add	r3, r2
 80017d8:	2230      	movs	r2, #48	; 0x30
 80017da:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+3] = char_buffer[0];
 80017de:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80017e2:	3303      	adds	r3, #3
 80017e4:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 80017e8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80017ec:	440b      	add	r3, r1
 80017ee:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+4] = 44; //44 is ascii for ","
 80017f2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80017f6:	3304      	adds	r3, #4
 80017f8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80017fc:	4413      	add	r3, r2
 80017fe:	222c      	movs	r2, #44	; 0x2c
 8001800:	f803 2c98 	strb.w	r2, [r3, #-152]
					UART_count += 5;
 8001804:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001808:	3305      	adds	r3, #5
 800180a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800180e:	e0be      	b.n	800198e <main+0x3ee>
				}
				else if (ADC_Buffer[i] < 100) {
 8001810:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001814:	4a3f      	ldr	r2, [pc, #252]	; (8001914 <main+0x374>)
 8001816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800181a:	2b63      	cmp	r3, #99	; 0x63
 800181c:	d833      	bhi.n	8001886 <main+0x2e6>
					ADC_UART_String[UART_count+0] = '0';
 800181e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001822:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001826:	4413      	add	r3, r2
 8001828:	2230      	movs	r2, #48	; 0x30
 800182a:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+1] = '0';
 800182e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001832:	3301      	adds	r3, #1
 8001834:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001838:	4413      	add	r3, r2
 800183a:	2230      	movs	r2, #48	; 0x30
 800183c:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+2] = char_buffer[0];
 8001840:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001844:	3302      	adds	r3, #2
 8001846:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 800184a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800184e:	440b      	add	r3, r1
 8001850:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+3] = char_buffer[1];
 8001854:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001858:	3303      	adds	r3, #3
 800185a:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 800185e:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001862:	440b      	add	r3, r1
 8001864:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+4] = 44; //44 is ascii for ","
 8001868:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800186c:	3304      	adds	r3, #4
 800186e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001872:	4413      	add	r3, r2
 8001874:	222c      	movs	r2, #44	; 0x2c
 8001876:	f803 2c98 	strb.w	r2, [r3, #-152]
					UART_count += 5;
 800187a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800187e:	3305      	adds	r3, #5
 8001880:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 8001884:	e083      	b.n	800198e <main+0x3ee>
				}
				else if (ADC_Buffer[i] < 1000) {
 8001886:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800188a:	4a22      	ldr	r2, [pc, #136]	; (8001914 <main+0x374>)
 800188c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001894:	d246      	bcs.n	8001924 <main+0x384>
					ADC_UART_String[UART_count+0] = '0';
 8001896:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800189a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800189e:	4413      	add	r3, r2
 80018a0:	2230      	movs	r2, #48	; 0x30
 80018a2:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+1] = char_buffer[0];
 80018a6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80018aa:	3301      	adds	r3, #1
 80018ac:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 80018b0:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80018b4:	440b      	add	r3, r1
 80018b6:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+2] = char_buffer[1];
 80018ba:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80018be:	3302      	adds	r3, #2
 80018c0:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 80018c4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80018c8:	440b      	add	r3, r1
 80018ca:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+3] = char_buffer[2];
 80018ce:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80018d2:	3303      	adds	r3, #3
 80018d4:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 80018d8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80018dc:	440b      	add	r3, r1
 80018de:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+4] = 44; //44 is ascii for ","
 80018e2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80018e6:	3304      	adds	r3, #4
 80018e8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80018ec:	4413      	add	r3, r2
 80018ee:	222c      	movs	r2, #44	; 0x2c
 80018f0:	f803 2c98 	strb.w	r2, [r3, #-152]
 80018f4:	e04b      	b.n	800198e <main+0x3ee>
 80018f6:	bf00      	nop
 80018f8:	20000218 	.word	0x20000218
 80018fc:	58004000 	.word	0x58004000
 8001900:	200003e8 	.word	0x200003e8
 8001904:	20000560 	.word	0x20000560
 8001908:	20000219 	.word	0x20000219
 800190c:	2000021a 	.word	0x2000021a
 8001910:	48000400 	.word	0x48000400
 8001914:	2000021c 	.word	0x2000021c
 8001918:	20000228 	.word	0x20000228
 800191c:	200001d0 	.word	0x200001d0
 8001920:	2000044c 	.word	0x2000044c
				}

				else {
					ADC_UART_String[UART_count+0] = char_buffer[0];
 8001924:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001928:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 800192c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001930:	440b      	add	r3, r1
 8001932:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+1] = char_buffer[1];
 8001936:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800193a:	3301      	adds	r3, #1
 800193c:	f897 20a1 	ldrb.w	r2, [r7, #161]	; 0xa1
 8001940:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001944:	440b      	add	r3, r1
 8001946:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+2] = char_buffer[2];
 800194a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800194e:	3302      	adds	r3, #2
 8001950:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 8001954:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8001958:	440b      	add	r3, r1
 800195a:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+3] = char_buffer[3];
 800195e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001962:	3303      	adds	r3, #3
 8001964:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8001968:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800196c:	440b      	add	r3, r1
 800196e:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+4] = 44; //44 is ascii for ","
 8001972:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001976:	3304      	adds	r3, #4
 8001978:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800197c:	4413      	add	r3, r2
 800197e:	222c      	movs	r2, #44	; 0x2c
 8001980:	f803 2c98 	strb.w	r2, [r3, #-152]
					UART_count += 5;
 8001984:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8001988:	3305      	adds	r3, #5
 800198a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
			for (i=0; i<6; i++) {
 800198e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8001992:	3301      	adds	r3, #1
 8001994:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8001998:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800199c:	2b05      	cmp	r3, #5
 800199e:	f67f aef1 	bls.w	8001784 <main+0x1e4>
				}
			}

			ADC_UART_String[UART_count] = 'A';
 80019a2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80019a6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80019aa:	4413      	add	r3, r2
 80019ac:	2241      	movs	r2, #65	; 0x41
 80019ae:	f803 2c98 	strb.w	r2, [r3, #-152]
			ADC_UART_String[UART_count+1] = '\n';
 80019b2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80019b6:	3301      	adds	r3, #1
 80019b8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80019bc:	4413      	add	r3, r2
 80019be:	220a      	movs	r2, #10
 80019c0:	f803 2c98 	strb.w	r2, [r3, #-152]
			ADC_UART_String[UART_count+2] = '\r';
 80019c4:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80019c8:	3302      	adds	r3, #2
 80019ca:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80019ce:	4413      	add	r3, r2
 80019d0:	220d      	movs	r2, #13
 80019d2:	f803 2c98 	strb.w	r2, [r3, #-152]

			HAL_UART_Transmit(&huart1, &ADC_UART_String, UART_count+3, 50); // Send data via UART (working)
 80019d6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3303      	adds	r3, #3
 80019de:	b29a      	uxth	r2, r3
 80019e0:	f107 0118 	add.w	r1, r7, #24
 80019e4:	2332      	movs	r3, #50	; 0x32
 80019e6:	4889      	ldr	r0, [pc, #548]	; (8001c0c <main+0x66c>)
 80019e8:	f005 f87a 	bl	8006ae0 <HAL_UART_Transmit>
		}

		ADC_Read_Complete = 0;
 80019ec:	4b88      	ldr	r3, [pc, #544]	; (8001c10 <main+0x670>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
		SequenceLoop++;
 80019f2:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80019f6:	3301      	adds	r3, #1
 80019f8:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad

		// Set the appropriate GPIO pins
		if (SequenceLoop == 1) {
 80019fc:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d126      	bne.n	8001a52 <main+0x4b2>
			// Reset GPIO output to 0V/GND
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2104      	movs	r1, #4
 8001a08:	4882      	ldr	r0, [pc, #520]	; (8001c14 <main+0x674>)
 8001a0a:	f002 fee1 	bl	80047d0 <HAL_GPIO_WritePin>

			// Set GPIO back to Analog
			GPIO_ChgMode.Pin = GPIO1_Pin;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_ANALOG;
 8001a12:	2303      	movs	r3, #3
 8001a14:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIO1_GPIO_Port, &GPIO_ChgMode);
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	487d      	ldr	r0, [pc, #500]	; (8001c14 <main+0x674>)
 8001a20:	f002 fd6e 	bl	8004500 <HAL_GPIO_Init>

			// Set GPIO to Output Push Pull
			GPIO_ChgMode.Pin = GPIO2_Pin;
 8001a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a28:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
			GPIO_ChgMode.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
			HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_ChgMode);
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3e:	f002 fd5f 	bl	8004500 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_SET);
 8001a42:	2201      	movs	r2, #1
 8001a44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f002 fec0 	bl	80047d0 <HAL_GPIO_WritePin>
 8001a50:	e0b0      	b.n	8001bb4 <main+0x614>
//			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
//			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
//			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
//			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
		}
		else if (SequenceLoop == 2) {
 8001a52:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d12a      	bne.n	8001ab0 <main+0x510>

			// Reset GPIO output to 0V/GND
			HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a64:	f002 feb4 	bl	80047d0 <HAL_GPIO_WritePin>

			// Set GPIO back to Analog
			GPIO_ChgMode.Pin = GPIO2_Pin;
 8001a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6c:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_ANALOG;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_ChgMode);
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f002 fd3f 	bl	8004500 <HAL_GPIO_Init>

			// Set GPIO to Output Push Pull
			GPIO_ChgMode.Pin = GPIO3_Pin;
 8001a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a86:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
			GPIO_ChgMode.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
			HAL_GPIO_Init(GPIO3_GPIO_Port, &GPIO_ChgMode);
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9c:	f002 fd30 	bl	8004500 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aaa:	f002 fe91 	bl	80047d0 <HAL_GPIO_WritePin>
 8001aae:	e081      	b.n	8001bb4 <main+0x614>
//			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_SET);   // GPIO3
//			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
//			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
//			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
		}
		else if (SequenceLoop == 3) {
 8001ab0:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d128      	bne.n	8001b0a <main+0x56a>
			// Reset GPIO output to 0V/GND
			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac2:	f002 fe85 	bl	80047d0 <HAL_GPIO_WritePin>

			// Set GPIO back to Analog
			GPIO_ChgMode.Pin = GPIO3_Pin;
 8001ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aca:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIO3_GPIO_Port, &GPIO_ChgMode);
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001adc:	f002 fd10 	bl	8004500 <HAL_GPIO_Init>

			// Set GPIO to Output Push Pull
			GPIO_ChgMode.Pin = GPIO4_Pin;
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
			GPIO_ChgMode.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
			HAL_GPIO_Init(GPIO4_GPIO_Port, &GPIO_ChgMode);
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f002 fd02 	bl	8004500 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	2180      	movs	r1, #128	; 0x80
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b04:	f002 fe64 	bl	80047d0 <HAL_GPIO_WritePin>
 8001b08:	e054      	b.n	8001bb4 <main+0x614>
//			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
//			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_SET); // GPIO4
//			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
//			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
		}
		else if (SequenceLoop == 4) {
 8001b0a:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d126      	bne.n	8001b60 <main+0x5c0>
			// Reset GPIO output to 0V/GND
			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f002 fe59 	bl	80047d0 <HAL_GPIO_WritePin>

			// Set GPIO back to Analog
			GPIO_ChgMode.Pin = GPIO4_Pin;
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_ANALOG;
 8001b22:	2303      	movs	r3, #3
 8001b24:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIO4_GPIO_Port, &GPIO_ChgMode);
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b32:	f002 fce5 	bl	8004500 <HAL_GPIO_Init>

			// Set GPIO to Output Push Pull
			GPIO_ChgMode.Pin = GPIO5_Pin;
 8001b36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b3a:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
			GPIO_ChgMode.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
			HAL_GPIO_Init(GPIO5_GPIO_Port, &GPIO_ChgMode);
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4831      	ldr	r0, [pc, #196]	; (8001c14 <main+0x674>)
 8001b4e:	f002 fcd7 	bl	8004500 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b58:	482e      	ldr	r0, [pc, #184]	; (8001c14 <main+0x674>)
 8001b5a:	f002 fe39 	bl	80047d0 <HAL_GPIO_WritePin>
 8001b5e:	e029      	b.n	8001bb4 <main+0x614>
//			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
//			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
//			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_SET); // GPIO5
//			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
		}
		else if (SequenceLoop == 5) {
 8001b60:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d125      	bne.n	8001bb4 <main+0x614>
			// Reset GPIO output to 0V/GND
			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b6e:	4829      	ldr	r0, [pc, #164]	; (8001c14 <main+0x674>)
 8001b70:	f002 fe2e 	bl	80047d0 <HAL_GPIO_WritePin>

			// Set GPIO back to Analog
			GPIO_ChgMode.Pin = GPIO5_Pin;
 8001b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b78:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_ANALOG;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIO5_GPIO_Port, &GPIO_ChgMode);
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4823      	ldr	r0, [pc, #140]	; (8001c14 <main+0x674>)
 8001b88:	f002 fcba 	bl	8004500 <HAL_GPIO_Init>

			// Set GPIO to Output Push Pull
			GPIO_ChgMode.Pin = GPIO6_Pin;
 8001b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b90:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
			GPIO_ChgMode.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
			HAL_GPIO_Init(GPIO6_GPIO_Port, &GPIO_ChgMode);
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	481c      	ldr	r0, [pc, #112]	; (8001c14 <main+0x674>)
 8001ba4:	f002 fcac 	bl	8004500 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bae:	4819      	ldr	r0, [pc, #100]	; (8001c14 <main+0x674>)
 8001bb0:	f002 fe0e 	bl	80047d0 <HAL_GPIO_WritePin>
//			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
//			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_SET); // GPIO6
		}

		// once all ADC reading is done
		if (SequenceLoop >= 6) {
 8001bb4:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d920      	bls.n	8001bfe <main+0x65e>

			if (UART_Transmit_ADC_values == 1) {
 8001bbc:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d106      	bne.n	8001bd2 <main+0x632>
				HAL_UART_Transmit(&huart1, '\n\r', 2, 20); // Send data via UART
 8001bc4:	2314      	movs	r3, #20
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f640 210d 	movw	r1, #2573	; 0xa0d
 8001bcc:	480f      	ldr	r0, [pc, #60]	; (8001c0c <main+0x66c>)
 8001bce:	f004 ff87 	bl	8006ae0 <HAL_UART_Transmit>
			}

			// reset all GPIO
			// Reset GPIO output to 0V/GND
			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd8:	480e      	ldr	r0, [pc, #56]	; (8001c14 <main+0x674>)
 8001bda:	f002 fdf9 	bl	80047d0 <HAL_GPIO_WritePin>

			// Set GPIO back to Analog
			GPIO_ChgMode.Pin = GPIO6_Pin;
 8001bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be2:	607b      	str	r3, [r7, #4]
			GPIO_ChgMode.Mode = GPIO_MODE_ANALOG;
 8001be4:	2303      	movs	r3, #3
 8001be6:	60bb      	str	r3, [r7, #8]
			GPIO_ChgMode.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_Init(GPIO6_GPIO_Port, &GPIO_ChgMode);
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4808      	ldr	r0, [pc, #32]	; (8001c14 <main+0x674>)
 8001bf2:	f002 fc85 	bl	8004500 <HAL_GPIO_Init>
//			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
//			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
//			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
//			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6

			ADC_Read_Array_Complete = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8001bfc:	e533      	b.n	8001666 <main+0xc6>
		}
		else {
			HAL_ADC_Start_DMA(&hadc1, &ADC_Buffer, 6); // Start conversion
 8001bfe:	2206      	movs	r2, #6
 8001c00:	4905      	ldr	r1, [pc, #20]	; (8001c18 <main+0x678>)
 8001c02:	4806      	ldr	r0, [pc, #24]	; (8001c1c <main+0x67c>)
 8001c04:	f001 f984 	bl	8002f10 <HAL_ADC_Start_DMA>
	UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001c08:	e52d      	b.n	8001666 <main+0xc6>
 8001c0a:	bf00      	nop
 8001c0c:	2000044c 	.word	0x2000044c
 8001c10:	20000228 	.word	0x20000228
 8001c14:	48000400 	.word	0x48000400
 8001c18:	2000021c 	.word	0x2000021c
 8001c1c:	200003e8 	.word	0x200003e8

08001c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0a2      	sub	sp, #136	; 0x88
 8001c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c2a:	2248      	movs	r2, #72	; 0x48
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f008 ff64 	bl	800aafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c48:	463b      	mov	r3, r7
 8001c4a:	2224      	movs	r2, #36	; 0x24
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f008 ff54 	bl	800aafc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c54:	f002 fe7e 	bl	8004954 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff fb95 	bl	8001388 <LL_RCC_LSE_SetDriveCapability>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001c5e:	2307      	movs	r3, #7
 8001c60:	643b      	str	r3, [r7, #64]	; 0x40
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c72:	2340      	movs	r3, #64	; 0x40
 8001c74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f9e2 	bl	8005048 <HAL_RCC_OscConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c8a:	f000 fac5 	bl	8002218 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001c8e:	236f      	movs	r3, #111	; 0x6f
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 fd4b 	bl	800574c <HAL_RCC_ClockConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001cbc:	f000 faac 	bl	8002218 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP|RCC_PERIPHCLK_RTC
 8001cc0:	f641 4301 	movw	r3, #7169	; 0x1c01
 8001cc4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001cca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001cce:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001cd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cda:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 f8a4 	bl	8005e2c <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001cea:	f000 fa95 	bl	8002218 <Error_Handler>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3788      	adds	r7, #136	; 0x88
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d0e:	4b4d      	ldr	r3, [pc, #308]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d10:	4a4d      	ldr	r2, [pc, #308]	; (8001e48 <MX_ADC1_Init+0x150>)
 8001d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d20:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d2c:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d2e:	2204      	movs	r2, #4
 8001d30:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d32:	4b44      	ldr	r3, [pc, #272]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8001d3e:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d40:	2206      	movs	r2, #6
 8001d42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d44:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d52:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d58:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d66:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d6e:	4835      	ldr	r0, [pc, #212]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d70:	f000 ff82 	bl	8002c78 <HAL_ADC_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001d7a:	f000 fa4d 	bl	8002218 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d7e:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <MX_ADC1_Init+0x154>)
 8001d80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d82:	2306      	movs	r3, #6
 8001d84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001d86:	2303      	movs	r3, #3
 8001d88:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d8a:	237f      	movs	r3, #127	; 0x7f
 8001d8c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	482a      	ldr	r0, [pc, #168]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001d9c:	f001 f950 	bl	8003040 <HAL_ADC_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001da6:	f000 fa37 	bl	8002218 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <MX_ADC1_Init+0x158>)
 8001dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dae:	230c      	movs	r3, #12
 8001db0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db2:	463b      	mov	r3, r7
 8001db4:	4619      	mov	r1, r3
 8001db6:	4823      	ldr	r0, [pc, #140]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001db8:	f001 f942 	bl	8003040 <HAL_ADC_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001dc2:	f000 fa29 	bl	8002218 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001dc6:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <MX_ADC1_Init+0x15c>)
 8001dc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001dca:	2312      	movs	r3, #18
 8001dcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	481c      	ldr	r0, [pc, #112]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001dd4:	f001 f934 	bl	8003040 <HAL_ADC_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001dde:	f000 fa1b 	bl	8002218 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001de2:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <MX_ADC1_Init+0x160>)
 8001de4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001de6:	2318      	movs	r3, #24
 8001de8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dea:	463b      	mov	r3, r7
 8001dec:	4619      	mov	r1, r3
 8001dee:	4815      	ldr	r0, [pc, #84]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001df0:	f001 f926 	bl	8003040 <HAL_ADC_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001dfa:	f000 fa0d 	bl	8002218 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <MX_ADC1_Init+0x164>)
 8001e00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001e0e:	f001 f917 	bl	8003040 <HAL_ADC_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8001e18:	f000 f9fe 	bl	8002218 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <MX_ADC1_Init+0x168>)
 8001e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001e20:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001e24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e26:	463b      	mov	r3, r7
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <MX_ADC1_Init+0x14c>)
 8001e2c:	f001 f908 	bl	8003040 <HAL_ADC_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8001e36:	f000 f9ef 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200003e8 	.word	0x200003e8
 8001e48:	50040000 	.word	0x50040000
 8001e4c:	14f00020 	.word	0x14f00020
 8001e50:	19200040 	.word	0x19200040
 8001e54:	1d500080 	.word	0x1d500080
 8001e58:	21800100 	.word	0x21800100
 8001e5c:	25b00200 	.word	0x25b00200
 8001e60:	2a000400 	.word	0x2a000400

08001e64 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_IPCC_Init+0x20>)
 8001e6a:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <MX_IPCC_Init+0x24>)
 8001e6c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_IPCC_Init+0x20>)
 8001e70:	f002 fcea 	bl	8004848 <HAL_IPCC_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001e7a:	f000 f9cd 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000034c 	.word	0x2000034c
 8001e88:	58000c00 	.word	0x58000c00

08001e8c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_RTC_Init+0x4c>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <MX_RTC_Init+0x50>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <MX_RTC_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_RTC_Init+0x4c>)
 8001eae:	220f      	movs	r2, #15
 8001eb0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <MX_RTC_Init+0x4c>)
 8001eb4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001eb8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_RTC_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_RTC_Init+0x4c>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_RTC_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_RTC_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_RTC_Init+0x4c>)
 8001ed4:	f004 f885 	bl	8005fe2 <HAL_RTC_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ede:	f000 f99b 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000053c 	.word	0x2000053c
 8001eec:	40002800 	.word	0x40002800

08001ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0310 	add.w	r3, r7, #16
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3199;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f18:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001f1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001f24:	4b18      	ldr	r3, [pc, #96]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2c:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f38:	4813      	ldr	r0, [pc, #76]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f3a:	f004 f940 	bl	80061be <HAL_TIM_Base_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001f44:	f000 f968 	bl	8002218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4619      	mov	r1, r3
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f56:	f004 faf6 	bl	8006546 <HAL_TIM_ConfigClockSource>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001f60:	f000 f95a 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f64:	2300      	movs	r3, #0
 8001f66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_TIM2_Init+0x98>)
 8001f72:	f004 fcd7 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f7c:	f000 f94c 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000560 	.word	0x20000560

08001f8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001f92:	4a23      	ldr	r2, [pc, #140]	; (8002020 <MX_USART1_UART_Init+0x94>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fd4:	4811      	ldr	r0, [pc, #68]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fd6:	f004 fd33 	bl	8006a40 <HAL_UART_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fe0:	f000 f91a 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	480d      	ldr	r0, [pc, #52]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001fe8:	f005 fbc8 	bl	800777c <HAL_UARTEx_SetTxFifoThreshold>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ff2:	f000 f911 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <MX_USART1_UART_Init+0x90>)
 8001ffa:	f005 fbfd 	bl	80077f8 <HAL_UARTEx_SetRxFifoThreshold>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002004:	f000 f908 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_USART1_UART_Init+0x90>)
 800200a:	f005 fb7e 	bl	800770a <HAL_UARTEx_DisableFifoMode>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002014:	f000 f900 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000044c 	.word	0x2000044c
 8002020:	40013800 	.word	0x40013800

08002024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002028:	2004      	movs	r0, #4
 800202a:	f7ff fa0b 	bl	8001444 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff fa08 	bl	8001444 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002034:	2200      	movs	r2, #0
 8002036:	2100      	movs	r1, #0
 8002038:	200b      	movs	r0, #11
 800203a:	f001 fefe 	bl	8003e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800203e:	200b      	movs	r0, #11
 8002040:	f001 ff15 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2100      	movs	r1, #0
 8002048:	200c      	movs	r0, #12
 800204a:	f001 fef6 	bl	8003e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800204e:	200c      	movs	r0, #12
 8002050:	f001 ff0d 	bl	8003e6e <HAL_NVIC_EnableIRQ>

}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800206c:	2004      	movs	r0, #4
 800206e:	f7ff fa02 	bl	8001476 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	2002      	movs	r0, #2
 8002074:	f7ff f9ff 	bl	8001476 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	2001      	movs	r0, #1
 800207a:	f7ff f9fc 	bl	8001476 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	2103      	movs	r1, #3
 8002082:	4816      	ldr	r0, [pc, #88]	; (80020dc <MX_GPIO_Init+0x84>)
 8002084:	f002 fba4 	bl	80047d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO6_Pin GPIO5_Pin GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin|GPIO1_Pin;
 8002088:	f44f 7341 	mov.w	r3, #772	; 0x304
 800208c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208e:	2303      	movs	r3, #3
 8002090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4810      	ldr	r0, [pc, #64]	; (80020dc <MX_GPIO_Init+0x84>)
 800209c:	f002 fa30 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 GPIO4_Pin GPIO3_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO4_Pin|GPIO3_Pin|GPIO2_Pin;
 80020a0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80020a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a6:	2303      	movs	r3, #3
 80020a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b6:	f002 fa23 	bl	8004500 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80020ba:	2303      	movs	r3, #3
 80020bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4803      	ldr	r0, [pc, #12]	; (80020dc <MX_GPIO_Init+0x84>)
 80020d0:	f002 fa16 	bl	8004500 <HAL_GPIO_Init>

}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	48000400 	.word	0x48000400

080020e0 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 80020e4:	bf00      	nop
}
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80020f4:	2000      	movs	r0, #0
 80020f6:	f007 fae7 	bl	80096c8 <OTP_Read>
 80020fa:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	799b      	ldrb	r3, [r3, #6]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f920 	bl	800134c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800210c:	bf00      	nop
 800210e:	bf00      	nop
}  
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <Reset_Device>:


static void Reset_Device( void )
{
 8002116:	b580      	push	{r7, lr}
 8002118:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 800211a:	f000 f827 	bl	800216c <Reset_BackupDomain>

	Reset_IPCC();
 800211e:	f000 f803 	bl	8002128 <Reset_IPCC>
#endif

	return;
 8002122:	bf00      	nop
}
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800212c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002130:	f7ff f9ba 	bl	80014a8 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8002134:	213f      	movs	r1, #63	; 0x3f
 8002136:	480c      	ldr	r0, [pc, #48]	; (8002168 <Reset_IPCC+0x40>)
 8002138:	f7ff fa15 	bl	8001566 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 800213c:	213f      	movs	r1, #63	; 0x3f
 800213e:	480a      	ldr	r0, [pc, #40]	; (8002168 <Reset_IPCC+0x40>)
 8002140:	f7ff fa1f 	bl	8001582 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8002144:	213f      	movs	r1, #63	; 0x3f
 8002146:	4808      	ldr	r0, [pc, #32]	; (8002168 <Reset_IPCC+0x40>)
 8002148:	f7ff f9c7 	bl	80014da <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 800214c:	213f      	movs	r1, #63	; 0x3f
 800214e:	4806      	ldr	r0, [pc, #24]	; (8002168 <Reset_IPCC+0x40>)
 8002150:	f7ff f9e6 	bl	8001520 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8002154:	213f      	movs	r1, #63	; 0x3f
 8002156:	4804      	ldr	r0, [pc, #16]	; (8002168 <Reset_IPCC+0x40>)
 8002158:	f7ff f9d1 	bl	80014fe <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 800215c:	213f      	movs	r1, #63	; 0x3f
 800215e:	4802      	ldr	r0, [pc, #8]	; (8002168 <Reset_IPCC+0x40>)
 8002160:	f7ff f9f0 	bl	8001544 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8002164:	bf00      	nop
}
 8002166:	bd80      	pop	{r7, pc}
 8002168:	58000c00 	.word	0x58000c00

0800216c <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002170:	f7ff f942 	bl	80013f8 <LL_RCC_IsActiveFlag_PINRST>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <Reset_BackupDomain+0x2a>
 800217a:	f7ff f950 	bl	800141e <LL_RCC_IsActiveFlag_SFTRST>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d108      	bne.n	8002196 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002184:	f002 fbe6 	bl	8004954 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8002188:	f002 fbe4 	bl	8004954 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 800218c:	f7ff f912 	bl	80013b4 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8002190:	f7ff f921 	bl	80013d6 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8002194:	bf00      	nop
 8002196:	bf00      	nop
}
 8002198:	bd80      	pop	{r7, pc}

0800219a <Init_Exti>:

static void Init_Exti( void )
{
 800219a:	b580      	push	{r7, lr}
 800219c:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 800219e:	f04f 30ff 	mov.w	r0, #4294967295
 80021a2:	f7ff f8a7 	bl	80012f4 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80021a6:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80021aa:	f7ff f8b9 	bl	8001320 <LL_EXTI_DisableIT_32_63>

  return;
 80021ae:	bf00      	nop
}
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);

	if (Custom_Notification == 1) {
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d106      	bne.n	80021d2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		// UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
		RunningState = 1;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]

		TimeReady = 1;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
		RunningState = 0;
		TimeReady = 0;
	}


}
 80021d0:	e005      	b.n	80021de <HAL_TIM_PeriodElapsedCallback+0x2a>
		RunningState = 0;
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
		TimeReady = 0;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000218 	.word	0x20000218
 80021f0:	20000219 	.word	0x20000219
 80021f4:	2000021a 	.word	0x2000021a

080021f8 <HAL_ADC_ConvCpltCallback>:

// Interrupt when ADC completed conversion
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	ADC_Read_Complete = 1;
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000228 	.word	0x20000228

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002220:	e7fe      	b.n	8002220 <Error_Handler+0x8>

08002222 <LL_RCC_EnableRTC>:
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_AHB2_GRP1_EnableClock>:
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4313      	orrs	r3, r2
 800225a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800225c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002268:	68fb      	ldr	r3, [r7, #12]
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <LL_AHB3_GRP1_EnableClock>:
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4313      	orrs	r3, r2
 800228c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800228e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4013      	ands	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_APB1_GRP1_EnableClock>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4313      	orrs	r3, r2
 80022be:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022cc:	68fb      	ldr	r3, [r7, #12]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_APB2_GRP1_EnableClock>:
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80022e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4013      	ands	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022fe:	68fb      	ldr	r3, [r7, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002310:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002314:	f7ff ffaf 	bl	8002276 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	202e      	movs	r0, #46	; 0x2e
 800231e:	f001 fd8c 	bl	8003e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002322:	202e      	movs	r0, #46	; 0x2e
 8002324:	f001 fda3 	bl	8003e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 030c 	add.w	r3, r7, #12
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a22      	ldr	r2, [pc, #136]	; (80023d4 <HAL_ADC_MspInit+0xa8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d13e      	bne.n	80023cc <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800234e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002352:	f7ff ff77 	bl	8002244 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff ff74 	bl	8002244 <LL_AHB2_GRP1_EnableClock>
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC3_Pin|ADC4_Pin
 800235c:	233f      	movs	r3, #63	; 0x3f
 800235e:	60fb      	str	r3, [r7, #12]
                          |ADC5_Pin|ADC6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002360:	2303      	movs	r3, #3
 8002362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	4619      	mov	r1, r3
 800236e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002372:	f002 f8c5 	bl	8004500 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8002376:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 8002378:	4a18      	ldr	r2, [pc, #96]	; (80023dc <HAL_ADC_MspInit+0xb0>)
 800237a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 800237e:	2205      	movs	r2, #5
 8002380:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 8002396:	f44f 7280 	mov.w	r2, #256	; 0x100
 800239a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 800239e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 80023a6:	2220      	movs	r2, #32
 80023a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023b0:	4809      	ldr	r0, [pc, #36]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 80023b2:	f001 fda1 	bl	8003ef8 <HAL_DMA_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80023bc:	f7ff ff2c 	bl	8002218 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 80023c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80023c6:	4a04      	ldr	r2, [pc, #16]	; (80023d8 <HAL_ADC_MspInit+0xac>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023cc:	bf00      	nop
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	50040000 	.word	0x50040000
 80023d8:	200004dc 	.word	0x200004dc
 80023dc:	4002001c 	.word	0x4002001c

080023e0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_IPCC_MspInit+0x44>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d113      	bne.n	800241a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80023f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80023f6:	f7ff ff3e 	bl	8002276 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	202c      	movs	r0, #44	; 0x2c
 8002400:	f001 fd1b 	bl	8003e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002404:	202c      	movs	r0, #44	; 0x2c
 8002406:	f001 fd32 	bl	8003e6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	202d      	movs	r0, #45	; 0x2d
 8002410:	f001 fd13 	bl	8003e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002414:	202d      	movs	r0, #45	; 0x2d
 8002416:	f001 fd2a 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	58000c00 	.word	0x58000c00

08002428 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a06      	ldr	r2, [pc, #24]	; (8002450 <HAL_RTC_MspInit+0x28>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d105      	bne.n	8002446 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800243a:	f7ff fef2 	bl	8002222 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800243e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002442:	f7ff ff31 	bl	80022a8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40002800 	.word	0x40002800

08002454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002464:	d10a      	bne.n	800247c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002466:	2001      	movs	r0, #1
 8002468:	f7ff ff1e 	bl	80022a8 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	2100      	movs	r1, #0
 8002470:	201c      	movs	r0, #28
 8002472:	f001 fce2 	bl	8003e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002476:	201c      	movs	r0, #28
 8002478:	f001 fcf9 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a27      	ldr	r2, [pc, #156]	; (8002540 <HAL_UART_MspInit+0xbc>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d147      	bne.n	8002536 <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024aa:	f7ff ff16 	bl	80022da <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	2002      	movs	r0, #2
 80024b0:	f7ff fec8 	bl	8002244 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024b4:	23c0      	movs	r3, #192	; 0xc0
 80024b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024bc:	2301      	movs	r3, #1
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	2303      	movs	r3, #3
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024c4:	2307      	movs	r3, #7
 80024c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	4619      	mov	r1, r3
 80024ce:	481d      	ldr	r0, [pc, #116]	; (8002544 <HAL_UART_MspInit+0xc0>)
 80024d0:	f002 f816 	bl	8004500 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80024d4:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <HAL_UART_MspInit+0xc4>)
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_UART_MspInit+0xc8>)
 80024d8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_UART_MspInit+0xc4>)
 80024dc:	220f      	movs	r2, #15
 80024de:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_UART_MspInit+0xc4>)
 80024e2:	2210      	movs	r2, #16
 80024e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <HAL_UART_MspInit+0xc4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_UART_MspInit+0xc4>)
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_UART_MspInit+0xc4>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_UART_MspInit+0xc4>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_UART_MspInit+0xc4>)
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_UART_MspInit+0xc4>)
 8002506:	2200      	movs	r2, #0
 8002508:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800250a:	480f      	ldr	r0, [pc, #60]	; (8002548 <HAL_UART_MspInit+0xc4>)
 800250c:	f001 fcf4 	bl	8003ef8 <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8002516:	f7ff fe7f 	bl	8002218 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <HAL_UART_MspInit+0xc4>)
 800251e:	679a      	str	r2, [r3, #120]	; 0x78
 8002520:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_UART_MspInit+0xc4>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2024      	movs	r0, #36	; 0x24
 800252c:	f001 fc85 	bl	8003e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002530:	2024      	movs	r0, #36	; 0x24
 8002532:	f001 fc9c 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002536:	bf00      	nop
 8002538:	3720      	adds	r7, #32
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40013800 	.word	0x40013800
 8002544:	48000400 	.word	0x48000400
 8002548:	20000388 	.word	0x20000388
 800254c:	40020008 	.word	0x40020008

08002550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
//  while (1)
//  {
//  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <HardFault_Handler+0x4>

08002564 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <MemManage_Handler+0x4>

0800256a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <BusFault_Handler+0x4>

08002570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <UsageFault_Handler+0x4>

08002576 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a4:	f000 f942 	bl	800282c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}

080025ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <DMA1_Channel1_IRQHandler+0x10>)
 80025b2:	f001 fe66 	bl	8004282 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000388 	.word	0x20000388

080025c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <DMA1_Channel2_IRQHandler+0x10>)
 80025c6:	f001 fe5c 	bl	8004282 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200004dc 	.word	0x200004dc

080025d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <TIM2_IRQHandler+0x10>)
 80025da:	f003 fe95 	bl	8006308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000560 	.word	0x20000560

080025e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <USART1_IRQHandler+0x10>)
 80025ee:	f004 fb0d 	bl	8006c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000044c 	.word	0x2000044c

080025fc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002600:	f007 fe7e 	bl	800a300 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}

08002608 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800260c:	f007 feb0 	bl	800a370 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}

08002614 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002618:	f002 f8f2 	bl	8004800 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <RTC_WKUP_IRQHandler>:
{
//  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
}

void RTC_WKUP_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002624:	f7fe fb10 	bl	8000c48 <HW_TS_RTC_Wakeup_Handler>
}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}

0800262c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <SystemInit+0x90>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <SystemInit+0x90>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002654:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002658:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <SystemInit+0x94>)
 8002666:	4013      	ands	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002676:	f023 0305 	bic.w	r3, r3, #5
 800267a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800267e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002696:	4a0b      	ldr	r2, [pc, #44]	; (80026c4 <SystemInit+0x98>)
 8002698:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00
 80026c0:	faf6fefb 	.word	0xfaf6fefb
 80026c4:	22041000 	.word	0x22041000

080026c8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80026c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026cc:	3304      	adds	r3, #4

080026ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80026d2:	d3f9      	bcc.n	80026c8 <CopyDataInit>
  bx lr
 80026d4:	4770      	bx	lr

080026d6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80026d6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80026d8:	3004      	adds	r0, #4

080026da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80026da:	4288      	cmp	r0, r1
  bcc FillZerobss
 80026dc:	d3fb      	bcc.n	80026d6 <FillZerobss>
  bx lr
 80026de:	4770      	bx	lr

080026e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026e0:	480c      	ldr	r0, [pc, #48]	; (8002714 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80026e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80026e4:	f7ff ffa2 	bl	800262c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80026e8:	480b      	ldr	r0, [pc, #44]	; (8002718 <LoopForever+0x8>)
 80026ea:	490c      	ldr	r1, [pc, #48]	; (800271c <LoopForever+0xc>)
 80026ec:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <LoopForever+0x10>)
 80026ee:	2300      	movs	r3, #0
 80026f0:	f7ff ffed 	bl	80026ce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80026f4:	480b      	ldr	r0, [pc, #44]	; (8002724 <LoopForever+0x14>)
 80026f6:	490c      	ldr	r1, [pc, #48]	; (8002728 <LoopForever+0x18>)
 80026f8:	2300      	movs	r3, #0
 80026fa:	f7ff ffee 	bl	80026da <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80026fe:	480b      	ldr	r0, [pc, #44]	; (800272c <LoopForever+0x1c>)
 8002700:	490b      	ldr	r1, [pc, #44]	; (8002730 <LoopForever+0x20>)
 8002702:	2300      	movs	r3, #0
 8002704:	f7ff ffe9 	bl	80026da <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002708:	f008 f9ac 	bl	800aa64 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800270c:	f7fe ff48 	bl	80015a0 <main>

08002710 <LoopForever>:

LoopForever:
  b LoopForever
 8002710:	e7fe      	b.n	8002710 <LoopForever>
 8002712:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002714:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8002718:	20000004 	.word	0x20000004
 800271c:	20000028 	.word	0x20000028
 8002720:	0800ae64 	.word	0x0800ae64
  INIT_BSS _sbss, _ebss
 8002724:	200001a8 	.word	0x200001a8
 8002728:	200005b4 	.word	0x200005b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800272c:	200301e0 	.word	0x200301e0
 8002730:	20030a57 	.word	0x20030a57

08002734 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002734:	e7fe      	b.n	8002734 <ADC1_IRQHandler>
	...

08002738 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6053      	str	r3, [r2, #4]
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e0042000 	.word	0xe0042000

08002758 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	6053      	str	r3, [r2, #4]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e0042000 	.word	0xe0042000

08002778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_Init+0x3c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <HAL_Init+0x3c>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278e:	2003      	movs	r0, #3
 8002790:	f001 fb48 	bl	8003e24 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002794:	2000      	movs	r0, #0
 8002796:	f000 f80f 	bl	80027b8 <HAL_InitTick>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	71fb      	strb	r3, [r7, #7]
 80027a4:	e001      	b.n	80027aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a6:	f7ff fdb1 	bl	800230c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027aa:	79fb      	ldrb	r3, [r7, #7]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	58004000 	.word	0x58004000

080027b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <HAL_InitTick+0x6c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d024      	beq.n	8002816 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027cc:	f003 f96a 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_InitTick+0x6c>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4619      	mov	r1, r3
 80027d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f001 fb5e 	bl	8003ea6 <HAL_SYSTICK_Config>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b0f      	cmp	r3, #15
 80027f4:	d809      	bhi.n	800280a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f6:	2200      	movs	r2, #0
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	f04f 30ff 	mov.w	r0, #4294967295
 80027fe:	f001 fb1c 	bl	8003e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_InitTick+0x70>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e007      	b.n	800281a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e004      	b.n	800281a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e001      	b.n	800281a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	2000000c 	.word	0x2000000c
 8002828:	20000008 	.word	0x20000008

0800282c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x20>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_IncTick+0x24>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4413      	add	r3, r2
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_IncTick+0x24>)
 800283e:	6013      	str	r3, [r2, #0]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	2000000c 	.word	0x2000000c
 8002850:	200005ac 	.word	0x200005ac

08002854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return uwTick;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_GetTick+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	200005ac 	.word	0x200005ac

0800286c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_GetTickPrio+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000008 	.word	0x20000008

08002884 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002888:	f7ff ff56 	bl	8002738 <LL_DBGMCU_EnableDBGSleepMode>
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002894:	f7ff ff60 	bl	8002758 <LL_DBGMCU_EnableDBGStopMode>
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}

0800289c <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]
#endif
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <LL_ADC_SetOffset+0x44>)
 8002926:	4013      	ands	r3, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	4313      	orrs	r3, r2
 8002934:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	03fff000 	.word	0x03fff000

0800294c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3360      	adds	r3, #96	; 0x60
 800295a:	461a      	mov	r2, r3
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	3360      	adds	r3, #96	; 0x60
 8002988:	461a      	mov	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	431a      	orrs	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029c6:	2300      	movs	r3, #0
#endif
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3330      	adds	r3, #48	; 0x30
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	4413      	add	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	211f      	movs	r1, #31
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	0e9b      	lsrs	r3, r3, #26
 8002a0c:	f003 011f 	and.w	r1, r3, #31
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3314      	adds	r3, #20
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	0e5b      	lsrs	r3, r3, #25
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0d1b      	lsrs	r3, r3, #20
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2107      	movs	r1, #7
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	401a      	ands	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	0d1b      	lsrs	r3, r3, #20
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	431a      	orrs	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8002a76:	bf00      	nop
 8002a78:	371c      	adds	r7, #28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
	...

08002a84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0318 	and.w	r3, r3, #24
 8002aa6:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002aa8:	40d9      	lsrs	r1, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	400b      	ands	r3, r1
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	0007ffff 	.word	0x0007ffff

08002acc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002adc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6093      	str	r3, [r2, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b04:	d101      	bne.n	8002b0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b54:	d101      	bne.n	8002b5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ba0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ba4:	f043 0202 	orr.w	r2, r3, #2
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <LL_ADC_IsEnabled+0x18>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <LL_ADC_IsEnabled+0x1a>
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d101      	bne.n	8002bf6 <LL_ADC_IsDisableOngoing+0x18>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <LL_ADC_IsDisableOngoing+0x1a>
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d101      	bne.n	8002c44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d101      	bne.n	8002c6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e12e      	b.n	8002ef4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff fb41 	bl	800232c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff17 	bl	8002af0 <LL_ADC_IsDeepPowerDownEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fefd 	bl	8002acc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff32 	bl	8002b40 <LL_ADC_IsInternalRegulatorEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d115      	bne.n	8002d0e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff16 	bl	8002b18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cec:	4b83      	ldr	r3, [pc, #524]	; (8002efc <HAL_ADC_Init+0x284>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	4a83      	ldr	r2, [pc, #524]	; (8002f00 <HAL_ADC_Init+0x288>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f9      	bne.n	8002d02 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff14 	bl	8002b40 <LL_ADC_IsInternalRegulatorEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff74 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8002d44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 80c7 	bne.w	8002ee2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 80c3 	bne.w	8002ee2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff21 	bl	8002bb8 <LL_ADC_IsEnabled>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10b      	bne.n	8002d94 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d7c:	4861      	ldr	r0, [pc, #388]	; (8002f04 <HAL_ADC_Init+0x28c>)
 8002d7e:	f7ff ff1b 	bl	8002bb8 <LL_ADC_IsEnabled>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	485e      	ldr	r0, [pc, #376]	; (8002f08 <HAL_ADC_Init+0x290>)
 8002d90:	f7ff fd84 	bl	800289c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7e5b      	ldrb	r3, [r3, #25]
 8002d98:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d9e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002da4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002daa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002db4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d106      	bne.n	8002dd4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	045b      	lsls	r3, r3, #17
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	4b45      	ldr	r3, [pc, #276]	; (8002f0c <HAL_ADC_Init+0x294>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff0f 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8002e0e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff1c 	bl	8002c52 <LL_ADC_INJ_IsConversionOngoing>
 8002e1a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d13d      	bne.n	8002e9e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d13a      	bne.n	8002e9e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e2c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e34:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	69b9      	ldr	r1, [r7, #24]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d118      	bne.n	8002e8e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e66:	f023 0304 	bic.w	r3, r3, #4
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e72:	4311      	orrs	r1, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e78:	4311      	orrs	r1, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	611a      	str	r2, [r3, #16]
 8002e8c:	e007      	b.n	8002e9e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	f023 010f 	bic.w	r1, r3, #15
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	1e5a      	subs	r2, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ebe:	e007      	b.n	8002ed0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 020f 	bic.w	r2, r2, #15
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f023 0303 	bic.w	r3, r3, #3
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
 8002ee0:	e007      	b.n	8002ef2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f043 0210 	orr.w	r2, r3, #16
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000004 	.word	0x20000004
 8002f00:	053e2d63 	.word	0x053e2d63
 8002f04:	50040000 	.word	0x50040000
 8002f08:	50040300 	.word	0x50040300
 8002f0c:	fff0c007 	.word	0xfff0c007

08002f10 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fe83 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d167      	bne.n	8002ffc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_Start_DMA+0x2a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e063      	b.n	8003002 <HAL_ADC_Start_DMA+0xf2>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fc42 	bl	80037cc <ADC_Enable>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d14f      	bne.n	8002ff2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f023 0206 	bic.w	r2, r3, #6
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	659a      	str	r2, [r3, #88]	; 0x58
 8002f7e:	e002      	b.n	8002f86 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8a:	4a20      	ldr	r2, [pc, #128]	; (800300c <HAL_ADC_Start_DMA+0xfc>)
 8002f8c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	4a1f      	ldr	r2, [pc, #124]	; (8003010 <HAL_ADC_Start_DMA+0x100>)
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9a:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <HAL_ADC_Start_DMA+0x104>)
 8002f9c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	221c      	movs	r2, #28
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685a      	ldr	r2, [r3, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0210 	orr.w	r2, r2, #16
 8002fbc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3340      	adds	r3, #64	; 0x40
 8002fd8:	4619      	mov	r1, r3
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f001 f817 	bl	8004010 <HAL_DMA_Start_IT>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fe0a 	bl	8002c04 <LL_ADC_REG_StartConversion>
 8002ff0:	e006      	b.n	8003000 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002ffa:	e001      	b.n	8003000 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003000:	7dfb      	ldrb	r3, [r7, #23]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	0800397f 	.word	0x0800397f
 8003010:	08003a57 	.word	0x08003a57
 8003014:	08003a73 	.word	0x08003a73

08003018 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0b6      	sub	sp, #216	; 0xd8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x22>
 800305e:	2302      	movs	r3, #2
 8003060:	e39f      	b.n	80037a2 <HAL_ADC_ConfigChannel+0x762>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fddc 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	f040 8384 	bne.w	8003784 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	f7ff fca3 	bl	80029d4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fdca 	bl	8002c2c <LL_ADC_REG_IsConversionOngoing>
 8003098:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fdd6 	bl	8002c52 <LL_ADC_INJ_IsConversionOngoing>
 80030a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 81a6 	bne.w	8003400 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 81a1 	bne.w	8003400 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f7ff fcae 	bl	8002a2c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	08db      	lsrs	r3, r3, #3
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d00a      	beq.n	8003108 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6919      	ldr	r1, [r3, #16]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003102:	f7ff fbff 	bl	8002904 <LL_ADC_SetOffset>
 8003106:	e17b      	b.n	8003400 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fc1c 	bl	800294c <LL_ADC_GetOffsetChannel>
 8003114:	4603      	mov	r3, r0
 8003116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10a      	bne.n	8003134 <HAL_ADC_ConfigChannel+0xf4>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff fc11 	bl	800294c <LL_ADC_GetOffsetChannel>
 800312a:	4603      	mov	r3, r0
 800312c:	0e9b      	lsrs	r3, r3, #26
 800312e:	f003 021f 	and.w	r2, r3, #31
 8003132:	e01e      	b.n	8003172 <HAL_ADC_ConfigChannel+0x132>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fc06 	bl	800294c <LL_ADC_GetOffsetChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003156:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800315a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003162:	2320      	movs	r3, #32
 8003164:	e004      	b.n	8003170 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003166:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	2b00      	cmp	r3, #0
 800317c:	d105      	bne.n	800318a <HAL_ADC_ConfigChannel+0x14a>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	0e9b      	lsrs	r3, r3, #26
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	e018      	b.n	80031bc <HAL_ADC_ConfigChannel+0x17c>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800319e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80031ae:	2320      	movs	r3, #32
 80031b0:	e004      	b.n	80031bc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80031b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031b6:	fab3 f383 	clz	r3, r3
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	429a      	cmp	r2, r3
 80031be:	d106      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2200      	movs	r2, #0
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fbd5 	bl	8002978 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2101      	movs	r1, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff fbb9 	bl	800294c <LL_ADC_GetOffsetChannel>
 80031da:	4603      	mov	r3, r0
 80031dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10a      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x1ba>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2101      	movs	r1, #1
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fbae 	bl	800294c <LL_ADC_GetOffsetChannel>
 80031f0:	4603      	mov	r3, r0
 80031f2:	0e9b      	lsrs	r3, r3, #26
 80031f4:	f003 021f 	and.w	r2, r3, #31
 80031f8:	e01e      	b.n	8003238 <HAL_ADC_ConfigChannel+0x1f8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fba3 	bl	800294c <LL_ADC_GetOffsetChannel>
 8003206:	4603      	mov	r3, r0
 8003208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003218:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800321c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003220:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003228:	2320      	movs	r3, #32
 800322a:	e004      	b.n	8003236 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800322c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003240:	2b00      	cmp	r3, #0
 8003242:	d105      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x210>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	0e9b      	lsrs	r3, r3, #26
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	e018      	b.n	8003282 <HAL_ADC_ConfigChannel+0x242>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003264:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800326c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003274:	2320      	movs	r3, #32
 8003276:	e004      	b.n	8003282 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003278:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800327c:	fab3 f383 	clz	r3, r3
 8003280:	b2db      	uxtb	r3, r3
 8003282:	429a      	cmp	r2, r3
 8003284:	d106      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2200      	movs	r2, #0
 800328c:	2101      	movs	r1, #1
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fb72 	bl	8002978 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2102      	movs	r1, #2
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff fb56 	bl	800294c <LL_ADC_GetOffsetChannel>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x280>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2102      	movs	r1, #2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fb4b 	bl	800294c <LL_ADC_GetOffsetChannel>
 80032b6:	4603      	mov	r3, r0
 80032b8:	0e9b      	lsrs	r3, r3, #26
 80032ba:	f003 021f 	and.w	r2, r3, #31
 80032be:	e01e      	b.n	80032fe <HAL_ADC_ConfigChannel+0x2be>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2102      	movs	r1, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fb40 	bl	800294c <LL_ADC_GetOffsetChannel>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e004      	b.n	80032fc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80032f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003306:	2b00      	cmp	r3, #0
 8003308:	d105      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x2d6>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0e9b      	lsrs	r3, r3, #26
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	e016      	b.n	8003344 <HAL_ADC_ConfigChannel+0x304>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800332a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800332e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003336:	2320      	movs	r3, #32
 8003338:	e004      	b.n	8003344 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800333a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	429a      	cmp	r2, r3
 8003346:	d106      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2200      	movs	r2, #0
 800334e:	2102      	movs	r1, #2
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fb11 	bl	8002978 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2103      	movs	r1, #3
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff faf5 	bl	800294c <LL_ADC_GetOffsetChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x342>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2103      	movs	r1, #3
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff faea 	bl	800294c <LL_ADC_GetOffsetChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	e017      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x372>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2103      	movs	r1, #3
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fadf 	bl	800294c <LL_ADC_GetOffsetChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800339a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800339c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800339e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e003      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80033a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033aa:	fab3 f383 	clz	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x38a>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	0e9b      	lsrs	r3, r3, #26
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	e011      	b.n	80033ee <HAL_ADC_ConfigChannel+0x3ae>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80033e2:	2320      	movs	r3, #32
 80033e4:	e003      	b.n	80033ee <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80033e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d106      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	2103      	movs	r1, #3
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fabc 	bl	8002978 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fbd7 	bl	8002bb8 <LL_ADC_IsEnabled>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 81c2 	bne.w	8003796 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	461a      	mov	r2, r3
 8003420:	f7ff fb30 	bl	8002a84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a8e      	ldr	r2, [pc, #568]	; (8003664 <HAL_ADC_ConfigChannel+0x624>)
 800342a:	4293      	cmp	r3, r2
 800342c:	f040 8130 	bne.w	8003690 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x418>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	0e9b      	lsrs	r3, r3, #26
 8003446:	3301      	adds	r3, #1
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	2b09      	cmp	r3, #9
 800344e:	bf94      	ite	ls
 8003450:	2301      	movls	r3, #1
 8003452:	2300      	movhi	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e019      	b.n	800348c <HAL_ADC_ConfigChannel+0x44c>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003468:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800346a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003470:	2320      	movs	r3, #32
 8003472:	e003      	b.n	800347c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	3301      	adds	r3, #1
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	2b09      	cmp	r3, #9
 8003484:	bf94      	ite	ls
 8003486:	2301      	movls	r3, #1
 8003488:	2300      	movhi	r3, #0
 800348a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800348c:	2b00      	cmp	r3, #0
 800348e:	d079      	beq.n	8003584 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003498:	2b00      	cmp	r3, #0
 800349a:	d107      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x46c>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	0e9b      	lsrs	r3, r3, #26
 80034a2:	3301      	adds	r3, #1
 80034a4:	069b      	lsls	r3, r3, #26
 80034a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034aa:	e015      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x498>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e003      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80034c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	069b      	lsls	r3, r3, #26
 80034d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x4b8>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2101      	movs	r1, #1
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	e017      	b.n	8003528 <HAL_ADC_ConfigChannel+0x4e8>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003508:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003510:	2320      	movs	r3, #32
 8003512:	e003      	b.n	800351c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	3301      	adds	r3, #1
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	ea42 0103 	orr.w	r1, r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <HAL_ADC_ConfigChannel+0x50e>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0e9b      	lsrs	r3, r3, #26
 800353e:	3301      	adds	r3, #1
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	051b      	lsls	r3, r3, #20
 800354c:	e018      	b.n	8003580 <HAL_ADC_ConfigChannel+0x540>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003566:	2320      	movs	r3, #32
 8003568:	e003      	b.n	8003572 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800356a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800356c:	fab3 f383 	clz	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f003 021f 	and.w	r2, r3, #31
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003580:	430b      	orrs	r3, r1
 8003582:	e080      	b.n	8003686 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358c:	2b00      	cmp	r3, #0
 800358e:	d107      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x560>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0e9b      	lsrs	r3, r3, #26
 8003596:	3301      	adds	r3, #1
 8003598:	069b      	lsls	r3, r3, #26
 800359a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800359e:	e015      	b.n	80035cc <HAL_ADC_ConfigChannel+0x58c>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80035b8:	2320      	movs	r3, #32
 80035ba:	e003      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	3301      	adds	r3, #1
 80035c6:	069b      	lsls	r3, r3, #26
 80035c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x5ac>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	0e9b      	lsrs	r3, r3, #26
 80035de:	3301      	adds	r3, #1
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	e017      	b.n	800361c <HAL_ADC_ConfigChannel+0x5dc>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	61fb      	str	r3, [r7, #28]
  return result;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e003      	b.n	8003610 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	3301      	adds	r3, #1
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2101      	movs	r1, #1
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	ea42 0103 	orr.w	r1, r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10d      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x608>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	0e9b      	lsrs	r3, r3, #26
 8003632:	3301      	adds	r3, #1
 8003634:	f003 021f 	and.w	r2, r3, #31
 8003638:	4613      	mov	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	3b1e      	subs	r3, #30
 8003640:	051b      	lsls	r3, r3, #20
 8003642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003646:	e01d      	b.n	8003684 <HAL_ADC_ConfigChannel+0x644>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	fa93 f3a3 	rbit	r3, r3
 8003654:	613b      	str	r3, [r7, #16]
  return result;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d103      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003660:	2320      	movs	r3, #32
 8003662:	e005      	b.n	8003670 <HAL_ADC_ConfigChannel+0x630>
 8003664:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3301      	adds	r3, #1
 8003672:	f003 021f 	and.w	r2, r3, #31
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	3b1e      	subs	r3, #30
 800367e:	051b      	lsls	r3, r3, #20
 8003680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003684:	430b      	orrs	r3, r1
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	6892      	ldr	r2, [r2, #8]
 800368a:	4619      	mov	r1, r3
 800368c:	f7ff f9ce 	bl	8002a2c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <HAL_ADC_ConfigChannel+0x76c>)
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d07c      	beq.n	8003796 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800369c:	4844      	ldr	r0, [pc, #272]	; (80037b0 <HAL_ADC_ConfigChannel+0x770>)
 800369e:	f7ff f923 	bl	80028e8 <LL_ADC_GetCommonPathInternalCh>
 80036a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036a6:	4843      	ldr	r0, [pc, #268]	; (80037b4 <HAL_ADC_ConfigChannel+0x774>)
 80036a8:	f7ff fa86 	bl	8002bb8 <LL_ADC_IsEnabled>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d15e      	bne.n	8003770 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a40      	ldr	r2, [pc, #256]	; (80037b8 <HAL_ADC_ConfigChannel+0x778>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d127      	bne.n	800370c <HAL_ADC_ConfigChannel+0x6cc>
 80036bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d121      	bne.n	800370c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a39      	ldr	r2, [pc, #228]	; (80037b4 <HAL_ADC_ConfigChannel+0x774>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d161      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80036d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036da:	4619      	mov	r1, r3
 80036dc:	4834      	ldr	r0, [pc, #208]	; (80037b0 <HAL_ADC_ConfigChannel+0x770>)
 80036de:	f7ff f8f0 	bl	80028c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_ADC_ConfigChannel+0x77c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	4a35      	ldr	r2, [pc, #212]	; (80037c0 <HAL_ADC_ConfigChannel+0x780>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	099b      	lsrs	r3, r3, #6
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	4613      	mov	r3, r2
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80036fc:	e002      	b.n	8003704 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3b01      	subs	r3, #1
 8003702:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f9      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800370a:	e044      	b.n	8003796 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2c      	ldr	r2, [pc, #176]	; (80037c4 <HAL_ADC_ConfigChannel+0x784>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d113      	bne.n	800373e <HAL_ADC_ConfigChannel+0x6fe>
 8003716:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800371a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_ADC_ConfigChannel+0x774>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d134      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003734:	4619      	mov	r1, r3
 8003736:	481e      	ldr	r0, [pc, #120]	; (80037b0 <HAL_ADC_ConfigChannel+0x770>)
 8003738:	f7ff f8c3 	bl	80028c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800373c:	e02b      	b.n	8003796 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a21      	ldr	r2, [pc, #132]	; (80037c8 <HAL_ADC_ConfigChannel+0x788>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d126      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x756>
 8003748:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800374c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d120      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a16      	ldr	r2, [pc, #88]	; (80037b4 <HAL_ADC_ConfigChannel+0x774>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d11b      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800375e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003766:	4619      	mov	r1, r3
 8003768:	4811      	ldr	r0, [pc, #68]	; (80037b0 <HAL_ADC_ConfigChannel+0x770>)
 800376a:	f7ff f8aa 	bl	80028c2 <LL_ADC_SetCommonPathInternalCh>
 800376e:	e012      	b.n	8003796 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003782:	e008      	b.n	8003796 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800379e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	37d8      	adds	r7, #216	; 0xd8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	80080000 	.word	0x80080000
 80037b0:	50040300 	.word	0x50040300
 80037b4:	50040000 	.word	0x50040000
 80037b8:	c7520000 	.word	0xc7520000
 80037bc:	20000004 	.word	0x20000004
 80037c0:	053e2d63 	.word	0x053e2d63
 80037c4:	cb840000 	.word	0xcb840000
 80037c8:	80000001 	.word	0x80000001

080037cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f9eb 	bl	8002bb8 <LL_ADC_IsEnabled>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d15e      	bne.n	80038a6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	4b30      	ldr	r3, [pc, #192]	; (80038b0 <ADC_Enable+0xe4>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f043 0210 	orr.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e04a      	b.n	80038a8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff f9a6 	bl	8002b68 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800381c:	4825      	ldr	r0, [pc, #148]	; (80038b4 <ADC_Enable+0xe8>)
 800381e:	f7ff f863 	bl	80028e8 <LL_ADC_GetCommonPathInternalCh>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00f      	beq.n	800384c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800382c:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <ADC_Enable+0xec>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	4a22      	ldr	r2, [pc, #136]	; (80038bc <ADC_Enable+0xf0>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	099b      	lsrs	r3, r3, #6
 800383a:	3301      	adds	r3, #1
 800383c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800383e:	e002      	b.n	8003846 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3b01      	subs	r3, #1
 8003844:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f9      	bne.n	8003840 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800384c:	f7ff f802 	bl	8002854 <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003852:	e021      	b.n	8003898 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff f9ad 	bl	8002bb8 <LL_ADC_IsEnabled>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d104      	bne.n	800386e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff f97d 	bl	8002b68 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800386e:	f7fe fff1 	bl	8002854 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d90d      	bls.n	8003898 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	f043 0210 	orr.w	r2, r3, #16
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	f043 0201 	orr.w	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e007      	b.n	80038a8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d1d6      	bne.n	8003854 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	8000003f 	.word	0x8000003f
 80038b4:	50040300 	.word	0x50040300
 80038b8:	20000004 	.word	0x20000004
 80038bc:	053e2d63 	.word	0x053e2d63

080038c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f986 	bl	8002bde <LL_ADC_IsDisableOngoing>
 80038d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff f96d 	bl	8002bb8 <LL_ADC_IsEnabled>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d047      	beq.n	8003974 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d144      	bne.n	8003974 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 030d 	and.w	r3, r3, #13
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d10c      	bne.n	8003912 <ADC_Disable+0x52>
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff f947 	bl	8002b90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2203      	movs	r2, #3
 8003908:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800390a:	f7fe ffa3 	bl	8002854 <HAL_GetTick>
 800390e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003910:	e029      	b.n	8003966 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	f043 0210 	orr.w	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e023      	b.n	8003976 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800392e:	f7fe ff91 	bl	8002854 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d914      	bls.n	8003966 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394e:	f043 0210 	orr.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e007      	b.n	8003976 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1dc      	bne.n	800392e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003994:	2b00      	cmp	r3, #0
 8003996:	d14b      	bne.n	8003a30 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d021      	beq.n	80039f6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fff9 	bl	80029ae <LL_ADC_REG_IsTriggerSourceSWStart>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d032      	beq.n	8003a28 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d12b      	bne.n	8003a28 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d11f      	bne.n	8003a28 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
 80039f4:	e018      	b.n	8003a28 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d111      	bne.n	8003a28 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f043 0201 	orr.w	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f7fe fbe5 	bl	80021f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a2e:	e00e      	b.n	8003a4e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7ff faf5 	bl	800302c <HAL_ADC_ErrorCallback>
}
 8003a42:	e004      	b.n	8003a4e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff fad7 	bl	8003018 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7ff fac7 	bl	800302c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <LL_ADC_StartCalibration>:
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ae8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aec:	d101      	bne.n	8003af2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  UNUSED(SingleDiff);
#endif
  
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_ADCEx_Calibration_Start+0x1c>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e04d      	b.n	8003bb8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fecb 	bl	80038c0 <ADC_Disable>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d136      	bne.n	8003ba2 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined (ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b3c:	f023 0302 	bic.w	r3, r3, #2
 8003b40:	f043 0202 	orr.w	r2, r3, #2
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Start ADC calibration in mode single-ended or differential */
#if defined (ADC_SUPPORT_2_5_MSPS)
    LL_ADC_StartCalibration(hadc->Instance);
#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6839      	ldr	r1, [r7, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ffa9 	bl	8003aa6 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b54:	e014      	b.n	8003b80 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	; (8003bc0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d90d      	bls.n	8003b80 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	f023 0312 	bic.w	r3, r3, #18
 8003b6c:	f043 0210 	orr.w	r2, r3, #16
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e01b      	b.n	8003bb8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ffa7 	bl	8003ad8 <LL_ADC_IsCalibrationOnGoing>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e2      	bne.n	8003b56 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f023 0303 	bic.w	r3, r3, #3
 8003b98:	f043 0201 	orr.w	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
 8003ba0:	e005      	b.n	8003bae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	f043 0210 	orr.w	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	00026aaa 	.word	0x00026aaa

08003bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003be0:	4013      	ands	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf6:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	60d3      	str	r3, [r2, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <__NVIC_GetPriorityGrouping+0x18>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	f003 0307 	and.w	r3, r3, #7
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db0b      	blt.n	8003c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	4907      	ldr	r1, [pc, #28]	; (8003c60 <__NVIC_EnableIRQ+0x38>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	db12      	blt.n	8003c9c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	f003 021f 	and.w	r2, r3, #31
 8003c7c:	490a      	ldr	r1, [pc, #40]	; (8003ca8 <__NVIC_DisableIRQ+0x44>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2001      	movs	r0, #1
 8003c86:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8a:	3320      	adds	r3, #32
 8003c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003c90:	f3bf 8f4f 	dsb	sy
}
 8003c94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c96:	f3bf 8f6f 	isb	sy
}
 8003c9a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100

08003cac <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db0c      	blt.n	8003cd8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4907      	ldr	r1, [pc, #28]	; (8003ce4 <__NVIC_SetPendingIRQ+0x38>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	3340      	adds	r3, #64	; 0x40
 8003cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000e100 	.word	0xe000e100

08003ce8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	db0c      	blt.n	8003d14 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	f003 021f 	and.w	r2, r3, #31
 8003d00:	4907      	ldr	r1, [pc, #28]	; (8003d20 <__NVIC_ClearPendingIRQ+0x38>)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	2001      	movs	r0, #1
 8003d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d0e:	3360      	adds	r3, #96	; 0x60
 8003d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000e100 	.word	0xe000e100

08003d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	db0a      	blt.n	8003d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	490c      	ldr	r1, [pc, #48]	; (8003d70 <__NVIC_SetPriority+0x4c>)
 8003d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	440b      	add	r3, r1
 8003d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d4c:	e00a      	b.n	8003d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4908      	ldr	r1, [pc, #32]	; (8003d74 <__NVIC_SetPriority+0x50>)
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	3b04      	subs	r3, #4
 8003d5c:	0112      	lsls	r2, r2, #4
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	440b      	add	r3, r1
 8003d62:	761a      	strb	r2, [r3, #24]
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	e000e100 	.word	0xe000e100
 8003d74:	e000ed00 	.word	0xe000ed00

08003d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b089      	sub	sp, #36	; 0x24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f1c3 0307 	rsb	r3, r3, #7
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	bf28      	it	cs
 8003d96:	2304      	movcs	r3, #4
 8003d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	2b06      	cmp	r3, #6
 8003da0:	d902      	bls.n	8003da8 <NVIC_EncodePriority+0x30>
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3b03      	subs	r3, #3
 8003da6:	e000      	b.n	8003daa <NVIC_EncodePriority+0x32>
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	f04f 32ff 	mov.w	r2, #4294967295
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43da      	mvns	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	401a      	ands	r2, r3
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dca:	43d9      	mvns	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd0:	4313      	orrs	r3, r2
         );
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3724      	adds	r7, #36	; 0x24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df0:	d301      	bcc.n	8003df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003df2:	2301      	movs	r3, #1
 8003df4:	e00f      	b.n	8003e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003df6:	4a0a      	ldr	r2, [pc, #40]	; (8003e20 <SysTick_Config+0x40>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dfe:	210f      	movs	r1, #15
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
 8003e04:	f7ff ff8e 	bl	8003d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <SysTick_Config+0x40>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e0e:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <SysTick_Config+0x40>)
 8003e10:	2207      	movs	r2, #7
 8003e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	e000e010 	.word	0xe000e010

08003e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fec9 	bl	8003bc4 <__NVIC_SetPriorityGrouping>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b086      	sub	sp, #24
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	4603      	mov	r3, r0
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e48:	f7ff fee0 	bl	8003c0c <__NVIC_GetPriorityGrouping>
 8003e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	6978      	ldr	r0, [r7, #20]
 8003e54:	f7ff ff90 	bl	8003d78 <NVIC_EncodePriority>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff5f 	bl	8003d24 <__NVIC_SetPriority>
}
 8003e66:	bf00      	nop
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b082      	sub	sp, #8
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	4603      	mov	r3, r0
 8003e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fed3 	bl	8003c28 <__NVIC_EnableIRQ>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fee3 	bl	8003c64 <__NVIC_DisableIRQ>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7ff ff96 	bl	8003de0 <SysTick_Config>
 8003eb4:	4603      	mov	r3, r0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff feed 	bl	8003cac <__NVIC_SetPendingIRQ>
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fefd 	bl	8003ce8 <__NVIC_ClearPendingIRQ>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e078      	b.n	8003ffc <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b3c      	ldr	r3, [pc, #240]	; (8004004 <HAL_DMA_Init+0x10c>)
 8003f12:	4413      	add	r3, r2
 8003f14:	4a3c      	ldr	r2, [pc, #240]	; (8004008 <HAL_DMA_Init+0x110>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	009a      	lsls	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a39      	ldr	r2, [pc, #228]	; (800400c <HAL_DMA_Init+0x114>)
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa6e 	bl	800445c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f88:	d102      	bne.n	8003f90 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fa6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d010      	beq.n	8003fd2 <HAL_DMA_Init+0xda>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d80c      	bhi.n	8003fd2 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fa7b 	bl	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fce:	605a      	str	r2, [r3, #4]
 8003fd0:	e008      	b.n	8003fe4 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	bffdfff8 	.word	0xbffdfff8
 8004008:	cccccccd 	.word	0xcccccccd
 800400c:	40020000 	.word	0x40020000

08004010 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_DMA_Start_IT+0x20>
 800402c:	2302      	movs	r3, #2
 800402e:	e066      	b.n	80040fe <HAL_DMA_Start_IT+0xee>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d155      	bne.n	80040f0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0201 	bic.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f9b9 	bl	80043e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	2b00      	cmp	r3, #0
 8004074:	d008      	beq.n	8004088 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 020e 	orr.w	r2, r2, #14
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e00f      	b.n	80040a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0204 	bic.w	r2, r2, #4
 8004096:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 020a 	orr.w	r2, r2, #10
 80040a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040c4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d007      	beq.n	80040de <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e005      	b.n	80040fc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040f8:	2302      	movs	r3, #2
 80040fa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e04f      	b.n	80041b8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d008      	beq.n	8004136 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2204      	movs	r2, #4
 8004128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e040      	b.n	80041b8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 020e 	bic.w	r2, r2, #14
 8004144:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004150:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004154:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f003 021c 	and.w	r2, r3, #28
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	2101      	movs	r1, #1
 8004174:	fa01 f202 	lsl.w	r2, r1, r2
 8004178:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004182:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00c      	beq.n	80041a6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800419a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d005      	beq.n	80041e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2204      	movs	r2, #4
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	e047      	b.n	8004278 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 020e 	bic.w	r2, r2, #14
 80041f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004216:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421c:	f003 021c 	and.w	r2, r3, #28
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f202 	lsl.w	r2, r1, r2
 800422a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004234:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00c      	beq.n	8004258 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004256:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
    }
  }
  return status;
 8004278:	7bfb      	ldrb	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f003 031c 	and.w	r3, r3, #28
 80042a2:	2204      	movs	r2, #4
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d026      	beq.n	80042fc <HAL_DMA_IRQHandler+0x7a>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d021      	beq.n	80042fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0204 	bic.w	r2, r2, #4
 80042d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	f003 021c 	and.w	r2, r3, #28
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	2104      	movs	r1, #4
 80042e4:	fa01 f202 	lsl.w	r2, r1, r2
 80042e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d071      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042fa:	e06c      	b.n	80043d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	f003 031c 	and.w	r3, r3, #28
 8004304:	2202      	movs	r2, #2
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02e      	beq.n	800436e <HAL_DMA_IRQHandler+0xec>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d029      	beq.n	800436e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 020a 	bic.w	r2, r2, #10
 8004336:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004344:	f003 021c 	and.w	r2, r3, #28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2102      	movs	r1, #2
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d038      	beq.n	80043d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800436c:	e033      	b.n	80043d6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f003 031c 	and.w	r3, r3, #28
 8004376:	2208      	movs	r2, #8
 8004378:	409a      	lsls	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4013      	ands	r3, r2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d02a      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x156>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d025      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 020e 	bic.w	r2, r2, #14
 800439a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	f003 021c 	and.w	r2, r3, #28
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	2101      	movs	r1, #1
 80043aa:	fa01 f202 	lsl.w	r2, r1, r2
 80043ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
}
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004408:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f003 021c 	and.w	r2, r3, #28
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2101      	movs	r1, #1
 8004418:	fa01 f202 	lsl.w	r2, r1, r2
 800441c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b10      	cmp	r3, #16
 800442c:	d108      	bne.n	8004440 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800443e:	e007      	b.n	8004450 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	60da      	str	r2, [r3, #12]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	089b      	lsrs	r3, r3, #2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004470:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6493      	str	r3, [r2, #72]	; 0x48
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	3b08      	subs	r3, #8
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004482:	fba2 2303 	umull	r2, r3, r2, r3
 8004486:	091b      	lsrs	r3, r3, #4
 8004488:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800448e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2201      	movs	r2, #1
 8004498:	409a      	lsls	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	cccccccd 	.word	0xcccccccd
 80044b0:	40020880 	.word	0x40020880

080044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	461a      	mov	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a09      	ldr	r2, [pc, #36]	; (80044fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80044d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b01      	subs	r3, #1
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2201      	movs	r2, #1
 80044e4:	409a      	lsls	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	1000823f 	.word	0x1000823f
 80044fc:	40020940 	.word	0x40020940

08004500 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800450e:	e146      	b.n	800479e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8138 	beq.w	8004798 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d00b      	beq.n	8004548 <HAL_GPIO_Init+0x48>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d007      	beq.n	8004548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800453c:	2b11      	cmp	r3, #17
 800453e:	d003      	beq.n	8004548 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b12      	cmp	r3, #18
 8004546:	d130      	bne.n	80045aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800457e:	2201      	movs	r2, #1
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	f003 0201 	and.w	r2, r3, #1
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4013      	ands	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0xea>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b12      	cmp	r3, #18
 80045e8:	d123      	bne.n	8004632 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	08da      	lsrs	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3208      	adds	r2, #8
 80045f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	220f      	movs	r2, #15
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4013      	ands	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	08da      	lsrs	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3208      	adds	r2, #8
 800462c:	6939      	ldr	r1, [r7, #16]
 800462e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0203 	and.w	r2, r3, #3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8092 	beq.w	8004798 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004674:	4a51      	ldr	r2, [pc, #324]	; (80047bc <HAL_GPIO_Init+0x2bc>)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	3302      	adds	r3, #2
 800467c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004680:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 0303 	and.w	r3, r3, #3
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	220f      	movs	r2, #15
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4013      	ands	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800469e:	d013      	beq.n	80046c8 <HAL_GPIO_Init+0x1c8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a47      	ldr	r2, [pc, #284]	; (80047c0 <HAL_GPIO_Init+0x2c0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00d      	beq.n	80046c4 <HAL_GPIO_Init+0x1c4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a46      	ldr	r2, [pc, #280]	; (80047c4 <HAL_GPIO_Init+0x2c4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d007      	beq.n	80046c0 <HAL_GPIO_Init+0x1c0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a45      	ldr	r2, [pc, #276]	; (80047c8 <HAL_GPIO_Init+0x2c8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_GPIO_Init+0x1bc>
 80046b8:	2304      	movs	r3, #4
 80046ba:	e006      	b.n	80046ca <HAL_GPIO_Init+0x1ca>
 80046bc:	2307      	movs	r3, #7
 80046be:	e004      	b.n	80046ca <HAL_GPIO_Init+0x1ca>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e002      	b.n	80046ca <HAL_GPIO_Init+0x1ca>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_GPIO_Init+0x1ca>
 80046c8:	2300      	movs	r3, #0
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	f002 0203 	and.w	r2, r2, #3
 80046d0:	0092      	lsls	r2, r2, #2
 80046d2:	4093      	lsls	r3, r2
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046da:	4938      	ldr	r1, [pc, #224]	; (80047bc <HAL_GPIO_Init+0x2bc>)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	3302      	adds	r3, #2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046e8:	4b38      	ldr	r3, [pc, #224]	; (80047cc <HAL_GPIO_Init+0x2cc>)
 80046ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	43db      	mvns	r3, r3
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4013      	ands	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800470e:	4a2f      	ldr	r2, [pc, #188]	; (80047cc <HAL_GPIO_Init+0x2cc>)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004716:	4b2d      	ldr	r3, [pc, #180]	; (80047cc <HAL_GPIO_Init+0x2cc>)
 8004718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43db      	mvns	r3, r3
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800473c:	4a23      	ldr	r2, [pc, #140]	; (80047cc <HAL_GPIO_Init+0x2cc>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004744:	4b21      	ldr	r3, [pc, #132]	; (80047cc <HAL_GPIO_Init+0x2cc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	43db      	mvns	r3, r3
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_GPIO_Init+0x268>
        {
          temp |= iocurrent;
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004768:	4a18      	ldr	r2, [pc, #96]	; (80047cc <HAL_GPIO_Init+0x2cc>)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800476e:	4b17      	ldr	r3, [pc, #92]	; (80047cc <HAL_GPIO_Init+0x2cc>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43db      	mvns	r3, r3
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4013      	ands	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004792:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <HAL_GPIO_Init+0x2cc>)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	3301      	adds	r3, #1
 800479c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f47f aeb1 	bne.w	8004510 <HAL_GPIO_Init+0x10>
  }
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40010000 	.word	0x40010000
 80047c0:	48000400 	.word	0x48000400
 80047c4:	48000800 	.word	0x48000800
 80047c8:	48001000 	.word	0x48001000
 80047cc:	58000800 	.word	0x58000800

080047d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	807b      	strh	r3, [r7, #2]
 80047dc:	4613      	mov	r3, r2
 80047de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e0:	787b      	ldrb	r3, [r7, #1]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047ec:	e002      	b.n	80047f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ee:	887a      	ldrh	r2, [r7, #2]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_HSEM_IRQHandler+0x30>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800480c:	4b08      	ldr	r3, [pc, #32]	; (8004830 <HAL_HSEM_IRQHandler+0x30>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	43db      	mvns	r3, r3
 8004814:	4906      	ldr	r1, [pc, #24]	; (8004830 <HAL_HSEM_IRQHandler+0x30>)
 8004816:	4013      	ands	r3, r2
 8004818:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800481a:	4a05      	ldr	r2, [pc, #20]	; (8004830 <HAL_HSEM_IRQHandler+0x30>)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f807 	bl	8004834 <HAL_HSEM_FreeCallback>
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	58001500 	.word	0x58001500

08004834 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01e      	beq.n	8004898 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <HAL_IPCC_Init+0x60>)
 800485c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd fdb8 	bl	80023e0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004870:	68b8      	ldr	r0, [r7, #8]
 8004872:	f000 f85b 	bl	800492c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f82c 	bl	80048e0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004896:	e001      	b.n	800489c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	58000c00 	.word	0x58000c00

080048ac <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80048ba:	bf00      	nop
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	4613      	mov	r3, r2
 80048d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	e00f      	b.n	800490e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	4a0b      	ldr	r2, [pc, #44]	; (8004924 <IPCC_SetDefaultCallbacks+0x44>)
 80048f8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	3306      	adds	r3, #6
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	4a08      	ldr	r2, [pc, #32]	; (8004928 <IPCC_SetDefaultCallbacks+0x48>)
 8004906:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3301      	adds	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b05      	cmp	r3, #5
 8004912:	d9ec      	bls.n	80048ee <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	080048ad 	.word	0x080048ad
 8004928:	080048c7 	.word	0x080048c7

0800492c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004940:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	223f      	movs	r2, #63	; 0x3f
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	6013      	str	r3, [r2, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	58000400 	.word	0x58000400

08004974 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004986:	d101      	bne.n	800498c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <LL_RCC_HSE_Enable>:
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800499c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049aa:	6013      	str	r3, [r2, #0]
}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <LL_RCC_HSE_Disable>:
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80049ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c8:	6013      	str	r3, [r2, #0]
}
 80049ca:	bf00      	nop
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_RCC_HSE_IsReady>:
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049e6:	d101      	bne.n	80049ec <LL_RCC_HSE_IsReady+0x18>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <LL_RCC_HSE_IsReady+0x1a>
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_RCC_HSI_Enable>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0a:	6013      	str	r3, [r2, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <LL_RCC_HSI_Disable>:
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a28:	6013      	str	r3, [r2, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <LL_RCC_HSI_IsReady>:
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a46:	d101      	bne.n	8004a4c <LL_RCC_HSI_IsReady+0x18>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <LL_RCC_HSI_IsReady+0x1a>
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a72:	4313      	orrs	r3, r2
 8004a74:	604b      	str	r3, [r1, #4]
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <LL_RCC_HSI48_Enable>:
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004a9a:	bf00      	nop
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <LL_RCC_HSI48_Disable>:
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <LL_RCC_HSI48_IsReady>:
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d101      	bne.n	8004ade <LL_RCC_HSI48_IsReady+0x18>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <LL_RCC_HSI48_IsReady+0x1a>
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <LL_RCC_LSE_Enable>:
{
 8004aea:	b480      	push	{r7}
 8004aec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b02:	bf00      	nop
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_RCC_LSE_Disable>:
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b24:	bf00      	nop
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_RCC_LSE_EnableBypass>:
{
 8004b2e:	b480      	push	{r7}
 8004b30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b3e:	f043 0304 	orr.w	r3, r3, #4
 8004b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b46:	bf00      	nop
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <LL_RCC_LSE_DisableBypass>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <LL_RCC_LSE_IsReady>:
{
 8004b72:	b480      	push	{r7}
 8004b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d101      	bne.n	8004b8a <LL_RCC_LSE_IsReady+0x18>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <LL_RCC_LSE_IsReady+0x1a>
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <LL_RCC_LSI1_Enable>:
{
 8004b96:	b480      	push	{r7}
 8004b98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bae:	bf00      	nop
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <LL_RCC_LSI1_Disable>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <LL_RCC_LSI1_IsReady>:
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d101      	bne.n	8004bf2 <LL_RCC_LSI1_IsReady+0x18>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <LL_RCC_LSI1_IsReady+0x1a>
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <LL_RCC_LSI2_Enable>:
{
 8004bfe:	b480      	push	{r7}
 8004c00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c0e:	f043 0304 	orr.w	r3, r3, #4
 8004c12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c16:	bf00      	nop
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <LL_RCC_LSI2_Disable>:
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c30:	f023 0304 	bic.w	r3, r3, #4
 8004c34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <LL_RCC_LSI2_IsReady>:
{
 8004c42:	b480      	push	{r7}
 8004c44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d101      	bne.n	8004c5a <LL_RCC_LSI2_IsReady+0x18>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <LL_RCC_LSI2_IsReady+0x1a>
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <LL_RCC_LSI2_SetTrimming>:
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <LL_RCC_MSI_Enable>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6013      	str	r3, [r2, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LL_RCC_MSI_Disable>:
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	6013      	str	r3, [r2, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <LL_RCC_MSI_IsReady>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d101      	bne.n	8004ce6 <LL_RCC_MSI_IsReady+0x16>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <LL_RCC_MSI_IsReady+0x18>
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <LL_RCC_MSI_SetRange>:
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <LL_RCC_MSI_GetRange>:
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d2a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2bb0      	cmp	r3, #176	; 0xb0
 8004d30:	d901      	bls.n	8004d36 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004d32:	23b0      	movs	r3, #176	; 0xb0
 8004d34:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004d36:	687b      	ldr	r3, [r7, #4]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <LL_RCC_SetSysClkSource>:
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 0203 	bic.w	r2, r3, #3
 8004d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <LL_RCC_GetSysClkSource>:
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 030c 	and.w	r3, r3, #12
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <LL_RCC_SetAHBPrescaler>:
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_SetAHB4Prescaler>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e12:	f023 020f 	bic.w	r2, r3, #15
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	091b      	lsrs	r3, r3, #4
 8004e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_RCC_SetAPB1Prescaler>:
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	608b      	str	r3, [r1, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_RCC_SetAPB2Prescaler>:
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	608b      	str	r3, [r1, #8]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_RCC_GetAHBPrescaler>:
{
 8004e80:	b480      	push	{r7}
 8004e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <LL_RCC_GetAHB4Prescaler>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_GetAPB2Prescaler>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_RCC_PLL_Enable>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <LL_RCC_PLL_Disable>:
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efc:	6013      	str	r3, [r2, #0]
}
 8004efe:	bf00      	nop
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <LL_RCC_PLL_IsReady>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f1a:	d101      	bne.n	8004f20 <LL_RCC_PLL_IsReady+0x18>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <LL_RCC_PLL_IsReady+0x1a>
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_PLL_GetN>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <LL_RCC_PLL_GetR>:
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_PLL_GetDivider>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <LL_RCC_PLL_GetMainSource>:
{
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0303 	and.w	r3, r3, #3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LL_RCC_IsActiveFlag_HPRE>:
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa0:	d101      	bne.n	8004fa6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fc6:	d101      	bne.n	8004fcc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fec:	d101      	bne.n	8004ff2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e000      	b.n	8004ff4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005010:	d101      	bne.n	8005016 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005022:	b480      	push	{r7}
 8005024:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005030:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005034:	d101      	bne.n	800503a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b08d      	sub	sp, #52	; 0x34
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e373      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8092 	beq.w	800518c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005068:	f7ff fe95 	bl	8004d96 <LL_RCC_GetSysClkSource>
 800506c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800506e:	f7ff ff82 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005072:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x3e>
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2b0c      	cmp	r3, #12
 800507e:	d14c      	bne.n	800511a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	2b01      	cmp	r3, #1
 8005084:	d149      	bne.n	800511a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005086:	f7ff fe23 	bl	8004cd0 <LL_RCC_MSI_IsReady>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCC_OscConfig+0x54>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	69db      	ldr	r3, [r3, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e352      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80050a0:	f7ff fe3b 	bl	8004d1a <LL_RCC_MSI_GetRange>
 80050a4:	4603      	mov	r3, r0
 80050a6:	429c      	cmp	r4, r3
 80050a8:	d914      	bls.n	80050d4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fd22 	bl	8005af8 <RCC_SetFlashLatencyFromMSIRange>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e341      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff fe15 	bl	8004cf2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fe39 	bl	8004d44 <LL_RCC_MSI_SetCalibTrimming>
 80050d2:	e013      	b.n	80050fc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fe0a 	bl	8004cf2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fe2e 	bl	8004d44 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fd03 	bl	8005af8 <RCC_SetFlashLatencyFromMSIRange>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e322      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050fc:	f000 fcd2 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005100:	4603      	mov	r3, r0
 8005102:	4ab3      	ldr	r2, [pc, #716]	; (80053d0 <HAL_RCC_OscConfig+0x388>)
 8005104:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005106:	4bb3      	ldr	r3, [pc, #716]	; (80053d4 <HAL_RCC_OscConfig+0x38c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd fb54 	bl	80027b8 <HAL_InitTick>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d039      	beq.n	800518a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e313      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d01e      	beq.n	8005160 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005122:	f7ff fdb7 	bl	8004c94 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005126:	f7fd fb95 	bl	8002854 <HAL_GetTick>
 800512a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800512e:	f7fd fb91 	bl	8002854 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e300      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005140:	f7ff fdc6 	bl	8004cd0 <LL_RCC_MSI_IsReady>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f1      	beq.n	800512e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fdcf 	bl	8004cf2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff fdf3 	bl	8004d44 <LL_RCC_MSI_SetCalibTrimming>
 800515e:	e015      	b.n	800518c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005160:	f7ff fda7 	bl	8004cb2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005164:	f7fd fb76 	bl	8002854 <HAL_GetTick>
 8005168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800516c:	f7fd fb72 	bl	8002854 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e2e1      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800517e:	f7ff fda7 	bl	8004cd0 <LL_RCC_MSI_IsReady>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1f1      	bne.n	800516c <HAL_RCC_OscConfig+0x124>
 8005188:	e000      	b.n	800518c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800518a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d04e      	beq.n	8005236 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005198:	f7ff fdfd 	bl	8004d96 <LL_RCC_GetSysClkSource>
 800519c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800519e:	f7ff feea 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 80051a2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d005      	beq.n	80051b6 <HAL_RCC_OscConfig+0x16e>
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d10d      	bne.n	80051cc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d10a      	bne.n	80051cc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b6:	f7ff fc0d 	bl	80049d4 <LL_RCC_HSE_IsReady>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d039      	beq.n	8005234 <HAL_RCC_OscConfig+0x1ec>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d135      	bne.n	8005234 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e2ba      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d102      	bne.n	80051dc <HAL_RCC_OscConfig+0x194>
 80051d6:	f7ff fbdf 	bl	8004998 <LL_RCC_HSE_Enable>
 80051da:	e001      	b.n	80051e0 <HAL_RCC_OscConfig+0x198>
 80051dc:	f7ff fbeb 	bl	80049b6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d012      	beq.n	800520e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fd fb34 	bl	8002854 <HAL_GetTick>
 80051ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f0:	f7fd fb30 	bl	8002854 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	; 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e29f      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005202:	f7ff fbe7 	bl	80049d4 <LL_RCC_HSE_IsReady>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d0f1      	beq.n	80051f0 <HAL_RCC_OscConfig+0x1a8>
 800520c:	e013      	b.n	8005236 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fd fb21 	bl	8002854 <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005216:	f7fd fb1d 	bl	8002854 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b64      	cmp	r3, #100	; 0x64
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e28c      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005228:	f7ff fbd4 	bl	80049d4 <LL_RCC_HSE_IsReady>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f1      	bne.n	8005216 <HAL_RCC_OscConfig+0x1ce>
 8005232:	e000      	b.n	8005236 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d051      	beq.n	80052e6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005242:	f7ff fda8 	bl	8004d96 <LL_RCC_GetSysClkSource>
 8005246:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005248:	f7ff fe95 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 800524c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b04      	cmp	r3, #4
 8005252:	d005      	beq.n	8005260 <HAL_RCC_OscConfig+0x218>
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d113      	bne.n	8005282 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b02      	cmp	r3, #2
 800525e:	d110      	bne.n	8005282 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005260:	f7ff fbe8 	bl	8004a34 <LL_RCC_HSI_IsReady>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_RCC_OscConfig+0x22e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e265      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fbec 	bl	8004a58 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005280:	e031      	b.n	80052e6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d019      	beq.n	80052be <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800528a:	f7ff fbb5 	bl	80049f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528e:	f7fd fae1 	bl	8002854 <HAL_GetTick>
 8005292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005296:	f7fd fadd 	bl	8002854 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e24c      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_HSI_IsReady() == 0U)
 80052a8:	f7ff fbc4 	bl	8004a34 <LL_RCC_HSI_IsReady>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f1      	beq.n	8005296 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff fbce 	bl	8004a58 <LL_RCC_HSI_SetCalibTrimming>
 80052bc:	e013      	b.n	80052e6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052be:	f7ff fbaa 	bl	8004a16 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c2:	f7fd fac7 	bl	8002854 <HAL_GetTick>
 80052c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80052c8:	e008      	b.n	80052dc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ca:	f7fd fac3 	bl	8002854 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e232      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_HSI_IsReady() != 0U)
 80052dc:	f7ff fbaa 	bl	8004a34 <LL_RCC_HSI_IsReady>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f1      	bne.n	80052ca <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80a3 	beq.w	8005446 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d076      	beq.n	80053f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d046      	beq.n	80053a2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005314:	f7ff fc61 	bl	8004bda <LL_RCC_LSI1_IsReady>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d113      	bne.n	8005346 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800531e:	f7ff fc3a 	bl	8004b96 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005322:	f7fd fa97 	bl	8002854 <HAL_GetTick>
 8005326:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800532a:	f7fd fa93 	bl	8002854 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e202      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800533c:	f7ff fc4d 	bl	8004bda <LL_RCC_LSI1_IsReady>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0f1      	beq.n	800532a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005346:	f7ff fc5a 	bl	8004bfe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534a:	f7fd fa83 	bl	8002854 <HAL_GetTick>
 800534e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005352:	f7fd fa7f 	bl	8002854 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b03      	cmp	r3, #3
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e1ee      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005364:	f7ff fc6d 	bl	8004c42 <LL_RCC_LSI2_IsReady>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f1      	beq.n	8005352 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff fc77 	bl	8004c66 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005378:	f7ff fc1e 	bl	8004bb8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd fa6a 	bl	8002854 <HAL_GetTick>
 8005380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005384:	f7fd fa66 	bl	8002854 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e1d5      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005396:	f7ff fc20 	bl	8004bda <LL_RCC_LSI1_IsReady>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f1      	bne.n	8005384 <HAL_RCC_OscConfig+0x33c>
 80053a0:	e051      	b.n	8005446 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80053a2:	f7ff fbf8 	bl	8004b96 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a6:	f7fd fa55 	bl	8002854 <HAL_GetTick>
 80053aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053ae:	f7fd fa51 	bl	8002854 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e1c0      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053c0:	f7ff fc0b 	bl	8004bda <LL_RCC_LSI1_IsReady>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f1      	beq.n	80053ae <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80053ca:	f7ff fc29 	bl	8004c20 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053ce:	e00c      	b.n	80053ea <HAL_RCC_OscConfig+0x3a2>
 80053d0:	20000004 	.word	0x20000004
 80053d4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053d8:	f7fd fa3c 	bl	8002854 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1ab      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053ea:	f7ff fc2a 	bl	8004c42 <LL_RCC_LSI2_IsReady>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f1      	bne.n	80053d8 <HAL_RCC_OscConfig+0x390>
 80053f4:	e027      	b.n	8005446 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80053f6:	f7ff fc13 	bl	8004c20 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053fa:	f7fd fa2b 	bl	8002854 <HAL_GetTick>
 80053fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005400:	e008      	b.n	8005414 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005402:	f7fd fa27 	bl	8002854 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	2b03      	cmp	r3, #3
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e196      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005414:	f7ff fc15 	bl	8004c42 <LL_RCC_LSI2_IsReady>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f1      	bne.n	8005402 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800541e:	f7ff fbcb 	bl	8004bb8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005422:	f7fd fa17 	bl	8002854 <HAL_GetTick>
 8005426:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800542a:	f7fd fa13 	bl	8002854 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e182      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800543c:	f7ff fbcd 	bl	8004bda <LL_RCC_LSI1_IsReady>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f1      	bne.n	800542a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b00      	cmp	r3, #0
 8005450:	d05b      	beq.n	800550a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005452:	4bb4      	ldr	r3, [pc, #720]	; (8005724 <HAL_RCC_OscConfig+0x6dc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d114      	bne.n	8005488 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800545e:	f7ff fa79 	bl	8004954 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005462:	f7fd f9f7 	bl	8002854 <HAL_GetTick>
 8005466:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546a:	f7fd f9f3 	bl	8002854 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e162      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800547c:	4ba9      	ldr	r3, [pc, #676]	; (8005724 <HAL_RCC_OscConfig+0x6dc>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0f0      	beq.n	800546a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d102      	bne.n	8005496 <HAL_RCC_OscConfig+0x44e>
 8005490:	f7ff fb2b 	bl	8004aea <LL_RCC_LSE_Enable>
 8005494:	e00c      	b.n	80054b0 <HAL_RCC_OscConfig+0x468>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2b05      	cmp	r3, #5
 800549c:	d104      	bne.n	80054a8 <HAL_RCC_OscConfig+0x460>
 800549e:	f7ff fb46 	bl	8004b2e <LL_RCC_LSE_EnableBypass>
 80054a2:	f7ff fb22 	bl	8004aea <LL_RCC_LSE_Enable>
 80054a6:	e003      	b.n	80054b0 <HAL_RCC_OscConfig+0x468>
 80054a8:	f7ff fb30 	bl	8004b0c <LL_RCC_LSE_Disable>
 80054ac:	f7ff fb50 	bl	8004b50 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d014      	beq.n	80054e2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b8:	f7fd f9cc 	bl	8002854 <HAL_GetTick>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80054be:	e00a      	b.n	80054d6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c0:	f7fd f9c8 	bl	8002854 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e135      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_LSE_IsReady() == 0U)
 80054d6:	f7ff fb4c 	bl	8004b72 <LL_RCC_LSE_IsReady>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0ef      	beq.n	80054c0 <HAL_RCC_OscConfig+0x478>
 80054e0:	e013      	b.n	800550a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e2:	f7fd f9b7 	bl	8002854 <HAL_GetTick>
 80054e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80054e8:	e00a      	b.n	8005500 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ea:	f7fd f9b3 	bl	8002854 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e120      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005500:	f7ff fb37 	bl	8004b72 <LL_RCC_LSE_IsReady>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1ef      	bne.n	80054ea <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d02c      	beq.n	8005570 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d014      	beq.n	8005548 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800551e:	f7ff fab0 	bl	8004a82 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fd f997 	bl	8002854 <HAL_GetTick>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800552a:	f7fd f993 	bl	8002854 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e102      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800553c:	f7ff fac3 	bl	8004ac6 <LL_RCC_HSI48_IsReady>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f1      	beq.n	800552a <HAL_RCC_OscConfig+0x4e2>
 8005546:	e013      	b.n	8005570 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005548:	f7ff faac 	bl	8004aa4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554c:	f7fd f982 	bl	8002854 <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005554:	f7fd f97e 	bl	8002854 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e0ed      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005566:	f7ff faae 	bl	8004ac6 <LL_RCC_HSI48_IsReady>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1f1      	bne.n	8005554 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80e3 	beq.w	8005740 <HAL_RCC_OscConfig+0x6f8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800557a:	f7ff fc0c 	bl	8004d96 <LL_RCC_GetSysClkSource>
 800557e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	2b02      	cmp	r3, #2
 800558e:	f040 80a6 	bne.w	80056de <HAL_RCC_OscConfig+0x696>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f003 0203 	and.w	r2, r3, #3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559c:	429a      	cmp	r2, r3
 800559e:	d123      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d11c      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	0a1b      	lsrs	r3, r3, #8
 80055b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d114      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d10d      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d106      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d054      	beq.n	8005692 <HAL_RCC_OscConfig+0x64a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b0c      	cmp	r3, #12
 80055ec:	d04f      	beq.n	800568e <HAL_RCC_OscConfig+0x646>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055ee:	f7ff fc7c 	bl	8004eea <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055f2:	f7fd f92f 	bl	8002854 <HAL_GetTick>
 80055f6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x5c4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fa:	f7fd f92b 	bl	8002854 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x5c4>
              {
                return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e09a      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800560c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1ef      	bne.n	80055fa <HAL_RCC_OscConfig+0x5b2>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800561a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	4b41      	ldr	r3, [pc, #260]	; (8005728 <HAL_RCC_OscConfig+0x6e0>)
 8005622:	4013      	ands	r3, r2
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800562c:	4311      	orrs	r1, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005632:	0212      	lsls	r2, r2, #8
 8005634:	4311      	orrs	r1, r2
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800563a:	4311      	orrs	r1, r2
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005640:	4311      	orrs	r1, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005646:	430a      	orrs	r2, r1
 8005648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800564c:	4313      	orrs	r3, r2
 800564e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005650:	f7ff fc3c 	bl	8004ecc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800565e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005662:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005664:	f7fd f8f6 	bl	8002854 <HAL_GetTick>
 8005668:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x636>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566c:	f7fd f8f2 	bl	8002854 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x636>
              {
                return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e061      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800567e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ef      	beq.n	800566c <HAL_RCC_OscConfig+0x624>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800568c:	e058      	b.n	8005740 <HAL_RCC_OscConfig+0x6f8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e057      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d14f      	bne.n	8005740 <HAL_RCC_OscConfig+0x6f8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056a0:	f7ff fc14 	bl	8004ecc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056b4:	f7fd f8ce 	bl	8002854 <HAL_GetTick>
 80056b8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x686>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056bc:	f7fd f8ca 	bl	8002854 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e039      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ef      	beq.n	80056bc <HAL_RCC_OscConfig+0x674>
 80056dc:	e030      	b.n	8005740 <HAL_RCC_OscConfig+0x6f8>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b0c      	cmp	r3, #12
 80056e2:	d02b      	beq.n	800573c <HAL_RCC_OscConfig+0x6f4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e4:	f7ff fc01 	bl	8004eea <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80056e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 80056f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005706:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005708:	f7fd f8a4 	bl	8002854 <HAL_GetTick>
 800570c:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800570e:	e00d      	b.n	800572c <HAL_RCC_OscConfig+0x6e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005710:	f7fd f8a0 	bl	8002854 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d906      	bls.n	800572c <HAL_RCC_OscConfig+0x6e4>
          {
            return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e00f      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
 8005722:	bf00      	nop
 8005724:	58000400 	.word	0x58000400
 8005728:	11c1808c 	.word	0x11c1808c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800572c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1ea      	bne.n	8005710 <HAL_RCC_OscConfig+0x6c8>
 800573a:	e001      	b.n	8005740 <HAL_RCC_OscConfig+0x6f8>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_RCC_OscConfig+0x6fa>
      }
    }
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3734      	adds	r7, #52	; 0x34
 8005746:	46bd      	mov	sp, r7
 8005748:	bd90      	pop	{r4, r7, pc}
 800574a:	bf00      	nop

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e12d      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b98      	ldr	r3, [pc, #608]	; (80059c4 <HAL_RCC_ClockConfig+0x278>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d91b      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b95      	ldr	r3, [pc, #596]	; (80059c4 <HAL_RCC_ClockConfig+0x278>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 0207 	bic.w	r2, r3, #7
 8005776:	4993      	ldr	r1, [pc, #588]	; (80059c4 <HAL_RCC_ClockConfig+0x278>)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800577e:	f7fd f869 	bl	8002854 <HAL_GetTick>
 8005782:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005784:	e008      	b.n	8005798 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005786:	f7fd f865 	bl	8002854 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e111      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005798:	4b8a      	ldr	r3, [pc, #552]	; (80059c4 <HAL_RCC_ClockConfig+0x278>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d1ef      	bne.n	8005786 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff faf9 	bl	8004dae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057bc:	f7fd f84a 	bl	8002854 <HAL_GetTick>
 80057c0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057c4:	f7fd f846 	bl	8002854 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0f2      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057d6:	f7ff fbda 	bl	8004f8e <LL_RCC_IsActiveFlag_HPRE>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0f1      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d016      	beq.n	800581a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff faf0 	bl	8004dd6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057f6:	f7fd f82d 	bl	8002854 <HAL_GetTick>
 80057fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057fe:	f7fd f829 	bl	8002854 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e0d5      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005810:	f7ff fbcf 	bl	8004fb2 <LL_RCC_IsActiveFlag_C2HPRE>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f1      	beq.n	80057fe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d016      	beq.n	8005854 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fae9 	bl	8004e02 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005830:	f7fd f810 	bl	8002854 <HAL_GetTick>
 8005834:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005838:	f7fd f80c 	bl	8002854 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e0b8      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800584a:	f7ff fbc5 	bl	8004fd8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f1      	beq.n	8005838 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d016      	beq.n	800588e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fae3 	bl	8004e30 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800586a:	f7fc fff3 	bl	8002854 <HAL_GetTick>
 800586e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005872:	f7fc ffef 	bl	8002854 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e09b      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005884:	f7ff fbbb 	bl	8004ffe <LL_RCC_IsActiveFlag_PPRE1>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f1      	beq.n	8005872 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d017      	beq.n	80058ca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff fad9 	bl	8004e58 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058a6:	f7fc ffd5 	bl	8002854 <HAL_GetTick>
 80058aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058ae:	f7fc ffd1 	bl	8002854 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e07d      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058c0:	f7ff fbaf 	bl	8005022 <LL_RCC_IsActiveFlag_PPRE2>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f1      	beq.n	80058ae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d043      	beq.n	800595e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d106      	bne.n	80058ec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80058de:	f7ff f879 	bl	80049d4 <LL_RCC_HSE_IsReady>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d11e      	bne.n	8005926 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e067      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d106      	bne.n	8005902 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80058f4:	f7ff fb08 	bl	8004f08 <LL_RCC_PLL_IsReady>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d113      	bne.n	8005926 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e05c      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800590a:	f7ff f9e1 	bl	8004cd0 <LL_RCC_MSI_IsReady>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d108      	bne.n	8005926 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e051      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005918:	f7ff f88c 	bl	8004a34 <LL_RCC_HSI_IsReady>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e04a      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fa1f 	bl	8004d6e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005930:	f7fc ff90 	bl	8002854 <HAL_GetTick>
 8005934:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	e00a      	b.n	800594e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005938:	f7fc ff8c 	bl	8002854 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	; 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e036      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594e:	f7ff fa22 	bl	8004d96 <LL_RCC_GetSysClkSource>
 8005952:	4602      	mov	r2, r0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	429a      	cmp	r2, r3
 800595c:	d1ec      	bne.n	8005938 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800595e:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <HAL_RCC_ClockConfig+0x278>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d21b      	bcs.n	80059a4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596c:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <HAL_RCC_ClockConfig+0x278>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f023 0207 	bic.w	r2, r3, #7
 8005974:	4913      	ldr	r1, [pc, #76]	; (80059c4 <HAL_RCC_ClockConfig+0x278>)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	4313      	orrs	r3, r2
 800597a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800597c:	f7fc ff6a 	bl	8002854 <HAL_GetTick>
 8005980:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005982:	e008      	b.n	8005996 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005984:	f7fc ff66 	bl	8002854 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e012      	b.n	80059bc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <HAL_RCC_ClockConfig+0x278>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d1ef      	bne.n	8005984 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80059a4:	f000 f87e 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 80059a8:	4603      	mov	r3, r0
 80059aa:	4a07      	ldr	r2, [pc, #28]	; (80059c8 <HAL_RCC_ClockConfig+0x27c>)
 80059ac:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80059ae:	f7fc ff5d 	bl	800286c <HAL_GetTickPrio>
 80059b2:	4603      	mov	r3, r0
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fc feff 	bl	80027b8 <HAL_InitTick>
 80059ba:	4603      	mov	r3, r0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	58004000 	.word	0x58004000
 80059c8:	20000004 	.word	0x20000004

080059cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059cc:	b590      	push	{r4, r7, lr}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059d2:	f7ff f9e0 	bl	8004d96 <LL_RCC_GetSysClkSource>
 80059d6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10a      	bne.n	80059f4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80059de:	f7ff f99c 	bl	8004d1a <LL_RCC_MSI_GetRange>
 80059e2:	4603      	mov	r3, r0
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xcc>)
 80059ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	e04b      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d102      	bne.n	8005a00 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059fa:	4b28      	ldr	r3, [pc, #160]	; (8005a9c <HAL_RCC_GetSysClockFreq+0xd0>)
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e045      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d10a      	bne.n	8005a1c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a06:	f7fe ffb5 	bl	8004974 <LL_RCC_HSE_IsEnabledDiv2>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d102      	bne.n	8005a16 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005a10:	4b22      	ldr	r3, [pc, #136]	; (8005a9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	e03a      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005a16:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	e037      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005a1c:	f7ff faab 	bl	8004f76 <LL_RCC_PLL_GetMainSource>
 8005a20:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d003      	beq.n	8005a30 <HAL_RCC_GetSysClockFreq+0x64>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d003      	beq.n	8005a36 <HAL_RCC_GetSysClockFreq+0x6a>
 8005a2e:	e00d      	b.n	8005a4c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005a30:	4b1a      	ldr	r3, [pc, #104]	; (8005a9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a32:	60bb      	str	r3, [r7, #8]
        break;
 8005a34:	e015      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a36:	f7fe ff9d 	bl	8004974 <LL_RCC_HSE_IsEnabledDiv2>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d102      	bne.n	8005a46 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005a40:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a42:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005a44:	e00d      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005a46:	4b16      	ldr	r3, [pc, #88]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a48:	60bb      	str	r3, [r7, #8]
        break;
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a4c:	f7ff f965 	bl	8004d1a <LL_RCC_MSI_GetRange>
 8005a50:	4603      	mov	r3, r0
 8005a52:	091b      	lsrs	r3, r3, #4
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	4a0f      	ldr	r2, [pc, #60]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5e:	60bb      	str	r3, [r7, #8]
        break;
 8005a60:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005a62:	f7ff fa63 	bl	8004f2c <LL_RCC_PLL_GetN>
 8005a66:	4602      	mov	r2, r0
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	fb03 f402 	mul.w	r4, r3, r2
 8005a6e:	f7ff fa76 	bl	8004f5e <LL_RCC_PLL_GetDivider>
 8005a72:	4603      	mov	r3, r0
 8005a74:	091b      	lsrs	r3, r3, #4
 8005a76:	3301      	adds	r3, #1
 8005a78:	fbb4 f4f3 	udiv	r4, r4, r3
 8005a7c:	f7ff fa63 	bl	8004f46 <LL_RCC_PLL_GetR>
 8005a80:	4603      	mov	r3, r0
 8005a82:	0f5b      	lsrs	r3, r3, #29
 8005a84:	3301      	adds	r3, #1
 8005a86:	fbb4 f3f3 	udiv	r3, r4, r3
 8005a8a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd90      	pop	{r4, r7, pc}
 8005a96:	bf00      	nop
 8005a98:	0800ad8c 	.word	0x0800ad8c
 8005a9c:	00f42400 	.word	0x00f42400
 8005aa0:	01e84800 	.word	0x01e84800

08005aa4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa4:	b598      	push	{r3, r4, r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005aa8:	f7ff ff90 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 8005aac:	4604      	mov	r4, r0
 8005aae:	f7ff f9e7 	bl	8004e80 <LL_RCC_GetAHBPrescaler>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	4a03      	ldr	r2, [pc, #12]	; (8005ac8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd98      	pop	{r3, r4, r7, pc}
 8005ac8:	0800ad2c 	.word	0x0800ad2c

08005acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005acc:	b598      	push	{r3, r4, r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005ad0:	f7ff ffe8 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	f7ff f9ed 	bl	8004eb4 <LL_RCC_GetAPB2Prescaler>
 8005ada:	4603      	mov	r3, r0
 8005adc:	0adb      	lsrs	r3, r3, #11
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	bd98      	pop	{r3, r4, r7, pc}
 8005af4:	0800ad6c 	.word	0x0800ad6c

08005af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2bb0      	cmp	r3, #176	; 0xb0
 8005b04:	d903      	bls.n	8005b0e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e007      	b.n	8005b1e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	091b      	lsrs	r3, r3, #4
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	4a10      	ldr	r2, [pc, #64]	; (8005b58 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b1c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005b1e:	f7ff f9bb 	bl	8004e98 <LL_RCC_GetAHB4Prescaler>
 8005b22:	4603      	mov	r3, r0
 8005b24:	091b      	lsrs	r3, r3, #4
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	4a0c      	ldr	r2, [pc, #48]	; (8005b5c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	0c9b      	lsrs	r3, r3, #18
 8005b42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f80c 	bl	8005b64 <RCC_SetFlashLatency>
 8005b4c:	4603      	mov	r3, r0
#endif
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	0800ad8c 	.word	0x0800ad8c
 8005b5c:	0800ad2c 	.word	0x0800ad2c
 8005b60:	431bde83 	.word	0x431bde83

08005b64 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b64:	b590      	push	{r4, r7, lr}
 8005b66:	b08f      	sub	sp, #60	; 0x3c
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005b6e:	4b25      	ldr	r3, [pc, #148]	; (8005c04 <RCC_SetFlashLatency+0xa0>)
 8005b70:	f107 041c 	add.w	r4, r7, #28
 8005b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005b7a:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <RCC_SetFlashLatency+0xa4>)
 8005b7c:	f107 040c 	add.w	r4, r7, #12
 8005b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005b86:	2300      	movs	r3, #0
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8e:	e015      	b.n	8005bbc <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005b98:	4413      	add	r3, r2
 8005b9a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d808      	bhi.n	8005bb6 <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005bac:	4413      	add	r3, r2
 8005bae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005bb2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005bb4:	e005      	b.n	8005bc2 <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	3301      	adds	r3, #1
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d9e6      	bls.n	8005b90 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <RCC_SetFlashLatency+0xa8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f023 0207 	bic.w	r2, r3, #7
 8005bca:	4910      	ldr	r1, [pc, #64]	; (8005c0c <RCC_SetFlashLatency+0xa8>)
 8005bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bd2:	f7fc fe3f 	bl	8002854 <HAL_GetTick>
 8005bd6:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005bd8:	e008      	b.n	8005bec <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005bda:	f7fc fe3b 	bl	8002854 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e007      	b.n	8005bfc <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <RCC_SetFlashLatency+0xa8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d1ef      	bne.n	8005bda <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	373c      	adds	r7, #60	; 0x3c
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd90      	pop	{r4, r7, pc}
 8005c04:	0800abc4 	.word	0x0800abc4
 8005c08:	0800abd4 	.word	0x0800abd4
 8005c0c:	58004000 	.word	0x58004000

08005c10 <LL_RCC_LSE_IsEnabled>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <LL_RCC_LSE_IsEnabled+0x18>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <LL_RCC_LSE_IsEnabled+0x1a>
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <LL_RCC_LSE_IsReady>:
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d101      	bne.n	8005c4c <LL_RCC_LSE_IsReady+0x18>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <LL_RCC_LSE_IsReady+0x1a>
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <LL_RCC_SetRFWKPClockSource>:
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <LL_RCC_SetUSARTClockSource>:
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c94:	f023 0203 	bic.w	r2, r3, #3
 8005c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <LL_RCC_SetI2CClockSource>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	401a      	ands	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <LL_RCC_SetLPTIMClockSource>:
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	041b      	lsls	r3, r3, #16
 8005d00:	43db      	mvns	r3, r3
 8005d02:	401a      	ands	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d12:	bf00      	nop
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr

08005d1e <LL_RCC_SetRNGClockSource>:
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <LL_RCC_SetCLK48ClockSource>:
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <LL_RCC_SetADCClockSource>:
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <LL_RCC_SetRTCClockSource>:
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <LL_RCC_GetRTCClockSource>:
{
 8005dce:	b480      	push	{r7}
 8005dd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_RCC_ForceBackupDomainReset>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e22:	bf00      	nop
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005e34:	2300      	movs	r3, #0
 8005e36:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005e38:	2300      	movs	r3, #0
 8005e3a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d046      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005e48:	f7ff ffc1 	bl	8005dce <LL_RCC_GetRTCClockSource>
 8005e4c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d03c      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e58:	f7fe fd7c 	bl	8004954 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d105      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff ff9b 	bl	8005da2 <LL_RCC_SetRTCClockSource>
 8005e6c:	e02e      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e76:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005e78:	f7ff ffb6 	bl	8005de8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005e7c:	f7ff ffc5 	bl	8005e0a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005e98:	f7ff feba 	bl	8005c10 <LL_RCC_LSE_IsEnabled>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d114      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ea2:	f7fc fcd7 	bl	8002854 <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ea8:	e00b      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f7fc fcd3 	bl	8002854 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d902      	bls.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	77fb      	strb	r3, [r7, #31]
              break;
 8005ec0:	e004      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ec2:	f7ff feb7 	bl	8005c34 <LL_RCC_LSE_IsReady>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d1ee      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
 8005ece:	77bb      	strb	r3, [r7, #30]
 8005ed0:	e001      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed2:	7ffb      	ldrb	r3, [r7, #31]
 8005ed4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d004      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff fecc 	bl	8005c84 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fef4 	bl	8005cea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d004      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fee9 	bl	8005cea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fec1 	bl	8005cb0 <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d02b      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f42:	d008      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f4c:	d003      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d105      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fedf 	bl	8005d1e <LL_RCC_SetRNGClockSource>
 8005f60:	e00a      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	f7ff fed6 	bl	8005d1e <LL_RCC_SetRNGClockSource>
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f7ff fee9 	bl	8005d4a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005f80:	d107      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f90:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d011      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fee7 	bl	8005d76 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb0:	d107      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc0:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d004      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fe40 	bl	8005c58 <LL_RCC_SetRFWKPClockSource>
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif


  return status;
 8005fd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3720      	adds	r7, #32
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e090      	b.n	8006116 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fc fa0d 	bl	8002428 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	22ca      	movs	r2, #202	; 0xca
 800601c:	625a      	str	r2, [r3, #36]	; 0x24
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2253      	movs	r2, #83	; 0x53
 8006024:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f89f 	bl	800616a <RTC_EnterInitMode>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	22ff      	movs	r2, #255	; 0xff
 8006038:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2204      	movs	r2, #4
 800603e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e067      	b.n	8006116 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6812      	ldr	r2, [r2, #0]
 8006050:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006058:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6899      	ldr	r1, [r3, #8]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	68d2      	ldr	r2, [r2, #12]
 8006080:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6919      	ldr	r1, [r3, #16]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	041a      	lsls	r2, r3, #16
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060a4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0203 	bic.w	r2, r2, #3
 80060b4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69da      	ldr	r2, [r3, #28]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d113      	bne.n	8006104 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f81e 	bl	800611e <HAL_RTC_WaitForSynchro>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	22ff      	movs	r2, #255	; 0xff
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2204      	movs	r2, #4
 80060f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e008      	b.n	8006116 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	22ff      	movs	r2, #255	; 0xff
 800610a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006114:	2300      	movs	r3, #0
  }
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006134:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006136:	f7fc fb8d 	bl	8002854 <HAL_GetTick>
 800613a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800613c:	e009      	b.n	8006152 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800613e:	f7fc fb89 	bl	8002854 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800614c:	d901      	bls.n	8006152 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e007      	b.n	8006162 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0ee      	beq.n	800613e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d119      	bne.n	80061b4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f04f 32ff 	mov.w	r2, #4294967295
 8006188:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800618a:	f7fc fb63 	bl	8002854 <HAL_GetTick>
 800618e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006190:	e009      	b.n	80061a6 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006192:	f7fc fb5f 	bl	8002854 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061a0:	d901      	bls.n	80061a6 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e007      	b.n	80061b6 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0ee      	beq.n	8006192 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e049      	b.n	8006264 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d106      	bne.n	80061ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fc f935 	bl	8002454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f000 fa91 	bl	8006724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e036      	b.n	80062f2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a17      	ldr	r2, [pc, #92]	; (8006300 <HAL_TIM_Base_Start_IT+0x94>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d004      	beq.n	80062b0 <HAL_TIM_Base_Start_IT+0x44>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ae:	d115      	bne.n	80062dc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	4b13      	ldr	r3, [pc, #76]	; (8006304 <HAL_TIM_Base_Start_IT+0x98>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b06      	cmp	r3, #6
 80062c0:	d015      	beq.n	80062ee <HAL_TIM_Base_Start_IT+0x82>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c8:	d011      	beq.n	80062ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0201 	orr.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	e008      	b.n	80062ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	e000      	b.n	80062f0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00
 8006304:	00010007 	.word	0x00010007

08006308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b02      	cmp	r3, #2
 800631c:	d122      	bne.n	8006364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b02      	cmp	r3, #2
 800632a:	d11b      	bne.n	8006364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f06f 0202 	mvn.w	r2, #2
 8006334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f9cb 	bl	80066e6 <HAL_TIM_IC_CaptureCallback>
 8006350:	e005      	b.n	800635e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f9bd 	bl	80066d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f9ce 	bl	80066fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b04      	cmp	r3, #4
 8006370:	d122      	bne.n	80063b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b04      	cmp	r3, #4
 800637e:	d11b      	bne.n	80063b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0204 	mvn.w	r2, #4
 8006388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2202      	movs	r2, #2
 800638e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9a1 	bl	80066e6 <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f993 	bl	80066d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f9a4 	bl	80066fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0208 	mvn.w	r2, #8
 80063dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2204      	movs	r2, #4
 80063e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f977 	bl	80066e6 <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f969 	bl	80066d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f97a 	bl	80066fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b10      	cmp	r3, #16
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b10      	cmp	r3, #16
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0210 	mvn.w	r2, #16
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2208      	movs	r2, #8
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f94d 	bl	80066e6 <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f93f 	bl	80066d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f950 	bl	80066fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b01      	cmp	r3, #1
 800646c:	d10e      	bne.n	800648c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b01      	cmp	r3, #1
 800647a:	d107      	bne.n	800648c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0201 	mvn.w	r2, #1
 8006484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fb fe94 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006496:	2b80      	cmp	r3, #128	; 0x80
 8006498:	d10e      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a4:	2b80      	cmp	r3, #128	; 0x80
 80064a6:	d107      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 faa0 	bl	80069f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c6:	d10e      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d2:	2b80      	cmp	r3, #128	; 0x80
 80064d4:	d107      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa93 	bl	8006a0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d10e      	bne.n	8006512 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064fe:	2b40      	cmp	r3, #64	; 0x40
 8006500:	d107      	bne.n	8006512 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800650a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f8fe 	bl	800670e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b20      	cmp	r3, #32
 800651e:	d10e      	bne.n	800653e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	2b20      	cmp	r3, #32
 800652c:	d107      	bne.n	800653e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f06f 0220 	mvn.w	r2, #32
 8006536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fa53 	bl	80069e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800653e:	bf00      	nop
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_TIM_ConfigClockSource+0x18>
 800655a:	2302      	movs	r3, #2
 800655c:	e0b5      	b.n	80066ca <HAL_TIM_ConfigClockSource+0x184>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800657c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006580:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006588:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659a:	d03e      	beq.n	800661a <HAL_TIM_ConfigClockSource+0xd4>
 800659c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a0:	f200 8087 	bhi.w	80066b2 <HAL_TIM_ConfigClockSource+0x16c>
 80065a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a8:	f000 8085 	beq.w	80066b6 <HAL_TIM_ConfigClockSource+0x170>
 80065ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b0:	d87f      	bhi.n	80066b2 <HAL_TIM_ConfigClockSource+0x16c>
 80065b2:	2b70      	cmp	r3, #112	; 0x70
 80065b4:	d01a      	beq.n	80065ec <HAL_TIM_ConfigClockSource+0xa6>
 80065b6:	2b70      	cmp	r3, #112	; 0x70
 80065b8:	d87b      	bhi.n	80066b2 <HAL_TIM_ConfigClockSource+0x16c>
 80065ba:	2b60      	cmp	r3, #96	; 0x60
 80065bc:	d050      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0x11a>
 80065be:	2b60      	cmp	r3, #96	; 0x60
 80065c0:	d877      	bhi.n	80066b2 <HAL_TIM_ConfigClockSource+0x16c>
 80065c2:	2b50      	cmp	r3, #80	; 0x50
 80065c4:	d03c      	beq.n	8006640 <HAL_TIM_ConfigClockSource+0xfa>
 80065c6:	2b50      	cmp	r3, #80	; 0x50
 80065c8:	d873      	bhi.n	80066b2 <HAL_TIM_ConfigClockSource+0x16c>
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d058      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x13a>
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d86f      	bhi.n	80066b2 <HAL_TIM_ConfigClockSource+0x16c>
 80065d2:	2b30      	cmp	r3, #48	; 0x30
 80065d4:	d064      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x15a>
 80065d6:	2b30      	cmp	r3, #48	; 0x30
 80065d8:	d86b      	bhi.n	80066b2 <HAL_TIM_ConfigClockSource+0x16c>
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d060      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x15a>
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d867      	bhi.n	80066b2 <HAL_TIM_ConfigClockSource+0x16c>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d05c      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x15a>
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d05a      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80065ea:	e062      	b.n	80066b2 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	6899      	ldr	r1, [r3, #8]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f000 f972 	bl	80068e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800660e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	609a      	str	r2, [r3, #8]
      break;
 8006618:	e04e      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6899      	ldr	r1, [r3, #8]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	f000 f95b 	bl	80068e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800663c:	609a      	str	r2, [r3, #8]
      break;
 800663e:	e03b      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	6859      	ldr	r1, [r3, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	461a      	mov	r2, r3
 800664e:	f000 f8cd 	bl	80067ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2150      	movs	r1, #80	; 0x50
 8006658:	4618      	mov	r0, r3
 800665a:	f000 f926 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 800665e:	e02b      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	461a      	mov	r2, r3
 800666e:	f000 f8ec 	bl	800684a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2160      	movs	r1, #96	; 0x60
 8006678:	4618      	mov	r0, r3
 800667a:	f000 f916 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 800667e:	e01b      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6859      	ldr	r1, [r3, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	461a      	mov	r2, r3
 800668e:	f000 f8ad 	bl	80067ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2140      	movs	r1, #64	; 0x40
 8006698:	4618      	mov	r0, r3
 800669a:	f000 f906 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 800669e:	e00b      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f000 f8fd 	bl	80068aa <TIM_ITRx_SetConfig>
        break;
 80066b0:	e002      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80066b2:	bf00      	nop
 80066b4:	e000      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80066b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
	...

08006724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a2a      	ldr	r2, [pc, #168]	; (80067e0 <TIM_Base_SetConfig+0xbc>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d003      	beq.n	8006744 <TIM_Base_SetConfig+0x20>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006742:	d108      	bne.n	8006756 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a21      	ldr	r2, [pc, #132]	; (80067e0 <TIM_Base_SetConfig+0xbc>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00b      	beq.n	8006776 <TIM_Base_SetConfig+0x52>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006764:	d007      	beq.n	8006776 <TIM_Base_SetConfig+0x52>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a1e      	ldr	r2, [pc, #120]	; (80067e4 <TIM_Base_SetConfig+0xc0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_Base_SetConfig+0x52>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <TIM_Base_SetConfig+0xc4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d108      	bne.n	8006788 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	689a      	ldr	r2, [r3, #8]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <TIM_Base_SetConfig+0xbc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d007      	beq.n	80067c4 <TIM_Base_SetConfig+0xa0>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a0b      	ldr	r2, [pc, #44]	; (80067e4 <TIM_Base_SetConfig+0xc0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d003      	beq.n	80067c4 <TIM_Base_SetConfig+0xa0>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a0a      	ldr	r2, [pc, #40]	; (80067e8 <TIM_Base_SetConfig+0xc4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d103      	bne.n	80067cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	615a      	str	r2, [r3, #20]
}
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	40012c00 	.word	0x40012c00
 80067e4:	40014400 	.word	0x40014400
 80067e8:	40014800 	.word	0x40014800

080067ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f023 0201 	bic.w	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 030a 	bic.w	r3, r3, #10
 8006828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800684a:	b480      	push	{r7}
 800684c:	b087      	sub	sp, #28
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	f023 0210 	bic.w	r2, r3, #16
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	031b      	lsls	r3, r3, #12
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4313      	orrs	r3, r2
 800687e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	4313      	orrs	r3, r2
 8006890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	621a      	str	r2, [r3, #32]
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80068c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f043 0307 	orr.w	r3, r3, #7
 80068d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	609a      	str	r2, [r3, #8]
}
 80068d8:	bf00      	nop
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	021a      	lsls	r2, r3, #8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	431a      	orrs	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4313      	orrs	r3, r2
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	bf00      	nop
 800691a:	371c      	adds	r7, #28
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e04a      	b.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d108      	bne.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800696c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a12      	ldr	r2, [pc, #72]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d10c      	bne.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40012c00 	.word	0x40012c00

080069e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <LL_RCC_GetUSARTClockSource>:
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4013      	ands	r3, r2
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e042      	b.n	8006ad8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d106      	bne.n	8006a6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fb fd0d 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2224      	movs	r2, #36	; 0x24
 8006a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0201 	bic.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fb16 	bl	80070b4 <UART_SetConfig>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e022      	b.n	8006ad8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fc48 	bl	8007330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fccf 	bl	8007474 <UART_CheckIdleState>
 8006ad6:	4603      	mov	r3, r0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08a      	sub	sp, #40	; 0x28
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	4613      	mov	r3, r2
 8006aee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006af6:	2b20      	cmp	r3, #32
 8006af8:	f040 8083 	bne.w	8006c02 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_UART_Transmit+0x28>
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e07b      	b.n	8006c04 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <HAL_UART_Transmit+0x3a>
 8006b16:	2302      	movs	r3, #2
 8006b18:	e074      	b.n	8006c04 <HAL_UART_Transmit+0x124>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2221      	movs	r2, #33	; 0x21
 8006b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b32:	f7fb fe8f 	bl	8002854 <HAL_GetTick>
 8006b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	88fa      	ldrh	r2, [r7, #6]
 8006b3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	88fa      	ldrh	r2, [r7, #6]
 8006b44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b50:	d108      	bne.n	8006b64 <HAL_UART_Transmit+0x84>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	61bb      	str	r3, [r7, #24]
 8006b62:	e003      	b.n	8006b6c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006b74:	e02c      	b.n	8006bd0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2180      	movs	r1, #128	; 0x80
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 fcc2 	bl	800750a <UART_WaitOnFlagUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e039      	b.n	8006c04 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ba4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	3302      	adds	r3, #2
 8006baa:	61bb      	str	r3, [r7, #24]
 8006bac:	e007      	b.n	8006bbe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1cc      	bne.n	8006b76 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2200      	movs	r2, #0
 8006be4:	2140      	movs	r1, #64	; 0x40
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 fc8f 	bl	800750a <UART_WaitOnFlagUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e006      	b.n	8006c04 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e000      	b.n	8006c04 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006c02:	2302      	movs	r3, #2
  }
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3720      	adds	r7, #32
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c32:	4013      	ands	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d118      	bne.n	8006c6e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d013      	beq.n	8006c6e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f003 0320 	and.w	r3, r3, #32
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 81fb 	beq.w	800705a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
      }
      return;
 8006c6c:	e1f5      	b.n	800705a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80ef 	beq.w	8006e54 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4b73      	ldr	r3, [pc, #460]	; (8006e48 <HAL_UART_IRQHandler+0x23c>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d105      	bne.n	8006c8c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c80:	69ba      	ldr	r2, [r7, #24]
 8006c82:	4b72      	ldr	r3, [pc, #456]	; (8006e4c <HAL_UART_IRQHandler+0x240>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 80e4 	beq.w	8006e54 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d010      	beq.n	8006cb8 <HAL_UART_IRQHandler+0xac>
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cae:	f043 0201 	orr.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d010      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xd8>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cda:	f043 0204 	orr.w	r2, r3, #4
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f003 0304 	and.w	r3, r3, #4
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d010      	beq.n	8006d10 <HAL_UART_IRQHandler+0x104>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2204      	movs	r2, #4
 8006cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d06:	f043 0202 	orr.w	r2, r3, #2
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d015      	beq.n	8006d46 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f003 0320 	and.w	r3, r3, #32
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d104      	bne.n	8006d2e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4b48      	ldr	r3, [pc, #288]	; (8006e48 <HAL_UART_IRQHandler+0x23c>)
 8006d28:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2208      	movs	r2, #8
 8006d34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3c:	f043 0208 	orr.w	r2, r3, #8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d011      	beq.n	8006d74 <HAL_UART_IRQHandler+0x168>
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00c      	beq.n	8006d74 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d6a:	f043 0220 	orr.w	r2, r3, #32
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 816f 	beq.w	800705e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d011      	beq.n	8006dae <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d004      	beq.n	8006dce <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d031      	beq.n	8006e32 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fc1b 	bl	800760a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d123      	bne.n	8006e2a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d013      	beq.n	8006e22 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dfe:	4a14      	ldr	r2, [pc, #80]	; (8006e50 <HAL_UART_IRQHandler+0x244>)
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fd f9dc 	bl	80041c4 <HAL_DMA_Abort_IT>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d017      	beq.n	8006e42 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e20:	e00f      	b.n	8006e42 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f930 	bl	8007088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e28:	e00b      	b.n	8006e42 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f92c 	bl	8007088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e30:	e007      	b.n	8006e42 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f928 	bl	8007088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006e40:	e10d      	b.n	800705e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e42:	bf00      	nop
    return;
 8006e44:	e10b      	b.n	800705e <HAL_UART_IRQHandler+0x452>
 8006e46:	bf00      	nop
 8006e48:	10000001 	.word	0x10000001
 8006e4c:	04000120 	.word	0x04000120
 8006e50:	0800766f 	.word	0x0800766f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	f040 80ab 	bne.w	8006fb4 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80a5 	beq.w	8006fb4 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 809f 	beq.w	8006fb4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2210      	movs	r2, #16
 8006e7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	d155      	bne.n	8006f38 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006e96:	893b      	ldrh	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 80e2 	beq.w	8007062 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ea4:	893a      	ldrh	r2, [r7, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	f080 80db 	bcs.w	8007062 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	893a      	ldrh	r2, [r7, #8]
 8006eb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d12b      	bne.n	8006f1c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ed2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689a      	ldr	r2, [r3, #8]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0201 	bic.w	r2, r2, #1
 8006ee2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ef2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 0210 	bic.w	r2, r2, #16
 8006f10:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fd f8f5 	bl	8004106 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f8b3 	bl	800709c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f36:	e094      	b.n	8007062 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 8087 	beq.w	8007066 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8006f58:	897b      	ldrh	r3, [r7, #10]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8083 	beq.w	8007066 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f6e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f7e:	f023 0301 	bic.w	r3, r3, #1
 8006f82:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0210 	bic.w	r2, r2, #16
 8006fa6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fa8:	897b      	ldrh	r3, [r7, #10]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f875 	bl	800709c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006fb2:	e058      	b.n	8007066 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00d      	beq.n	8006fda <HAL_UART_IRQHandler+0x3ce>
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d008      	beq.n	8006fda <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fb7b 	bl	80076ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006fd8:	e048      	b.n	800706c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d012      	beq.n	800700a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d104      	bne.n	8006ff8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d034      	beq.n	800706a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
    }
    return;
 8007008:	e02f      	b.n	800706a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_UART_IRQHandler+0x41a>
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb3b 	bl	800769a <UART_EndTransmit_IT>
    return;
 8007024:	e022      	b.n	800706c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <HAL_UART_IRQHandler+0x436>
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fb5b 	bl	80076f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007040:	e014      	b.n	800706c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00f      	beq.n	800706c <HAL_UART_IRQHandler+0x460>
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	da0c      	bge.n	800706c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fb45 	bl	80076e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007058:	e008      	b.n	800706c <HAL_UART_IRQHandler+0x460>
      return;
 800705a:	bf00      	nop
 800705c:	e006      	b.n	800706c <HAL_UART_IRQHandler+0x460>
    return;
 800705e:	bf00      	nop
 8007060:	e004      	b.n	800706c <HAL_UART_IRQHandler+0x460>
      return;
 8007062:	bf00      	nop
 8007064:	e002      	b.n	800706c <HAL_UART_IRQHandler+0x460>
      return;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <HAL_UART_IRQHandler+0x460>
    return;
 800706a:	bf00      	nop
  }
}
 800706c:	3720      	adds	r7, #32
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop

08007074 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4b90      	ldr	r3, [pc, #576]	; (8007320 <UART_SetConfig+0x26c>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	6979      	ldr	r1, [r7, #20]
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800711c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	6979      	ldr	r1, [r7, #20]
 8007126:	430b      	orrs	r3, r1
 8007128:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	f023 010f 	bic.w	r1, r3, #15
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a77      	ldr	r2, [pc, #476]	; (8007324 <UART_SetConfig+0x270>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d11f      	bne.n	800718a <UART_SetConfig+0xd6>
 800714a:	2003      	movs	r0, #3
 800714c:	f7ff fc68 	bl	8006a20 <LL_RCC_GetUSARTClockSource>
 8007150:	4603      	mov	r3, r0
 8007152:	2b03      	cmp	r3, #3
 8007154:	d816      	bhi.n	8007184 <UART_SetConfig+0xd0>
 8007156:	a201      	add	r2, pc, #4	; (adr r2, 800715c <UART_SetConfig+0xa8>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	0800716d 	.word	0x0800716d
 8007160:	08007179 	.word	0x08007179
 8007164:	08007173 	.word	0x08007173
 8007168:	0800717f 	.word	0x0800717f
 800716c:	2301      	movs	r3, #1
 800716e:	77fb      	strb	r3, [r7, #31]
 8007170:	e00d      	b.n	800718e <UART_SetConfig+0xda>
 8007172:	2302      	movs	r3, #2
 8007174:	77fb      	strb	r3, [r7, #31]
 8007176:	e00a      	b.n	800718e <UART_SetConfig+0xda>
 8007178:	2304      	movs	r3, #4
 800717a:	77fb      	strb	r3, [r7, #31]
 800717c:	e007      	b.n	800718e <UART_SetConfig+0xda>
 800717e:	2308      	movs	r3, #8
 8007180:	77fb      	strb	r3, [r7, #31]
 8007182:	e004      	b.n	800718e <UART_SetConfig+0xda>
 8007184:	2310      	movs	r3, #16
 8007186:	77fb      	strb	r3, [r7, #31]
 8007188:	e001      	b.n	800718e <UART_SetConfig+0xda>
 800718a:	2310      	movs	r3, #16
 800718c:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007196:	d160      	bne.n	800725a <UART_SetConfig+0x1a6>
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007198:	7ffb      	ldrb	r3, [r7, #31]
 800719a:	3b01      	subs	r3, #1
 800719c:	2b07      	cmp	r3, #7
 800719e:	d822      	bhi.n	80071e6 <UART_SetConfig+0x132>
 80071a0:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <UART_SetConfig+0xf4>)
 80071a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a6:	bf00      	nop
 80071a8:	080071c9 	.word	0x080071c9
 80071ac:	080071d1 	.word	0x080071d1
 80071b0:	080071e7 	.word	0x080071e7
 80071b4:	080071d7 	.word	0x080071d7
 80071b8:	080071e7 	.word	0x080071e7
 80071bc:	080071e7 	.word	0x080071e7
 80071c0:	080071e7 	.word	0x080071e7
 80071c4:	080071df 	.word	0x080071df
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071c8:	f7fe fc80 	bl	8005acc <HAL_RCC_GetPCLK2Freq>
 80071cc:	61b8      	str	r0, [r7, #24]
        break;
 80071ce:	e00f      	b.n	80071f0 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071d0:	4b55      	ldr	r3, [pc, #340]	; (8007328 <UART_SetConfig+0x274>)
 80071d2:	61bb      	str	r3, [r7, #24]
        break;
 80071d4:	e00c      	b.n	80071f0 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071d6:	f7fe fbf9 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 80071da:	61b8      	str	r0, [r7, #24]
        break;
 80071dc:	e008      	b.n	80071f0 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071e2:	61bb      	str	r3, [r7, #24]
        break;
 80071e4:	e004      	b.n	80071f0 <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	77bb      	strb	r3, [r7, #30]
        break;
 80071ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8080 	beq.w	80072f8 <UART_SetConfig+0x244>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	4a4b      	ldr	r2, [pc, #300]	; (800732c <UART_SetConfig+0x278>)
 80071fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007202:	461a      	mov	r2, r3
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	fbb3 f3f2 	udiv	r3, r3, r2
 800720a:	005a      	lsls	r2, r3, #1
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	085b      	lsrs	r3, r3, #1
 8007212:	441a      	add	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	b29b      	uxth	r3, r3
 800721e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b0f      	cmp	r3, #15
 8007224:	d916      	bls.n	8007254 <UART_SetConfig+0x1a0>
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722c:	d212      	bcs.n	8007254 <UART_SetConfig+0x1a0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	b29b      	uxth	r3, r3
 8007232:	f023 030f 	bic.w	r3, r3, #15
 8007236:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	085b      	lsrs	r3, r3, #1
 800723c:	b29b      	uxth	r3, r3
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	b29a      	uxth	r2, r3
 8007244:	89fb      	ldrh	r3, [r7, #14]
 8007246:	4313      	orrs	r3, r2
 8007248:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	89fa      	ldrh	r2, [r7, #14]
 8007250:	60da      	str	r2, [r3, #12]
 8007252:	e051      	b.n	80072f8 <UART_SetConfig+0x244>
      }
      else
      {
        ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	77bb      	strb	r3, [r7, #30]
 8007258:	e04e      	b.n	80072f8 <UART_SetConfig+0x244>
      }
    }
  }
  else
  {
    switch (clocksource)
 800725a:	7ffb      	ldrb	r3, [r7, #31]
 800725c:	3b01      	subs	r3, #1
 800725e:	2b07      	cmp	r3, #7
 8007260:	d821      	bhi.n	80072a6 <UART_SetConfig+0x1f2>
 8007262:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <UART_SetConfig+0x1b4>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	08007289 	.word	0x08007289
 800726c:	08007291 	.word	0x08007291
 8007270:	080072a7 	.word	0x080072a7
 8007274:	08007297 	.word	0x08007297
 8007278:	080072a7 	.word	0x080072a7
 800727c:	080072a7 	.word	0x080072a7
 8007280:	080072a7 	.word	0x080072a7
 8007284:	0800729f 	.word	0x0800729f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007288:	f7fe fc20 	bl	8005acc <HAL_RCC_GetPCLK2Freq>
 800728c:	61b8      	str	r0, [r7, #24]
        break;
 800728e:	e00f      	b.n	80072b0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007290:	4b25      	ldr	r3, [pc, #148]	; (8007328 <UART_SetConfig+0x274>)
 8007292:	61bb      	str	r3, [r7, #24]
        break;
 8007294:	e00c      	b.n	80072b0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007296:	f7fe fb99 	bl	80059cc <HAL_RCC_GetSysClockFreq>
 800729a:	61b8      	str	r0, [r7, #24]
        break;
 800729c:	e008      	b.n	80072b0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800729e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072a2:	61bb      	str	r3, [r7, #24]
        break;
 80072a4:	e004      	b.n	80072b0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	77bb      	strb	r3, [r7, #30]
        break;
 80072ae:	bf00      	nop
    }

    if (pclk != 0U)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d020      	beq.n	80072f8 <UART_SetConfig+0x244>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	4a1c      	ldr	r2, [pc, #112]	; (800732c <UART_SetConfig+0x278>)
 80072bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c0:	461a      	mov	r2, r3
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	441a      	add	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d8:	b29b      	uxth	r3, r3
 80072da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	2b0f      	cmp	r3, #15
 80072e0:	d908      	bls.n	80072f4 <UART_SetConfig+0x240>
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e8:	d204      	bcs.n	80072f4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = usartdiv;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	60da      	str	r2, [r3, #12]
 80072f2:	e001      	b.n	80072f8 <UART_SetConfig+0x244>
      }
      else
      {
        ret = HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007314:	7fbb      	ldrb	r3, [r7, #30]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3720      	adds	r7, #32
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	cfff69f3 	.word	0xcfff69f3
 8007324:	40013800 	.word	0x40013800
 8007328:	00f42400 	.word	0x00f42400
 800732c:	0800adcc 	.word	0x0800adcc

08007330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00a      	beq.n	800735a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	f003 0320 	and.w	r3, r3, #32
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d01a      	beq.n	8007446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800742e:	d10a      	bne.n	8007446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	605a      	str	r2, [r3, #4]
  }
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af02      	add	r7, sp, #8
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007484:	f7fb f9e6 	bl	8002854 <HAL_GetTick>
 8007488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b08      	cmp	r3, #8
 8007496:	d10e      	bne.n	80074b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f82f 	bl	800750a <UART_WaitOnFlagUntilTimeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e025      	b.n	8007502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0304 	and.w	r3, r3, #4
 80074c0:	2b04      	cmp	r3, #4
 80074c2:	d10e      	bne.n	80074e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f819 	bl	800750a <UART_WaitOnFlagUntilTimeout>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e00f      	b.n	8007502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	603b      	str	r3, [r7, #0]
 8007516:	4613      	mov	r3, r2
 8007518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800751a:	e062      	b.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	d05e      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007524:	f7fb f996 	bl	8002854 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	429a      	cmp	r2, r3
 8007532:	d302      	bcc.n	800753a <UART_WaitOnFlagUntilTimeout+0x30>
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d11d      	bne.n	8007576 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007548:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0201 	bic.w	r2, r2, #1
 8007558:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2220      	movs	r2, #32
 8007566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e045      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d02e      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800758e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007592:	d126      	bne.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800759c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0201 	bic.w	r2, r2, #1
 80075bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e00f      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69da      	ldr	r2, [r3, #28]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4013      	ands	r3, r2
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	bf0c      	ite	eq
 80075f2:	2301      	moveq	r3, #1
 80075f4:	2300      	movne	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d08d      	beq.n	800751c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007620:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007630:	f023 0301 	bic.w	r3, r3, #1
 8007634:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800763a:	2b01      	cmp	r3, #1
 800763c:	d107      	bne.n	800764e <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0210 	bic.w	r2, r2, #16
 800764c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fcfb 	bl	8007088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7ff fcd7 	bl	8007074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b083      	sub	sp, #12
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr

0800770a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800770a:	b480      	push	{r7}
 800770c:	b085      	sub	sp, #20
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_UARTEx_DisableFifoMode+0x16>
 800771c:	2302      	movs	r3, #2
 800771e:	e027      	b.n	8007770 <HAL_UARTEx_DisableFifoMode+0x66>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2224      	movs	r2, #36	; 0x24
 800772c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 0201 	bic.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800774e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007790:	2302      	movs	r3, #2
 8007792:	e02d      	b.n	80077f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2224      	movs	r2, #36	; 0x24
 80077a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0201 	bic.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f84f 	bl	8007874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800780c:	2302      	movs	r3, #2
 800780e:	e02d      	b.n	800786c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2224      	movs	r2, #36	; 0x24
 800781c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 f811 	bl	8007874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007880:	2b00      	cmp	r3, #0
 8007882:	d108      	bne.n	8007896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007894:	e031      	b.n	80078fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007896:	2308      	movs	r3, #8
 8007898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800789a:	2308      	movs	r3, #8
 800789c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	0e5b      	lsrs	r3, r3, #25
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	0f5b      	lsrs	r3, r3, #29
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 0307 	and.w	r3, r3, #7
 80078bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	7b3a      	ldrb	r2, [r7, #12]
 80078c2:	4911      	ldr	r1, [pc, #68]	; (8007908 <UARTEx_SetNbDataToProcess+0x94>)
 80078c4:	5c8a      	ldrb	r2, [r1, r2]
 80078c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ca:	7b3a      	ldrb	r2, [r7, #12]
 80078cc:	490f      	ldr	r1, [pc, #60]	; (800790c <UARTEx_SetNbDataToProcess+0x98>)
 80078ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	7b7a      	ldrb	r2, [r7, #13]
 80078e0:	4909      	ldr	r1, [pc, #36]	; (8007908 <UARTEx_SetNbDataToProcess+0x94>)
 80078e2:	5c8a      	ldrb	r2, [r1, r2]
 80078e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078e8:	7b7a      	ldrb	r2, [r7, #13]
 80078ea:	4908      	ldr	r1, [pc, #32]	; (800790c <UARTEx_SetNbDataToProcess+0x98>)
 80078ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	0800ade4 	.word	0x0800ade4
 800790c:	0800adec 	.word	0x0800adec

08007910 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007916:	2300      	movs	r3, #0
 8007918:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	2218      	movs	r2, #24
 8007920:	2100      	movs	r1, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f000 ff45 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007928:	233f      	movs	r3, #63	; 0x3f
 800792a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800792c:	2381      	movs	r3, #129	; 0x81
 800792e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007930:	1dfb      	adds	r3, r7, #7
 8007932:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007934:	2301      	movs	r3, #1
 8007936:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007938:	f107 0308 	add.w	r3, r7, #8
 800793c:	2100      	movs	r1, #0
 800793e:	4618      	mov	r0, r3
 8007940:	f001 fa1a 	bl	8008d78 <hci_send_req>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	da01      	bge.n	800794e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800794a:	23ff      	movs	r3, #255	; 0xff
 800794c:	e000      	b.n	8007950 <aci_gap_set_non_discoverable+0x40>
  return status;
 800794e:	79fb      	ldrb	r3, [r7, #7]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3720      	adds	r7, #32
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007958:	b5b0      	push	{r4, r5, r7, lr}
 800795a:	b0ce      	sub	sp, #312	; 0x138
 800795c:	af00      	add	r7, sp, #0
 800795e:	4605      	mov	r5, r0
 8007960:	460c      	mov	r4, r1
 8007962:	4610      	mov	r0, r2
 8007964:	4619      	mov	r1, r3
 8007966:	1dfb      	adds	r3, r7, #7
 8007968:	462a      	mov	r2, r5
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	1d3b      	adds	r3, r7, #4
 800796e:	4622      	mov	r2, r4
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	1cbb      	adds	r3, r7, #2
 8007974:	4602      	mov	r2, r0
 8007976:	801a      	strh	r2, [r3, #0]
 8007978:	1dbb      	adds	r3, r7, #6
 800797a:	460a      	mov	r2, r1
 800797c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800797e:	f107 0310 	add.w	r3, r7, #16
 8007982:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007986:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800798a:	3308      	adds	r3, #8
 800798c:	f107 0210 	add.w	r2, r7, #16
 8007990:	4413      	add	r3, r2
 8007992:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007996:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800799a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800799e:	4413      	add	r3, r2
 80079a0:	3309      	adds	r3, #9
 80079a2:	f107 0210 	add.w	r2, r7, #16
 80079a6:	4413      	add	r3, r2
 80079a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079ac:	f107 030f 	add.w	r3, r7, #15
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80079ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079be:	1dfa      	adds	r2, r7, #7
 80079c0:	7812      	ldrb	r2, [r2, #0]
 80079c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079c8:	3301      	adds	r3, #1
 80079ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80079ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079d2:	1d3a      	adds	r2, r7, #4
 80079d4:	8812      	ldrh	r2, [r2, #0]
 80079d6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80079da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079de:	3302      	adds	r3, #2
 80079e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80079e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079e8:	1cba      	adds	r2, r7, #2
 80079ea:	8812      	ldrh	r2, [r2, #0]
 80079ec:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80079f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079f4:	3302      	adds	r3, #2
 80079f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80079fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079fe:	1dba      	adds	r2, r7, #6
 8007a00:	7812      	ldrb	r2, [r2, #0]
 8007a02:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a08:	3301      	adds	r3, #1
 8007a0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007a0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a12:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007a16:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007a22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a26:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007a2a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a30:	3301      	adds	r3, #1
 8007a32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007a36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007a40:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 fea4 	bl	8008792 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007a4a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007a4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007a52:	4413      	add	r3, r2
 8007a54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007a58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a5c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007a60:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007a62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a66:	3301      	adds	r3, #1
 8007a68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007a6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a70:	3301      	adds	r3, #1
 8007a72:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007a76:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fe89 	bl	8008792 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007a80:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007a84:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007a88:	4413      	add	r3, r2
 8007a8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a92:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007a96:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007aaa:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007aac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ab0:	3302      	adds	r3, #2
 8007ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007aba:	2218      	movs	r2, #24
 8007abc:	2100      	movs	r1, #0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fe77 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ac4:	233f      	movs	r3, #63	; 0x3f
 8007ac6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007aca:	2383      	movs	r3, #131	; 0x83
 8007acc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ad0:	f107 0310 	add.w	r3, r7, #16
 8007ad4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007adc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ae0:	f107 030f 	add.w	r3, r7, #15
 8007ae4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007af2:	2100      	movs	r1, #0
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 f93f 	bl	8008d78 <hci_send_req>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da01      	bge.n	8007b04 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007b00:	23ff      	movs	r3, #255	; 0xff
 8007b02:	e002      	b.n	8007b0a <aci_gap_set_discoverable+0x1b2>
  return status;
 8007b04:	f107 030f 	add.w	r3, r7, #15
 8007b08:	781b      	ldrb	r3, [r3, #0]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bdb0      	pop	{r4, r5, r7, pc}

08007b14 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b0cc      	sub	sp, #304	; 0x130
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	1dfb      	adds	r3, r7, #7
 8007b1e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007b20:	f107 0310 	add.w	r3, r7, #16
 8007b24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b28:	f107 030f 	add.w	r3, r7, #15
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007b36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3a:	1dfa      	adds	r2, r7, #7
 8007b3c:	7812      	ldrb	r2, [r2, #0]
 8007b3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b44:	3301      	adds	r3, #1
 8007b46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b4e:	2218      	movs	r2, #24
 8007b50:	2100      	movs	r1, #0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fe2d 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b58:	233f      	movs	r3, #63	; 0x3f
 8007b5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007b5e:	2385      	movs	r3, #133	; 0x85
 8007b60:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b64:	f107 0310 	add.w	r3, r7, #16
 8007b68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b74:	f107 030f 	add.w	r3, r7, #15
 8007b78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b86:	2100      	movs	r1, #0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f001 f8f5 	bl	8008d78 <hci_send_req>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da01      	bge.n	8007b98 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007b94:	23ff      	movs	r3, #255	; 0xff
 8007b96:	e002      	b.n	8007b9e <aci_gap_set_io_capability+0x8a>
  return status;
 8007b98:	f107 030f 	add.w	r3, r7, #15
 8007b9c:	781b      	ldrb	r3, [r3, #0]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007ba8:	b5b0      	push	{r4, r5, r7, lr}
 8007baa:	b0cc      	sub	sp, #304	; 0x130
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4605      	mov	r5, r0
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	1dfb      	adds	r3, r7, #7
 8007bb8:	462a      	mov	r2, r5
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	1dbb      	adds	r3, r7, #6
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	701a      	strb	r2, [r3, #0]
 8007bc2:	1d7b      	adds	r3, r7, #5
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	701a      	strb	r2, [r3, #0]
 8007bc8:	1d3b      	adds	r3, r7, #4
 8007bca:	460a      	mov	r2, r1
 8007bcc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007bce:	f107 0310 	add.w	r3, r7, #16
 8007bd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007bd6:	f107 030f 	add.w	r3, r7, #15
 8007bda:	2200      	movs	r2, #0
 8007bdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be8:	1dfa      	adds	r2, r7, #7
 8007bea:	7812      	ldrb	r2, [r2, #0]
 8007bec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007bee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bfc:	1dba      	adds	r2, r7, #6
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c06:	3301      	adds	r3, #1
 8007c08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c10:	1d7a      	adds	r2, r7, #5
 8007c12:	7812      	ldrb	r2, [r2, #0]
 8007c14:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c24:	1d3a      	adds	r2, r7, #4
 8007c26:	7812      	ldrb	r2, [r2, #0]
 8007c28:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007c2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c38:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007c3c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c42:	3301      	adds	r3, #1
 8007c44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007c50:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c56:	3301      	adds	r3, #1
 8007c58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c60:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007c64:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c74:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007c78:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007c7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c80:	3304      	adds	r3, #4
 8007c82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c8a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007c8e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c94:	3301      	adds	r3, #1
 8007c96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c9e:	2218      	movs	r2, #24
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fd85 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ca8:	233f      	movs	r3, #63	; 0x3f
 8007caa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007cae:	2386      	movs	r3, #134	; 0x86
 8007cb0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007cb4:	f107 0310 	add.w	r3, r7, #16
 8007cb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007cc4:	f107 030f 	add.w	r3, r7, #15
 8007cc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f001 f84d 	bl	8008d78 <hci_send_req>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	da01      	bge.n	8007ce8 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007ce4:	23ff      	movs	r3, #255	; 0xff
 8007ce6:	e002      	b.n	8007cee <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007ce8:	f107 030f 	add.w	r3, r7, #15
 8007cec:	781b      	ldrb	r3, [r3, #0]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bdb0      	pop	{r4, r5, r7, pc}

08007cf8 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007cf8:	b590      	push	{r4, r7, lr}
 8007cfa:	b0cd      	sub	sp, #308	; 0x134
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4604      	mov	r4, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	4611      	mov	r1, r2
 8007d04:	463a      	mov	r2, r7
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	1dfb      	adds	r3, r7, #7
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	701a      	strb	r2, [r3, #0]
 8007d0e:	1dbb      	adds	r3, r7, #6
 8007d10:	4602      	mov	r2, r0
 8007d12:	701a      	strb	r2, [r3, #0]
 8007d14:	1d7b      	adds	r3, r7, #5
 8007d16:	460a      	mov	r2, r1
 8007d18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007d1a:	f107 0310 	add.w	r3, r7, #16
 8007d1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007d22:	f107 0308 	add.w	r3, r7, #8
 8007d26:	2207      	movs	r2, #7
 8007d28:	2100      	movs	r1, #0
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f000 fd41 	bl	80087b2 <Osal_MemSet>
  int index_input = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d3a:	1dfa      	adds	r2, r7, #7
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d44:	3301      	adds	r3, #1
 8007d46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4e:	1dba      	adds	r2, r7, #6
 8007d50:	7812      	ldrb	r2, [r2, #0]
 8007d52:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d58:	3301      	adds	r3, #1
 8007d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d62:	1d7a      	adds	r2, r7, #5
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d76:	2218      	movs	r2, #24
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fd19 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d80:	233f      	movs	r3, #63	; 0x3f
 8007d82:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007d86:	238a      	movs	r3, #138	; 0x8a
 8007d88:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d8c:	f107 0310 	add.w	r3, r7, #16
 8007d90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007d9c:	f107 0308 	add.w	r3, r7, #8
 8007da0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007da4:	2307      	movs	r3, #7
 8007da6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 ffe1 	bl	8008d78 <hci_send_req>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	da01      	bge.n	8007dc0 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007dbc:	23ff      	movs	r3, #255	; 0xff
 8007dbe:	e021      	b.n	8007e04 <aci_gap_init+0x10c>
  if ( resp.Status )
 8007dc0:	f107 0308 	add.w	r3, r7, #8
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <aci_gap_init+0xda>
    return resp.Status;
 8007dca:	f107 0308 	add.w	r3, r7, #8
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	e018      	b.n	8007e04 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8007dd2:	f107 0308 	add.w	r3, r7, #8
 8007dd6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	463b      	mov	r3, r7
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007de2:	f107 0308 	add.w	r3, r7, #8
 8007de6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007df0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007df2:	f107 0308 	add.w	r3, r7, #8
 8007df6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007e00:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd90      	pop	{r4, r7, pc}

08007e0e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b0cc      	sub	sp, #304	; 0x130
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	4602      	mov	r2, r0
 8007e16:	463b      	mov	r3, r7
 8007e18:	6019      	str	r1, [r3, #0]
 8007e1a:	1dfb      	adds	r3, r7, #7
 8007e1c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007e1e:	f107 0310 	add.w	r3, r7, #16
 8007e22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e26:	f107 030f 	add.w	r3, r7, #15
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e38:	1dfa      	adds	r2, r7, #7
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e42:	3301      	adds	r3, #1
 8007e44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4c:	1c58      	adds	r0, r3, #1
 8007e4e:	1dfb      	adds	r3, r7, #7
 8007e50:	781a      	ldrb	r2, [r3, #0]
 8007e52:	463b      	mov	r3, r7
 8007e54:	6819      	ldr	r1, [r3, #0]
 8007e56:	f000 fc9c 	bl	8008792 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007e5a:	1dfb      	adds	r3, r7, #7
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007e62:	4413      	add	r3, r2
 8007e64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e6c:	2218      	movs	r2, #24
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fc9e 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e76:	233f      	movs	r3, #63	; 0x3f
 8007e78:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007e7c:	238e      	movs	r3, #142	; 0x8e
 8007e7e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e82:	f107 0310 	add.w	r3, r7, #16
 8007e86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e92:	f107 030f 	add.w	r3, r7, #15
 8007e96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ea0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 ff66 	bl	8008d78 <hci_send_req>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da01      	bge.n	8007eb6 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8007eb2:	23ff      	movs	r3, #255	; 0xff
 8007eb4:	e002      	b.n	8007ebc <aci_gap_update_adv_data+0xae>
  return status;
 8007eb6:	f107 030f 	add.w	r3, r7, #15
 8007eba:	781b      	ldrb	r3, [r3, #0]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b088      	sub	sp, #32
 8007eca:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ed0:	f107 0308 	add.w	r3, r7, #8
 8007ed4:	2218      	movs	r2, #24
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 fc6a 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ede:	233f      	movs	r3, #63	; 0x3f
 8007ee0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007ee2:	2392      	movs	r3, #146	; 0x92
 8007ee4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ee6:	1dfb      	adds	r3, r7, #7
 8007ee8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007eee:	f107 0308 	add.w	r3, r7, #8
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 ff3f 	bl	8008d78 <hci_send_req>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	da01      	bge.n	8007f04 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f00:	23ff      	movs	r3, #255	; 0xff
 8007f02:	e000      	b.n	8007f06 <aci_gap_configure_whitelist+0x40>
  return status;
 8007f04:	79fb      	ldrb	r3, [r7, #7]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b088      	sub	sp, #32
 8007f12:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007f14:	2300      	movs	r3, #0
 8007f16:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f18:	f107 0308 	add.w	r3, r7, #8
 8007f1c:	2218      	movs	r2, #24
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fc46 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f26:	233f      	movs	r3, #63	; 0x3f
 8007f28:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007f2a:	f240 1301 	movw	r3, #257	; 0x101
 8007f2e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007f30:	1dfb      	adds	r3, r7, #7
 8007f32:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f34:	2301      	movs	r3, #1
 8007f36:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f38:	f107 0308 	add.w	r3, r7, #8
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 ff1a 	bl	8008d78 <hci_send_req>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da01      	bge.n	8007f4e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007f4a:	23ff      	movs	r3, #255	; 0xff
 8007f4c:	e000      	b.n	8007f50 <aci_gatt_init+0x42>
  return status;
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3720      	adds	r7, #32
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007f58:	b590      	push	{r4, r7, lr}
 8007f5a:	b0cf      	sub	sp, #316	; 0x13c
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4638      	mov	r0, r7
 8007f62:	6001      	str	r1, [r0, #0]
 8007f64:	4610      	mov	r0, r2
 8007f66:	4619      	mov	r1, r3
 8007f68:	1dfb      	adds	r3, r7, #7
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	701a      	strb	r2, [r3, #0]
 8007f6e:	1dbb      	adds	r3, r7, #6
 8007f70:	4602      	mov	r2, r0
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	1d7b      	adds	r3, r7, #5
 8007f76:	460a      	mov	r2, r1
 8007f78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007f7a:	f107 0310 	add.w	r3, r7, #16
 8007f7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007f82:	1dfb      	adds	r3, r7, #7
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d007      	beq.n	8007f9a <aci_gatt_add_service+0x42>
 8007f8a:	1dfb      	adds	r3, r7, #7
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d101      	bne.n	8007f96 <aci_gatt_add_service+0x3e>
 8007f92:	2311      	movs	r3, #17
 8007f94:	e002      	b.n	8007f9c <aci_gatt_add_service+0x44>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e000      	b.n	8007f9c <aci_gatt_add_service+0x44>
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	f107 0210 	add.w	r2, r7, #16
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007fa6:	f107 030c 	add.w	r3, r7, #12
 8007faa:	2203      	movs	r2, #3
 8007fac:	2100      	movs	r1, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fbff 	bl	80087b2 <Osal_MemSet>
  int index_input = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007fba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fbe:	1dfa      	adds	r2, r7, #7
 8007fc0:	7812      	ldrb	r2, [r2, #0]
 8007fc2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fc8:	3301      	adds	r3, #1
 8007fca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007fce:	1dfb      	adds	r3, r7, #7
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d002      	beq.n	8007fdc <aci_gatt_add_service+0x84>
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d004      	beq.n	8007fe4 <aci_gatt_add_service+0x8c>
 8007fda:	e007      	b.n	8007fec <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8007fdc:	2302      	movs	r3, #2
 8007fde:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007fe2:	e005      	b.n	8007ff0 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007fea:	e001      	b.n	8007ff0 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8007fec:	2347      	movs	r3, #71	; 0x47
 8007fee:	e05d      	b.n	80080ac <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007ff0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ff4:	1c58      	adds	r0, r3, #1
 8007ff6:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007ffa:	463b      	mov	r3, r7
 8007ffc:	6819      	ldr	r1, [r3, #0]
 8007ffe:	f000 fbc8 	bl	8008792 <Osal_MemCpy>
    index_input += size;
 8008002:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008006:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800800a:	4413      	add	r3, r2
 800800c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008014:	1dba      	adds	r2, r7, #6
 8008016:	7812      	ldrb	r2, [r2, #0]
 8008018:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800801a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800801e:	3301      	adds	r3, #1
 8008020:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008028:	1d7a      	adds	r2, r7, #5
 800802a:	7812      	ldrb	r2, [r2, #0]
 800802c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800802e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008032:	3301      	adds	r3, #1
 8008034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008038:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800803c:	2218      	movs	r2, #24
 800803e:	2100      	movs	r1, #0
 8008040:	4618      	mov	r0, r3
 8008042:	f000 fbb6 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008046:	233f      	movs	r3, #63	; 0x3f
 8008048:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800804c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008050:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008054:	f107 0310 	add.w	r3, r7, #16
 8008058:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800805c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008060:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008064:	f107 030c 	add.w	r3, r7, #12
 8008068:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800806c:	2303      	movs	r3, #3
 800806e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008072:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008076:	2100      	movs	r1, #0
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fe7d 	bl	8008d78 <hci_send_req>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	da01      	bge.n	8008088 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8008084:	23ff      	movs	r3, #255	; 0xff
 8008086:	e011      	b.n	80080ac <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8008088:	f107 030c 	add.w	r3, r7, #12
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <aci_gatt_add_service+0x142>
    return resp.Status;
 8008092:	f107 030c 	add.w	r3, r7, #12
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	e008      	b.n	80080ac <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800809a:	f107 030c 	add.w	r3, r7, #12
 800809e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80080a8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd90      	pop	{r4, r7, pc}

080080b6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80080b6:	b590      	push	{r4, r7, lr}
 80080b8:	b0d1      	sub	sp, #324	; 0x144
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	4604      	mov	r4, r0
 80080be:	4608      	mov	r0, r1
 80080c0:	f107 0108 	add.w	r1, r7, #8
 80080c4:	600a      	str	r2, [r1, #0]
 80080c6:	4619      	mov	r1, r3
 80080c8:	f107 030e 	add.w	r3, r7, #14
 80080cc:	4622      	mov	r2, r4
 80080ce:	801a      	strh	r2, [r3, #0]
 80080d0:	f107 030d 	add.w	r3, r7, #13
 80080d4:	4602      	mov	r2, r0
 80080d6:	701a      	strb	r2, [r3, #0]
 80080d8:	1dbb      	adds	r3, r7, #6
 80080da:	460a      	mov	r2, r1
 80080dc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80080de:	f107 0318 	add.w	r3, r7, #24
 80080e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80080e6:	f107 030d 	add.w	r3, r7, #13
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d008      	beq.n	8008102 <aci_gatt_add_char+0x4c>
 80080f0:	f107 030d 	add.w	r3, r7, #13
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d101      	bne.n	80080fe <aci_gatt_add_char+0x48>
 80080fa:	2313      	movs	r3, #19
 80080fc:	e002      	b.n	8008104 <aci_gatt_add_char+0x4e>
 80080fe:	2303      	movs	r3, #3
 8008100:	e000      	b.n	8008104 <aci_gatt_add_char+0x4e>
 8008102:	2305      	movs	r3, #5
 8008104:	f107 0218 	add.w	r2, r7, #24
 8008108:	4413      	add	r3, r2
 800810a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800810e:	f107 0314 	add.w	r3, r7, #20
 8008112:	2203      	movs	r2, #3
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f000 fb4b 	bl	80087b2 <Osal_MemSet>
  int index_input = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008122:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008126:	f107 020e 	add.w	r2, r7, #14
 800812a:	8812      	ldrh	r2, [r2, #0]
 800812c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800812e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008132:	3302      	adds	r3, #2
 8008134:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008138:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800813c:	f107 020d 	add.w	r2, r7, #13
 8008140:	7812      	ldrb	r2, [r2, #0]
 8008142:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008144:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008148:	3301      	adds	r3, #1
 800814a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800814e:	f107 030d 	add.w	r3, r7, #13
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d002      	beq.n	800815e <aci_gatt_add_char+0xa8>
 8008158:	2b02      	cmp	r3, #2
 800815a:	d004      	beq.n	8008166 <aci_gatt_add_char+0xb0>
 800815c:	e007      	b.n	800816e <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800815e:	2302      	movs	r3, #2
 8008160:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008164:	e005      	b.n	8008172 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8008166:	2310      	movs	r3, #16
 8008168:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800816c:	e001      	b.n	8008172 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800816e:	2347      	movs	r3, #71	; 0x47
 8008170:	e086      	b.n	8008280 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008172:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008176:	1cd8      	adds	r0, r3, #3
 8008178:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800817c:	f107 0308 	add.w	r3, r7, #8
 8008180:	6819      	ldr	r1, [r3, #0]
 8008182:	f000 fb06 	bl	8008792 <Osal_MemCpy>
    index_input += size;
 8008186:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800818a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800818e:	4413      	add	r3, r2
 8008190:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008194:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008198:	1dba      	adds	r2, r7, #6
 800819a:	8812      	ldrh	r2, [r2, #0]
 800819c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800819e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081a2:	3302      	adds	r3, #2
 80081a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80081a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081ac:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80081b0:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80081b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081b6:	3301      	adds	r3, #1
 80081b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80081bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081c0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80081c4:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80081c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081ca:	3301      	adds	r3, #1
 80081cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80081d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081d4:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80081d8:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80081da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081de:	3301      	adds	r3, #1
 80081e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80081e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081e8:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80081ec:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80081ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081f2:	3301      	adds	r3, #1
 80081f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80081f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081fc:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008200:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008202:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008206:	3301      	adds	r3, #1
 8008208:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800820c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008210:	2218      	movs	r2, #24
 8008212:	2100      	movs	r1, #0
 8008214:	4618      	mov	r0, r3
 8008216:	f000 facc 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800821a:	233f      	movs	r3, #63	; 0x3f
 800821c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008220:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008224:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008228:	f107 0318 	add.w	r3, r7, #24
 800822c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008230:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008234:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008238:	f107 0314 	add.w	r3, r7, #20
 800823c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008240:	2303      	movs	r3, #3
 8008242:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008246:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fd93 	bl	8008d78 <hci_send_req>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	da01      	bge.n	800825c <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8008258:	23ff      	movs	r3, #255	; 0xff
 800825a:	e011      	b.n	8008280 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800825c:	f107 0314 	add.w	r3, r7, #20
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8008266:	f107 0314 	add.w	r3, r7, #20
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	e008      	b.n	8008280 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800826e:	f107 0314 	add.w	r3, r7, #20
 8008272:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008276:	b29a      	uxth	r2, r3
 8008278:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800827c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8008286:	46bd      	mov	sp, r7
 8008288:	bd90      	pop	{r4, r7, pc}

0800828a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800828a:	b5b0      	push	{r4, r5, r7, lr}
 800828c:	b0cc      	sub	sp, #304	; 0x130
 800828e:	af00      	add	r7, sp, #0
 8008290:	4605      	mov	r5, r0
 8008292:	460c      	mov	r4, r1
 8008294:	4610      	mov	r0, r2
 8008296:	4619      	mov	r1, r3
 8008298:	1dbb      	adds	r3, r7, #6
 800829a:	462a      	mov	r2, r5
 800829c:	801a      	strh	r2, [r3, #0]
 800829e:	1d3b      	adds	r3, r7, #4
 80082a0:	4622      	mov	r2, r4
 80082a2:	801a      	strh	r2, [r3, #0]
 80082a4:	1cfb      	adds	r3, r7, #3
 80082a6:	4602      	mov	r2, r0
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	1cbb      	adds	r3, r7, #2
 80082ac:	460a      	mov	r2, r1
 80082ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80082b0:	f107 0310 	add.w	r3, r7, #16
 80082b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80082b8:	f107 030f 	add.w	r3, r7, #15
 80082bc:	2200      	movs	r2, #0
 80082be:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80082c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ca:	1dba      	adds	r2, r7, #6
 80082cc:	8812      	ldrh	r2, [r2, #0]
 80082ce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80082d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082d4:	3302      	adds	r3, #2
 80082d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80082da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082de:	1d3a      	adds	r2, r7, #4
 80082e0:	8812      	ldrh	r2, [r2, #0]
 80082e2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80082e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082e8:	3302      	adds	r3, #2
 80082ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80082ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f2:	1cfa      	adds	r2, r7, #3
 80082f4:	7812      	ldrb	r2, [r2, #0]
 80082f6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80082f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082fc:	3301      	adds	r3, #1
 80082fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008306:	1cba      	adds	r2, r7, #2
 8008308:	7812      	ldrb	r2, [r2, #0]
 800830a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800830c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008310:	3301      	adds	r3, #1
 8008312:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800831a:	1d98      	adds	r0, r3, #6
 800831c:	1cbb      	adds	r3, r7, #2
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008326:	f000 fa34 	bl	8008792 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800832a:	1cbb      	adds	r3, r7, #2
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008332:	4413      	add	r3, r2
 8008334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008338:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800833c:	2218      	movs	r2, #24
 800833e:	2100      	movs	r1, #0
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fa36 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008346:	233f      	movs	r3, #63	; 0x3f
 8008348:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800834c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008350:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008354:	f107 0310 	add.w	r3, r7, #16
 8008358:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800835c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008360:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008364:	f107 030f 	add.w	r3, r7, #15
 8008368:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800836c:	2301      	movs	r3, #1
 800836e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008372:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008376:	2100      	movs	r1, #0
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fcfd 	bl	8008d78 <hci_send_req>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	da01      	bge.n	8008388 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8008384:	23ff      	movs	r3, #255	; 0xff
 8008386:	e002      	b.n	800838e <aci_gatt_update_char_value+0x104>
  return status;
 8008388:	f107 030f 	add.w	r3, r7, #15
 800838c:	781b      	ldrb	r3, [r3, #0]
}
 800838e:	4618      	mov	r0, r3
 8008390:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008394:	46bd      	mov	sp, r7
 8008396:	bdb0      	pop	{r4, r5, r7, pc}

08008398 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b0cc      	sub	sp, #304	; 0x130
 800839c:	af00      	add	r7, sp, #0
 800839e:	463b      	mov	r3, r7
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	1dfb      	adds	r3, r7, #7
 80083a4:	4602      	mov	r2, r0
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	1dbb      	adds	r3, r7, #6
 80083aa:	460a      	mov	r2, r1
 80083ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80083ae:	f107 0310 	add.w	r3, r7, #16
 80083b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083b6:	f107 030f 	add.w	r3, r7, #15
 80083ba:	2200      	movs	r2, #0
 80083bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80083c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c8:	1dfa      	adds	r2, r7, #7
 80083ca:	7812      	ldrb	r2, [r2, #0]
 80083cc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80083ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083d2:	3301      	adds	r3, #1
 80083d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80083d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083dc:	1dba      	adds	r2, r7, #6
 80083de:	7812      	ldrb	r2, [r2, #0]
 80083e0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80083e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083e6:	3301      	adds	r3, #1
 80083e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80083ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f0:	1c98      	adds	r0, r3, #2
 80083f2:	1dbb      	adds	r3, r7, #6
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	463b      	mov	r3, r7
 80083f8:	6819      	ldr	r1, [r3, #0]
 80083fa:	f000 f9ca 	bl	8008792 <Osal_MemCpy>
  index_input += Length;
 80083fe:	1dbb      	adds	r3, r7, #6
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008406:	4413      	add	r3, r2
 8008408:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800840c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008410:	2218      	movs	r2, #24
 8008412:	2100      	movs	r1, #0
 8008414:	4618      	mov	r0, r3
 8008416:	f000 f9cc 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800841a:	233f      	movs	r3, #63	; 0x3f
 800841c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008420:	230c      	movs	r3, #12
 8008422:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008426:	f107 0310 	add.w	r3, r7, #16
 800842a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800842e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008432:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008436:	f107 030f 	add.w	r3, r7, #15
 800843a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800843e:	2301      	movs	r3, #1
 8008440:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008444:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008448:	2100      	movs	r1, #0
 800844a:	4618      	mov	r0, r3
 800844c:	f000 fc94 	bl	8008d78 <hci_send_req>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	da01      	bge.n	800845a <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008456:	23ff      	movs	r3, #255	; 0xff
 8008458:	e002      	b.n	8008460 <aci_hal_write_config_data+0xc8>
  return status;
 800845a:	f107 030f 	add.w	r3, r7, #15
 800845e:	781b      	ldrb	r3, [r3, #0]
}
 8008460:	4618      	mov	r0, r3
 8008462:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b0cc      	sub	sp, #304	; 0x130
 800846e:	af00      	add	r7, sp, #0
 8008470:	4602      	mov	r2, r0
 8008472:	1dfb      	adds	r3, r7, #7
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	1dbb      	adds	r3, r7, #6
 8008478:	460a      	mov	r2, r1
 800847a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800847c:	f107 0310 	add.w	r3, r7, #16
 8008480:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008484:	f107 030f 	add.w	r3, r7, #15
 8008488:	2200      	movs	r2, #0
 800848a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008496:	1dfa      	adds	r2, r7, #7
 8008498:	7812      	ldrb	r2, [r2, #0]
 800849a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800849c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084a0:	3301      	adds	r3, #1
 80084a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80084a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084aa:	1dba      	adds	r2, r7, #6
 80084ac:	7812      	ldrb	r2, [r2, #0]
 80084ae:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80084b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084b4:	3301      	adds	r3, #1
 80084b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084be:	2218      	movs	r2, #24
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f975 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80084c8:	233f      	movs	r3, #63	; 0x3f
 80084ca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80084ce:	230f      	movs	r3, #15
 80084d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80084d4:	f107 0310 	add.w	r3, r7, #16
 80084d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80084e4:	f107 030f 	add.w	r3, r7, #15
 80084e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084ec:	2301      	movs	r3, #1
 80084ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084f6:	2100      	movs	r1, #0
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fc3d 	bl	8008d78 <hci_send_req>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	da01      	bge.n	8008508 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008504:	23ff      	movs	r3, #255	; 0xff
 8008506:	e002      	b.n	800850e <aci_hal_set_tx_power_level+0xa4>
  return status;
 8008508:	f107 030f 	add.w	r3, r7, #15
 800850c:	781b      	ldrb	r3, [r3, #0]
}
 800850e:	4618      	mov	r0, r3
 8008510:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b0cc      	sub	sp, #304	; 0x130
 800851c:	af00      	add	r7, sp, #0
 800851e:	4602      	mov	r2, r0
 8008520:	1dbb      	adds	r3, r7, #6
 8008522:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008524:	f107 0310 	add.w	r3, r7, #16
 8008528:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800852c:	f107 030f 	add.w	r3, r7, #15
 8008530:	2200      	movs	r2, #0
 8008532:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800853a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800853e:	1dba      	adds	r2, r7, #6
 8008540:	8812      	ldrh	r2, [r2, #0]
 8008542:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008544:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008548:	3302      	adds	r3, #2
 800854a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800854e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008552:	2218      	movs	r2, #24
 8008554:	2100      	movs	r1, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f92b 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800855c:	233f      	movs	r3, #63	; 0x3f
 800855e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008562:	2318      	movs	r3, #24
 8008564:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008568:	f107 0310 	add.w	r3, r7, #16
 800856c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008570:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008574:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008578:	f107 030f 	add.w	r3, r7, #15
 800857c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008580:	2301      	movs	r3, #1
 8008582:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008586:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800858a:	2100      	movs	r1, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f000 fbf3 	bl	8008d78 <hci_send_req>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	da01      	bge.n	800859c <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8008598:	23ff      	movs	r3, #255	; 0xff
 800859a:	e002      	b.n	80085a2 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 800859c:	f107 030f 	add.w	r3, r7, #15
 80085a0:	781b      	ldrb	r3, [r3, #0]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085b6:	f107 0308 	add.w	r3, r7, #8
 80085ba:	2218      	movs	r2, #24
 80085bc:	2100      	movs	r1, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f8f7 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x03;
 80085c4:	2303      	movs	r3, #3
 80085c6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80085c8:	2303      	movs	r3, #3
 80085ca:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80085cc:	1dfb      	adds	r3, r7, #7
 80085ce:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80085d0:	2301      	movs	r3, #1
 80085d2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085d4:	f107 0308 	add.w	r3, r7, #8
 80085d8:	2100      	movs	r1, #0
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 fbcc 	bl	8008d78 <hci_send_req>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	da01      	bge.n	80085ea <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80085e6:	23ff      	movs	r3, #255	; 0xff
 80085e8:	e000      	b.n	80085ec <hci_reset+0x40>
  return status;
 80085ea:	79fb      	ldrb	r3, [r7, #7]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3720      	adds	r7, #32
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b0ce      	sub	sp, #312	; 0x138
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	f107 0308 	add.w	r3, r7, #8
 80085fe:	6019      	str	r1, [r3, #0]
 8008600:	1d3b      	adds	r3, r7, #4
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	f107 030e 	add.w	r3, r7, #14
 8008608:	4602      	mov	r2, r0
 800860a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800860c:	f107 0318 	add.w	r3, r7, #24
 8008610:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008614:	f107 0310 	add.w	r3, r7, #16
 8008618:	2205      	movs	r2, #5
 800861a:	2100      	movs	r1, #0
 800861c:	4618      	mov	r0, r3
 800861e:	f000 f8c8 	bl	80087b2 <Osal_MemSet>
  int index_input = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008628:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800862c:	f107 020e 	add.w	r2, r7, #14
 8008630:	8812      	ldrh	r2, [r2, #0]
 8008632:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008634:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008638:	3302      	adds	r3, #2
 800863a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800863e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008642:	2218      	movs	r2, #24
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f000 f8b3 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x08;
 800864c:	2308      	movs	r3, #8
 800864e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8008652:	2330      	movs	r3, #48	; 0x30
 8008654:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008658:	f107 0318 	add.w	r3, r7, #24
 800865c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008660:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008664:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008668:	f107 0310 	add.w	r3, r7, #16
 800866c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008670:	2305      	movs	r3, #5
 8008672:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008676:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800867a:	2100      	movs	r1, #0
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fb7b 	bl	8008d78 <hci_send_req>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	da01      	bge.n	800868c <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8008688:	23ff      	movs	r3, #255	; 0xff
 800868a:	e016      	b.n	80086ba <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800868c:	f107 0310 	add.w	r3, r7, #16
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <hci_le_read_phy+0xaa>
    return resp.Status;
 8008696:	f107 0310 	add.w	r3, r7, #16
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	e00d      	b.n	80086ba <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800869e:	f107 0310 	add.w	r3, r7, #16
 80086a2:	78da      	ldrb	r2, [r3, #3]
 80086a4:	f107 0308 	add.w	r3, r7, #8
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80086ac:	f107 0310 	add.w	r3, r7, #16
 80086b0:	791a      	ldrb	r2, [r3, #4]
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b0cd      	sub	sp, #308	; 0x134
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	4611      	mov	r1, r2
 80086d0:	1dfb      	adds	r3, r7, #7
 80086d2:	4622      	mov	r2, r4
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	1dbb      	adds	r3, r7, #6
 80086d8:	4602      	mov	r2, r0
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	1d7b      	adds	r3, r7, #5
 80086de:	460a      	mov	r2, r1
 80086e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80086e2:	f107 0310 	add.w	r3, r7, #16
 80086e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80086ea:	f107 030f 	add.w	r3, r7, #15
 80086ee:	2200      	movs	r2, #0
 80086f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80086f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80086fc:	1dfa      	adds	r2, r7, #7
 80086fe:	7812      	ldrb	r2, [r2, #0]
 8008700:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008706:	3301      	adds	r3, #1
 8008708:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800870c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008710:	1dba      	adds	r2, r7, #6
 8008712:	7812      	ldrb	r2, [r2, #0]
 8008714:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008716:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800871a:	3301      	adds	r3, #1
 800871c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008724:	1d7a      	adds	r2, r7, #5
 8008726:	7812      	ldrb	r2, [r2, #0]
 8008728:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800872a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800872e:	3301      	adds	r3, #1
 8008730:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008734:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008738:	2218      	movs	r2, #24
 800873a:	2100      	movs	r1, #0
 800873c:	4618      	mov	r0, r3
 800873e:	f000 f838 	bl	80087b2 <Osal_MemSet>
  rq.ogf = 0x08;
 8008742:	2308      	movs	r3, #8
 8008744:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008748:	2331      	movs	r3, #49	; 0x31
 800874a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800874e:	f107 0310 	add.w	r3, r7, #16
 8008752:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800875a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800875e:	f107 030f 	add.w	r3, r7, #15
 8008762:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008766:	2301      	movs	r3, #1
 8008768:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800876c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008770:	2100      	movs	r1, #0
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fb00 	bl	8008d78 <hci_send_req>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	da01      	bge.n	8008782 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800877e:	23ff      	movs	r3, #255	; 0xff
 8008780:	e002      	b.n	8008788 <hci_le_set_default_phy+0xc4>
  return status;
 8008782:	f107 030f 	add.w	r3, r7, #15
 8008786:	781b      	ldrb	r3, [r3, #0]
}
 8008788:	4618      	mov	r0, r3
 800878a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800878e:	46bd      	mov	sp, r7
 8008790:	bd90      	pop	{r4, r7, pc}

08008792 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	68b9      	ldr	r1, [r7, #8]
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f002 f99c 	bl	800aae0 <memcpy>
 80087a8:	4603      	mov	r3, r0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f002 f99a 	bl	800aafc <memset>
 80087c8:	4603      	mov	r3, r0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08a      	sub	sp, #40	; 0x28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	3301      	adds	r3, #1
 80087e6:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2bff      	cmp	r3, #255	; 0xff
 80087ee:	d14c      	bne.n	800888a <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	3302      	adds	r3, #2
 80087f4:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	f640 4301 	movw	r3, #3073	; 0xc01
 8008802:	429a      	cmp	r2, r3
 8008804:	d13d      	bne.n	8008882 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	3302      	adds	r3, #2
 800880a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	885b      	ldrh	r3, [r3, #2]
 8008810:	b29b      	uxth	r3, r3
 8008812:	461a      	mov	r2, r3
 8008814:	4b20      	ldr	r3, [pc, #128]	; (8008898 <PeerToPeer_Event_Handler+0xc4>)
 8008816:	889b      	ldrh	r3, [r3, #4]
 8008818:	3302      	adds	r3, #2
 800881a:	429a      	cmp	r2, r3
 800881c:	d118      	bne.n	8008850 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	7a1b      	ldrb	r3, [r3, #8]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d007      	beq.n	8008840 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008830:	2300      	movs	r3, #0
 8008832:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008834:	f107 0308 	add.w	r3, r7, #8
 8008838:	4618      	mov	r0, r3
 800883a:	f001 fb97 	bl	8009f6c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800883e:	e022      	b.n	8008886 <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008840:	2301      	movs	r3, #1
 8008842:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008844:	f107 0308 	add.w	r3, r7, #8
 8008848:	4618      	mov	r0, r3
 800884a:	f001 fb8f 	bl	8009f6c <P2PS_STM_App_Notification>
        break;
 800884e:	e01a      	b.n	8008886 <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	885b      	ldrh	r3, [r3, #2]
 8008854:	b29b      	uxth	r3, r3
 8008856:	461a      	mov	r2, r3
 8008858:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <PeerToPeer_Event_Handler+0xc4>)
 800885a:	885b      	ldrh	r3, [r3, #2]
 800885c:	3301      	adds	r3, #1
 800885e:	429a      	cmp	r2, r3
 8008860:	d111      	bne.n	8008886 <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8008862:	2303      	movs	r3, #3
 8008864:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	88db      	ldrh	r3, [r3, #6]
 800886a:	b29b      	uxth	r3, r3
 800886c:	b2db      	uxtb	r3, r3
 800886e:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	3308      	adds	r3, #8
 8008874:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8008876:	f107 0308 	add.w	r3, r7, #8
 800887a:	4618      	mov	r0, r3
 800887c:	f001 fb76 	bl	8009f6c <P2PS_STM_App_Notification>
        break;
 8008880:	e001      	b.n	8008886 <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 8008882:	bf00      	nop
 8008884:	e002      	b.n	800888c <PeerToPeer_Event_Handler+0xb8>
        break;
 8008886:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008888:	e000      	b.n	800888c <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 800888a:	bf00      	nop
  }

  return(return_value);
 800888c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008890:	4618      	mov	r0, r3
 8008892:	3728      	adds	r7, #40	; 0x28
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	200000c4 	.word	0x200000c4

0800889c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	; 0x28
 80088a0:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80088a2:	484a      	ldr	r0, [pc, #296]	; (80089cc <P2PS_STM_Init+0x130>)
 80088a4:	f000 f962 	bl	8008b6c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80088a8:	238f      	movs	r3, #143	; 0x8f
 80088aa:	703b      	strb	r3, [r7, #0]
 80088ac:	23e5      	movs	r3, #229	; 0xe5
 80088ae:	707b      	strb	r3, [r7, #1]
 80088b0:	23b3      	movs	r3, #179	; 0xb3
 80088b2:	70bb      	strb	r3, [r7, #2]
 80088b4:	23d5      	movs	r3, #213	; 0xd5
 80088b6:	70fb      	strb	r3, [r7, #3]
 80088b8:	232e      	movs	r3, #46	; 0x2e
 80088ba:	713b      	strb	r3, [r7, #4]
 80088bc:	237f      	movs	r3, #127	; 0x7f
 80088be:	717b      	strb	r3, [r7, #5]
 80088c0:	234a      	movs	r3, #74	; 0x4a
 80088c2:	71bb      	strb	r3, [r7, #6]
 80088c4:	2398      	movs	r3, #152	; 0x98
 80088c6:	71fb      	strb	r3, [r7, #7]
 80088c8:	232a      	movs	r3, #42	; 0x2a
 80088ca:	723b      	strb	r3, [r7, #8]
 80088cc:	2348      	movs	r3, #72	; 0x48
 80088ce:	727b      	strb	r3, [r7, #9]
 80088d0:	237a      	movs	r3, #122	; 0x7a
 80088d2:	72bb      	strb	r3, [r7, #10]
 80088d4:	23cc      	movs	r3, #204	; 0xcc
 80088d6:	72fb      	strb	r3, [r7, #11]
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	733b      	strb	r3, [r7, #12]
 80088dc:	23fe      	movs	r3, #254	; 0xfe
 80088de:	737b      	strb	r3, [r7, #13]
 80088e0:	2300      	movs	r3, #0
 80088e2:	73bb      	strb	r3, [r7, #14]
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 80088e8:	4639      	mov	r1, r7
 80088ea:	4b39      	ldr	r3, [pc, #228]	; (80089d0 <P2PS_STM_Init+0x134>)
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	2308      	movs	r3, #8
 80088f0:	2201      	movs	r2, #1
 80088f2:	2002      	movs	r0, #2
 80088f4:	f7ff fb30 	bl	8007f58 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80088f8:	2319      	movs	r3, #25
 80088fa:	703b      	strb	r3, [r7, #0]
 80088fc:	23ed      	movs	r3, #237	; 0xed
 80088fe:	707b      	strb	r3, [r7, #1]
 8008900:	2382      	movs	r3, #130	; 0x82
 8008902:	70bb      	strb	r3, [r7, #2]
 8008904:	23ae      	movs	r3, #174	; 0xae
 8008906:	70fb      	strb	r3, [r7, #3]
 8008908:	23ed      	movs	r3, #237	; 0xed
 800890a:	713b      	strb	r3, [r7, #4]
 800890c:	2321      	movs	r3, #33	; 0x21
 800890e:	717b      	strb	r3, [r7, #5]
 8008910:	234c      	movs	r3, #76	; 0x4c
 8008912:	71bb      	strb	r3, [r7, #6]
 8008914:	239d      	movs	r3, #157	; 0x9d
 8008916:	71fb      	strb	r3, [r7, #7]
 8008918:	2341      	movs	r3, #65	; 0x41
 800891a:	723b      	strb	r3, [r7, #8]
 800891c:	2345      	movs	r3, #69	; 0x45
 800891e:	727b      	strb	r3, [r7, #9]
 8008920:	2322      	movs	r3, #34	; 0x22
 8008922:	72bb      	strb	r3, [r7, #10]
 8008924:	238e      	movs	r3, #142	; 0x8e
 8008926:	72fb      	strb	r3, [r7, #11]
 8008928:	2341      	movs	r3, #65	; 0x41
 800892a:	733b      	strb	r3, [r7, #12]
 800892c:	23fe      	movs	r3, #254	; 0xfe
 800892e:	737b      	strb	r3, [r7, #13]
 8008930:	2300      	movs	r3, #0
 8008932:	73bb      	strb	r3, [r7, #14]
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008938:	4b25      	ldr	r3, [pc, #148]	; (80089d0 <P2PS_STM_Init+0x134>)
 800893a:	8818      	ldrh	r0, [r3, #0]
 800893c:	463a      	mov	r2, r7
 800893e:	4b25      	ldr	r3, [pc, #148]	; (80089d4 <P2PS_STM_Init+0x138>)
 8008940:	9305      	str	r3, [sp, #20]
 8008942:	2301      	movs	r3, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	230a      	movs	r3, #10
 8008948:	9303      	str	r3, [sp, #12]
 800894a:	2301      	movs	r3, #1
 800894c:	9302      	str	r3, [sp, #8]
 800894e:	2300      	movs	r3, #0
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	2306      	movs	r3, #6
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	2302      	movs	r3, #2
 8008958:	2102      	movs	r1, #2
 800895a:	f7ff fbac 	bl	80080b6 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800895e:	2319      	movs	r3, #25
 8008960:	703b      	strb	r3, [r7, #0]
 8008962:	23ed      	movs	r3, #237	; 0xed
 8008964:	707b      	strb	r3, [r7, #1]
 8008966:	2382      	movs	r3, #130	; 0x82
 8008968:	70bb      	strb	r3, [r7, #2]
 800896a:	23ae      	movs	r3, #174	; 0xae
 800896c:	70fb      	strb	r3, [r7, #3]
 800896e:	23ed      	movs	r3, #237	; 0xed
 8008970:	713b      	strb	r3, [r7, #4]
 8008972:	2321      	movs	r3, #33	; 0x21
 8008974:	717b      	strb	r3, [r7, #5]
 8008976:	234c      	movs	r3, #76	; 0x4c
 8008978:	71bb      	strb	r3, [r7, #6]
 800897a:	239d      	movs	r3, #157	; 0x9d
 800897c:	71fb      	strb	r3, [r7, #7]
 800897e:	2341      	movs	r3, #65	; 0x41
 8008980:	723b      	strb	r3, [r7, #8]
 8008982:	2345      	movs	r3, #69	; 0x45
 8008984:	727b      	strb	r3, [r7, #9]
 8008986:	2322      	movs	r3, #34	; 0x22
 8008988:	72bb      	strb	r3, [r7, #10]
 800898a:	238e      	movs	r3, #142	; 0x8e
 800898c:	72fb      	strb	r3, [r7, #11]
 800898e:	2342      	movs	r3, #66	; 0x42
 8008990:	733b      	strb	r3, [r7, #12]
 8008992:	23fe      	movs	r3, #254	; 0xfe
 8008994:	737b      	strb	r3, [r7, #13]
 8008996:	2300      	movs	r3, #0
 8008998:	73bb      	strb	r3, [r7, #14]
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800899e:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <P2PS_STM_Init+0x134>)
 80089a0:	8818      	ldrh	r0, [r3, #0]
 80089a2:	463a      	mov	r2, r7
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <P2PS_STM_Init+0x13c>)
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	2301      	movs	r3, #1
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	230a      	movs	r3, #10
 80089ae:	9303      	str	r3, [sp, #12]
 80089b0:	2301      	movs	r3, #1
 80089b2:	9302      	str	r3, [sp, #8]
 80089b4:	2300      	movs	r3, #0
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	2310      	movs	r3, #16
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	2348      	movs	r3, #72	; 0x48
 80089be:	2102      	movs	r1, #2
 80089c0:	f7ff fb79 	bl	80080b6 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80089c4:	bf00      	nop
}
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	080087d5 	.word	0x080087d5
 80089d0:	200000c4 	.word	0x200000c4
 80089d4:	200000c6 	.word	0x200000c6
 80089d8:	200000c8 	.word	0x200000c8

080089dc <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	4603      	mov	r3, r0
 80089e4:	6039      	str	r1, [r7, #0]
 80089e6:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80089e8:	2342      	movs	r3, #66	; 0x42
 80089ea:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	f64f 6242 	movw	r2, #65090	; 0xfe42
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d10c      	bne.n	8008a10 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 80089f6:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <P2PS_STM_App_Update_Char+0x40>)
 80089f8:	8818      	ldrh	r0, [r3, #0]
 80089fa:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <P2PS_STM_App_Update_Char+0x40>)
 80089fc:	8899      	ldrh	r1, [r3, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	2348      	movs	r3, #72	; 0x48
 8008a04:	2200      	movs	r2, #0
 8008a06:	f7ff fc40 	bl	800828a <aci_gatt_update_char_value>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             72, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8008a0e:	e000      	b.n	8008a12 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8008a10:	bf00      	nop
  }

  return result;
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	200000c4 	.word	0x200000c4

08008a20 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8008a20:	b480      	push	{r7}
 8008a22:	af00      	add	r7, sp, #0
  return;
 8008a24:	bf00      	nop
}
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <BLS_Init>:

__weak void BLS_Init( void )
{
 8008a2e:	b480      	push	{r7}
 8008a30:	af00      	add	r7, sp, #0
  return;
 8008a32:	bf00      	nop
}
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
  return;
 8008a40:	bf00      	nop
}
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <DIS_Init>:
__weak void DIS_Init( void )
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	af00      	add	r7, sp, #0
  return;
 8008a4e:	bf00      	nop
}
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
  return;
 8008a5c:	bf00      	nop
}
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8008a66:	b480      	push	{r7}
 8008a68:	af00      	add	r7, sp, #0
  return;
 8008a6a:	bf00      	nop
}
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HRS_Init>:
__weak void HRS_Init( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  return;
 8008a78:	bf00      	nop
}
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <HTS_Init>:
__weak void HTS_Init( void )
{
 8008a82:	b480      	push	{r7}
 8008a84:	af00      	add	r7, sp, #0
  return;
 8008a86:	bf00      	nop
}
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <IAS_Init>:
__weak void IAS_Init( void )
{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
  return;
 8008a94:	bf00      	nop
}
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <LLS_Init>:
__weak void LLS_Init( void )
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	af00      	add	r7, sp, #0
  return;
 8008aa2:	bf00      	nop
}
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <TPS_Init>:
__weak void TPS_Init( void )
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
  return;
 8008ab0:	bf00      	nop
}
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8008aba:	b480      	push	{r7}
 8008abc:	af00      	add	r7, sp, #0
  return;
 8008abe:	bf00      	nop
}
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	af00      	add	r7, sp, #0
  return;
 8008acc:	bf00      	nop
}
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <MESH_Init>:
__weak void MESH_Init( void )
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	af00      	add	r7, sp, #0
  return;
 8008ada:	bf00      	nop
}
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0
  return;
 8008ae8:	bf00      	nop
}
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8008af2:	b480      	push	{r7}
 8008af4:	af00      	add	r7, sp, #0
  return;
 8008af6:	bf00      	nop
}
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008b04:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <SVCCTL_Init+0x18>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008b0a:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <SVCCTL_Init+0x1c>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008b10:	f000 f806 	bl	8008b20 <SVCCTL_SvcInit>

  return;
 8008b14:	bf00      	nop
}
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	200000cc 	.word	0x200000cc
 8008b1c:	200000ec 	.word	0x200000ec

08008b20 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  BAS_Init();
 8008b24:	f7ff ff7c 	bl	8008a20 <BAS_Init>

  BLS_Init();
 8008b28:	f7ff ff81 	bl	8008a2e <BLS_Init>

  CRS_STM_Init();
 8008b2c:	f7ff ff86 	bl	8008a3c <CRS_STM_Init>

  DIS_Init();
 8008b30:	f7ff ff8b 	bl	8008a4a <DIS_Init>

  EDS_STM_Init();
 8008b34:	f7ff ff90 	bl	8008a58 <EDS_STM_Init>

  HIDS_Init();
 8008b38:	f7ff ff95 	bl	8008a66 <HIDS_Init>

  HRS_Init();
 8008b3c:	f7ff ff9a 	bl	8008a74 <HRS_Init>

  HTS_Init();
 8008b40:	f7ff ff9f 	bl	8008a82 <HTS_Init>

  IAS_Init();
 8008b44:	f7ff ffa4 	bl	8008a90 <IAS_Init>

  LLS_Init();
 8008b48:	f7ff ffa9 	bl	8008a9e <LLS_Init>

  TPS_Init();
 8008b4c:	f7ff ffae 	bl	8008aac <TPS_Init>

  MOTENV_STM_Init();
 8008b50:	f7ff ffb3 	bl	8008aba <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008b54:	f7ff fea2 	bl	800889c <P2PS_STM_Init>

  OTAS_STM_Init();
 8008b58:	f7ff ffb6 	bl	8008ac8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008b5c:	f7ff ffc2 	bl	8008ae4 <BVOPUS_STM_Init>

  MESH_Init();
 8008b60:	f7ff ffb9 	bl	8008ad6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008b64:	f7ff ffc5 	bl	8008af2 <SVCCTL_InitCustomSvc>
  
  return;
 8008b68:	bf00      	nop
}
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008b74:	4b09      	ldr	r3, [pc, #36]	; (8008b9c <SVCCTL_RegisterSvcHandler+0x30>)
 8008b76:	7f1b      	ldrb	r3, [r3, #28]
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4a08      	ldr	r2, [pc, #32]	; (8008b9c <SVCCTL_RegisterSvcHandler+0x30>)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <SVCCTL_RegisterSvcHandler+0x30>)
 8008b84:	7f1b      	ldrb	r3, [r3, #28]
 8008b86:	3301      	adds	r3, #1
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <SVCCTL_RegisterSvcHandler+0x30>)
 8008b8c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008b8e:	bf00      	nop
}
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	200000cc 	.word	0x200000cc

08008ba0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3301      	adds	r3, #1
 8008bac:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	2bff      	cmp	r3, #255	; 0xff
 8008bb8:	d125      	bne.n	8008c06 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	3302      	adds	r3, #2
 8008bbe:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008bca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bce:	d118      	bne.n	8008c02 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	757b      	strb	r3, [r7, #21]
 8008bd4:	e00d      	b.n	8008bf2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008bd6:	7d7b      	ldrb	r3, [r7, #21]
 8008bd8:	4a1a      	ldr	r2, [pc, #104]	; (8008c44 <SVCCTL_UserEvtRx+0xa4>)
 8008bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d108      	bne.n	8008bfe <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008bec:	7d7b      	ldrb	r3, [r7, #21]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	757b      	strb	r3, [r7, #21]
 8008bf2:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <SVCCTL_UserEvtRx+0xa4>)
 8008bf4:	7f1b      	ldrb	r3, [r3, #28]
 8008bf6:	7d7a      	ldrb	r2, [r7, #21]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d3ec      	bcc.n	8008bd6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008bfc:	e002      	b.n	8008c04 <SVCCTL_UserEvtRx+0x64>
              break;
 8008bfe:	bf00      	nop
          break;
 8008c00:	e000      	b.n	8008c04 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008c02:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008c04:	e000      	b.n	8008c08 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008c06:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d00f      	beq.n	8008c2e <SVCCTL_UserEvtRx+0x8e>
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	dc10      	bgt.n	8008c34 <SVCCTL_UserEvtRx+0x94>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d002      	beq.n	8008c1c <SVCCTL_UserEvtRx+0x7c>
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d006      	beq.n	8008c28 <SVCCTL_UserEvtRx+0x88>
 8008c1a:	e00b      	b.n	8008c34 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fec9 	bl	80099b4 <SVCCTL_App_Notification>
 8008c22:	4603      	mov	r3, r0
 8008c24:	75bb      	strb	r3, [r7, #22]
      break;
 8008c26:	e008      	b.n	8008c3a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	75bb      	strb	r3, [r7, #22]
      break;
 8008c2c:	e005      	b.n	8008c3a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	75bb      	strb	r3, [r7, #22]
      break;
 8008c32:	e002      	b.n	8008c3a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008c34:	2301      	movs	r3, #1
 8008c36:	75bb      	strb	r3, [r7, #22]
      break;
 8008c38:	bf00      	nop
  }

  return (return_status);
 8008c3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	200000cc 	.word	0x200000cc

08008c48 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008c50:	f107 030c 	add.w	r3, r7, #12
 8008c54:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	2124      	movs	r1, #36	; 0x24
 8008c60:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008c64:	f000 fa1e 	bl	80090a4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	330b      	adds	r3, #11
 8008c6c:	78db      	ldrb	r3, [r3, #3]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3720      	adds	r7, #32
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b088      	sub	sp, #32
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008c7e:	f107 030c 	add.w	r3, r7, #12
 8008c82:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	210f      	movs	r1, #15
 8008c8e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008c92:	f000 fa07 	bl	80090a4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	330b      	adds	r3, #11
 8008c9a:	78db      	ldrb	r3, [r3, #3]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3720      	adds	r7, #32
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	4a08      	ldr	r2, [pc, #32]	; (8008cd4 <hci_init+0x30>)
 8008cb4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008cb6:	4a08      	ldr	r2, [pc, #32]	; (8008cd8 <hci_init+0x34>)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008cbc:	4806      	ldr	r0, [pc, #24]	; (8008cd8 <hci_init+0x34>)
 8008cbe:	f000 f973 	bl	8008fa8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f8d4 	bl	8008e74 <TlInit>

  return;
 8008ccc:	bf00      	nop
}
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000254 	.word	0x20000254
 8008cd8:	2000022c 	.word	0x2000022c

08008cdc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008ce2:	4822      	ldr	r0, [pc, #136]	; (8008d6c <hci_user_evt_proc+0x90>)
 8008ce4:	f000 fd28 	bl	8009738 <LST_is_empty>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d12b      	bne.n	8008d46 <hci_user_evt_proc+0x6a>
 8008cee:	4b20      	ldr	r3, [pc, #128]	; (8008d70 <hci_user_evt_proc+0x94>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d027      	beq.n	8008d46 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008cf6:	f107 030c 	add.w	r3, r7, #12
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	481b      	ldr	r0, [pc, #108]	; (8008d6c <hci_user_evt_proc+0x90>)
 8008cfe:	f000 fdaa 	bl	8009856 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008d02:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <hci_user_evt_proc+0x98>)
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00c      	beq.n	8008d24 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008d12:	4b18      	ldr	r3, [pc, #96]	; (8008d74 <hci_user_evt_proc+0x98>)
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	1d3a      	adds	r2, r7, #4
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008d1c:	793a      	ldrb	r2, [r7, #4]
 8008d1e:	4b14      	ldr	r3, [pc, #80]	; (8008d70 <hci_user_evt_proc+0x94>)
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	e002      	b.n	8008d2a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008d24:	4b12      	ldr	r3, [pc, #72]	; (8008d70 <hci_user_evt_proc+0x94>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008d2a:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <hci_user_evt_proc+0x94>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d004      	beq.n	8008d3c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fc03 	bl	8009540 <TL_MM_EvtDone>
 8008d3a:	e004      	b.n	8008d46 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	480a      	ldr	r0, [pc, #40]	; (8008d6c <hci_user_evt_proc+0x90>)
 8008d42:	f000 fd1b 	bl	800977c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008d46:	4809      	ldr	r0, [pc, #36]	; (8008d6c <hci_user_evt_proc+0x90>)
 8008d48:	f000 fcf6 	bl	8009738 <LST_is_empty>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d107      	bne.n	8008d62 <hci_user_evt_proc+0x86>
 8008d52:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <hci_user_evt_proc+0x94>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008d5a:	4804      	ldr	r0, [pc, #16]	; (8008d6c <hci_user_evt_proc+0x90>)
 8008d5c:	f001 f8ac 	bl	8009eb8 <hci_notify_asynch_evt>
  }


  return;
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
}
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	200000f4 	.word	0x200000f4
 8008d70:	20000100 	.word	0x20000100
 8008d74:	2000022c 	.word	0x2000022c

08008d78 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b088      	sub	sp, #32
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008d84:	2000      	movs	r0, #0
 8008d86:	f000 f8cb 	bl	8008f20 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	885b      	ldrh	r3, [r3, #2]
 8008d92:	b21b      	sxth	r3, r3
 8008d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d98:	b21a      	sxth	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	029b      	lsls	r3, r3, #10
 8008da0:	b21b      	sxth	r3, r3
 8008da2:	4313      	orrs	r3, r2
 8008da4:	b21b      	sxth	r3, r3
 8008da6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	b2d9      	uxtb	r1, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	689a      	ldr	r2, [r3, #8]
 8008db2:	8bbb      	ldrh	r3, [r7, #28]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f88d 	bl	8008ed4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008dba:	e04e      	b.n	8008e5a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008dbc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008dc0:	f001 f891 	bl	8009ee6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008dc4:	e043      	b.n	8008e4e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008dc6:	f107 030c 	add.w	r3, r7, #12
 8008dca:	4619      	mov	r1, r3
 8008dcc:	4828      	ldr	r0, [pc, #160]	; (8008e70 <hci_send_req+0xf8>)
 8008dce:	f000 fd42 	bl	8009856 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	7a5b      	ldrb	r3, [r3, #9]
 8008dd6:	2b0f      	cmp	r3, #15
 8008dd8:	d114      	bne.n	8008e04 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	330b      	adds	r3, #11
 8008dde:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	885b      	ldrh	r3, [r3, #2]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	8bba      	ldrh	r2, [r7, #28]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d104      	bne.n	8008df6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	7812      	ldrb	r2, [r2, #0]
 8008df4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	785b      	ldrb	r3, [r3, #1]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d027      	beq.n	8008e4e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	77fb      	strb	r3, [r7, #31]
 8008e02:	e024      	b.n	8008e4e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	330b      	adds	r3, #11
 8008e08:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	8bba      	ldrh	r2, [r7, #28]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d114      	bne.n	8008e42 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	7a9b      	ldrb	r3, [r3, #10]
 8008e1c:	3b03      	subs	r3, #3
 8008e1e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	695a      	ldr	r2, [r3, #20]
 8008e24:	7dfb      	ldrb	r3, [r7, #23]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	bfa8      	it	ge
 8008e2a:	461a      	movge	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6918      	ldr	r0, [r3, #16]
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	1cd9      	adds	r1, r3, #3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	f001 fe4f 	bl	800aae0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008e4e:	4808      	ldr	r0, [pc, #32]	; (8008e70 <hci_send_req+0xf8>)
 8008e50:	f000 fc72 	bl	8009738 <LST_is_empty>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0b5      	beq.n	8008dc6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008e5a:	7ffb      	ldrb	r3, [r7, #31]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0ad      	beq.n	8008dbc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008e60:	2001      	movs	r0, #1
 8008e62:	f000 f85d 	bl	8008f20 <NotifyCmdStatus>

  return 0;
 8008e66:	2300      	movs	r3, #0
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3720      	adds	r7, #32
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	2000024c 	.word	0x2000024c

08008e74 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008e7c:	480f      	ldr	r0, [pc, #60]	; (8008ebc <TlInit+0x48>)
 8008e7e:	f000 fc4b 	bl	8009718 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008e82:	4a0f      	ldr	r2, [pc, #60]	; (8008ec0 <TlInit+0x4c>)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008e88:	480e      	ldr	r0, [pc, #56]	; (8008ec4 <TlInit+0x50>)
 8008e8a:	f000 fc45 	bl	8009718 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008e8e:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <TlInit+0x54>)
 8008e90:	2201      	movs	r2, #1
 8008e92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008e94:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <TlInit+0x58>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00a      	beq.n	8008eb2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <TlInit+0x5c>)
 8008ea2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008ea4:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <TlInit+0x58>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f107 0208 	add.w	r2, r7, #8
 8008eac:	4610      	mov	r0, r2
 8008eae:	4798      	blx	r3
  }

  return;
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
}
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	2000024c 	.word	0x2000024c
 8008ec0:	200000fc 	.word	0x200000fc
 8008ec4:	200000f4 	.word	0x200000f4
 8008ec8:	20000100 	.word	0x20000100
 8008ecc:	2000022c 	.word	0x2000022c
 8008ed0:	08008f61 	.word	0x08008f61

08008ed4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	603a      	str	r2, [r7, #0]
 8008ede:	80fb      	strh	r3, [r7, #6]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <SendCmd+0x44>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	88fa      	ldrh	r2, [r7, #6]
 8008eea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008eee:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <SendCmd+0x44>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	797a      	ldrb	r2, [r7, #5]
 8008ef4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008ef6:	4b08      	ldr	r3, [pc, #32]	; (8008f18 <SendCmd+0x44>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	330c      	adds	r3, #12
 8008efc:	797a      	ldrb	r2, [r7, #5]
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fded 	bl	800aae0 <memcpy>

  hciContext.io.Send(0,0);
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <SendCmd+0x48>)
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	4798      	blx	r3

  return;
 8008f10:	bf00      	nop
}
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	200000fc 	.word	0x200000fc
 8008f1c:	2000022c 	.word	0x2000022c

08008f20 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008f2a:	79fb      	ldrb	r3, [r7, #7]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d108      	bne.n	8008f42 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <NotifyCmdStatus+0x3c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d00d      	beq.n	8008f54 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008f38:	4b08      	ldr	r3, [pc, #32]	; (8008f5c <NotifyCmdStatus+0x3c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008f40:	e008      	b.n	8008f54 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008f42:	4b06      	ldr	r3, [pc, #24]	; (8008f5c <NotifyCmdStatus+0x3c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d004      	beq.n	8008f54 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008f4a:	4b04      	ldr	r3, [pc, #16]	; (8008f5c <NotifyCmdStatus+0x3c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2001      	movs	r0, #1
 8008f50:	4798      	blx	r3
  return;
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
}
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20000254 	.word	0x20000254

08008f60 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7a5b      	ldrb	r3, [r3, #9]
 8008f6c:	2b0f      	cmp	r3, #15
 8008f6e:	d003      	beq.n	8008f78 <TlEvtReceived+0x18>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7a5b      	ldrb	r3, [r3, #9]
 8008f74:	2b0e      	cmp	r3, #14
 8008f76:	d107      	bne.n	8008f88 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	4809      	ldr	r0, [pc, #36]	; (8008fa0 <TlEvtReceived+0x40>)
 8008f7c:	f000 fc24 	bl	80097c8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008f80:	2000      	movs	r0, #0
 8008f82:	f000 ffa5 	bl	8009ed0 <hci_cmd_resp_release>
 8008f86:	e006      	b.n	8008f96 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4806      	ldr	r0, [pc, #24]	; (8008fa4 <TlEvtReceived+0x44>)
 8008f8c:	f000 fc1c 	bl	80097c8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008f90:	4804      	ldr	r0, [pc, #16]	; (8008fa4 <TlEvtReceived+0x44>)
 8008f92:	f000 ff91 	bl	8009eb8 <hci_notify_asynch_evt>
  }

  return;
 8008f96:	bf00      	nop
}
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	2000024c 	.word	0x2000024c
 8008fa4:	200000f4 	.word	0x200000f4

08008fa8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a05      	ldr	r2, [pc, #20]	; (8008fc8 <hci_register_io_bus+0x20>)
 8008fb4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a04      	ldr	r2, [pc, #16]	; (8008fcc <hci_register_io_bus+0x24>)
 8008fba:	611a      	str	r2, [r3, #16]

  return;
 8008fbc:	bf00      	nop
}
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr
 8008fc8:	080092b9 	.word	0x080092b9
 8008fcc:	08009321 	.word	0x08009321

08008fd0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	4a08      	ldr	r2, [pc, #32]	; (8009000 <shci_init+0x30>)
 8008fe0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008fe2:	4a08      	ldr	r2, [pc, #32]	; (8009004 <shci_init+0x34>)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008fe8:	4806      	ldr	r0, [pc, #24]	; (8009004 <shci_init+0x34>)
 8008fea:	f000 f911 	bl	8009210 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f894 	bl	8009120 <TlInit>

  return;
 8008ff8:	bf00      	nop
}
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000278 	.word	0x20000278
 8009004:	20000258 	.word	0x20000258

08009008 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800900e:	4822      	ldr	r0, [pc, #136]	; (8009098 <shci_user_evt_proc+0x90>)
 8009010:	f000 fb92 	bl	8009738 <LST_is_empty>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d12b      	bne.n	8009072 <shci_user_evt_proc+0x6a>
 800901a:	4b20      	ldr	r3, [pc, #128]	; (800909c <shci_user_evt_proc+0x94>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d027      	beq.n	8009072 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009022:	f107 030c 	add.w	r3, r7, #12
 8009026:	4619      	mov	r1, r3
 8009028:	481b      	ldr	r0, [pc, #108]	; (8009098 <shci_user_evt_proc+0x90>)
 800902a:	f000 fc14 	bl	8009856 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800902e:	4b1c      	ldr	r3, [pc, #112]	; (80090a0 <shci_user_evt_proc+0x98>)
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00c      	beq.n	8009050 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800903a:	2301      	movs	r3, #1
 800903c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800903e:	4b18      	ldr	r3, [pc, #96]	; (80090a0 <shci_user_evt_proc+0x98>)
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	1d3a      	adds	r2, r7, #4
 8009044:	4610      	mov	r0, r2
 8009046:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009048:	793a      	ldrb	r2, [r7, #4]
 800904a:	4b14      	ldr	r3, [pc, #80]	; (800909c <shci_user_evt_proc+0x94>)
 800904c:	701a      	strb	r2, [r3, #0]
 800904e:	e002      	b.n	8009056 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009050:	4b12      	ldr	r3, [pc, #72]	; (800909c <shci_user_evt_proc+0x94>)
 8009052:	2201      	movs	r2, #1
 8009054:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009056:	4b11      	ldr	r3, [pc, #68]	; (800909c <shci_user_evt_proc+0x94>)
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d004      	beq.n	8009068 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 fa6d 	bl	8009540 <TL_MM_EvtDone>
 8009066:	e004      	b.n	8009072 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	4619      	mov	r1, r3
 800906c:	480a      	ldr	r0, [pc, #40]	; (8009098 <shci_user_evt_proc+0x90>)
 800906e:	f000 fb85 	bl	800977c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009072:	4809      	ldr	r0, [pc, #36]	; (8009098 <shci_user_evt_proc+0x90>)
 8009074:	f000 fb60 	bl	8009738 <LST_is_empty>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d107      	bne.n	800908e <shci_user_evt_proc+0x86>
 800907e:	4b07      	ldr	r3, [pc, #28]	; (800909c <shci_user_evt_proc+0x94>)
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009086:	4804      	ldr	r0, [pc, #16]	; (8009098 <shci_user_evt_proc+0x90>)
 8009088:	f7f7 fa65 	bl	8000556 <shci_notify_asynch_evt>
  }


  return;
 800908c:	bf00      	nop
 800908e:	bf00      	nop
}
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000104 	.word	0x20000104
 800909c:	20000114 	.word	0x20000114
 80090a0:	20000258 	.word	0x20000258

080090a4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60ba      	str	r2, [r7, #8]
 80090ac:	607b      	str	r3, [r7, #4]
 80090ae:	4603      	mov	r3, r0
 80090b0:	81fb      	strh	r3, [r7, #14]
 80090b2:	460b      	mov	r3, r1
 80090b4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80090b6:	2000      	movs	r0, #0
 80090b8:	f000 f864 	bl	8009184 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80090bc:	4b16      	ldr	r3, [pc, #88]	; (8009118 <shci_send+0x74>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	89fa      	ldrh	r2, [r7, #14]
 80090c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <shci_send+0x74>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	7b7a      	ldrb	r2, [r7, #13]
 80090cc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <shci_send+0x74>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	330c      	adds	r3, #12
 80090d4:	7b7a      	ldrb	r2, [r7, #13]
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 fd01 	bl	800aae0 <memcpy>

  shciContext.io.Send(0,0);
 80090de:	4b0f      	ldr	r3, [pc, #60]	; (800911c <shci_send+0x78>)
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	2100      	movs	r1, #0
 80090e4:	2000      	movs	r0, #0
 80090e6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80090e8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80090ec:	f7f7 fa4a 	bl	8000584 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f103 0008 	add.w	r0, r3, #8
 80090f6:	4b08      	ldr	r3, [pc, #32]	; (8009118 <shci_send+0x74>)
 80090f8:	6819      	ldr	r1, [r3, #0]
 80090fa:	4b07      	ldr	r3, [pc, #28]	; (8009118 <shci_send+0x74>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	789b      	ldrb	r3, [r3, #2]
 8009100:	3303      	adds	r3, #3
 8009102:	461a      	mov	r2, r3
 8009104:	f001 fcec 	bl	800aae0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009108:	2001      	movs	r0, #1
 800910a:	f000 f83b 	bl	8009184 <Cmd_SetStatus>

  return;
 800910e:	bf00      	nop
}
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20000110 	.word	0x20000110
 800911c:	20000258 	.word	0x20000258

08009120 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009128:	4a10      	ldr	r2, [pc, #64]	; (800916c <TlInit+0x4c>)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800912e:	4810      	ldr	r0, [pc, #64]	; (8009170 <TlInit+0x50>)
 8009130:	f000 faf2 	bl	8009718 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009134:	2001      	movs	r0, #1
 8009136:	f000 f825 	bl	8009184 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800913a:	4b0e      	ldr	r3, [pc, #56]	; (8009174 <TlInit+0x54>)
 800913c:	2201      	movs	r2, #1
 800913e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009140:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <TlInit+0x58>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00c      	beq.n	8009162 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800914c:	4b0b      	ldr	r3, [pc, #44]	; (800917c <TlInit+0x5c>)
 800914e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009150:	4b0b      	ldr	r3, [pc, #44]	; (8009180 <TlInit+0x60>)
 8009152:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009154:	4b08      	ldr	r3, [pc, #32]	; (8009178 <TlInit+0x58>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f107 020c 	add.w	r2, r7, #12
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
  }

  return;
 8009160:	bf00      	nop
 8009162:	bf00      	nop
}
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20000110 	.word	0x20000110
 8009170:	20000104 	.word	0x20000104
 8009174:	20000114 	.word	0x20000114
 8009178:	20000258 	.word	0x20000258
 800917c:	080091d5 	.word	0x080091d5
 8009180:	080091ed 	.word	0x080091ed

08009184 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b082      	sub	sp, #8
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d10b      	bne.n	80091ac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009194:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <Cmd_SetStatus+0x48>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800919c:	4b0b      	ldr	r3, [pc, #44]	; (80091cc <Cmd_SetStatus+0x48>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2000      	movs	r0, #0
 80091a2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80091a4:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <Cmd_SetStatus+0x4c>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80091aa:	e00b      	b.n	80091c4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80091ac:	4b08      	ldr	r3, [pc, #32]	; (80091d0 <Cmd_SetStatus+0x4c>)
 80091ae:	2201      	movs	r2, #1
 80091b0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80091b2:	4b06      	ldr	r3, [pc, #24]	; (80091cc <Cmd_SetStatus+0x48>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d004      	beq.n	80091c4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80091ba:	4b04      	ldr	r3, [pc, #16]	; (80091cc <Cmd_SetStatus+0x48>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2001      	movs	r0, #1
 80091c0:	4798      	blx	r3
  return;
 80091c2:	bf00      	nop
 80091c4:	bf00      	nop
}
 80091c6:	3708      	adds	r7, #8
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20000278 	.word	0x20000278
 80091d0:	2000010c 	.word	0x2000010c

080091d4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80091dc:	2000      	movs	r0, #0
 80091de:	f7f7 f9c6 	bl	800056e <shci_cmd_resp_release>

  return;
 80091e2:	bf00      	nop
}
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4805      	ldr	r0, [pc, #20]	; (800920c <TlUserEvtReceived+0x20>)
 80091f8:	f000 fae6 	bl	80097c8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80091fc:	4803      	ldr	r0, [pc, #12]	; (800920c <TlUserEvtReceived+0x20>)
 80091fe:	f7f7 f9aa 	bl	8000556 <shci_notify_asynch_evt>

  return;
 8009202:	bf00      	nop
}
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000104 	.word	0x20000104

08009210 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a05      	ldr	r2, [pc, #20]	; (8009230 <shci_register_io_bus+0x20>)
 800921c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a04      	ldr	r2, [pc, #16]	; (8009234 <shci_register_io_bus+0x24>)
 8009222:	611a      	str	r2, [r3, #16]

  return;
 8009224:	bf00      	nop
}
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	080093cd 	.word	0x080093cd
 8009234:	08009421 	.word	0x08009421

08009238 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800923c:	f001 f8e2 	bl	800a404 <HW_IPCC_Enable>

  return;
 8009240:	bf00      	nop
}
 8009242:	bd80      	pop	{r7, pc}

08009244 <TL_Init>:


void TL_Init( void )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009248:	4b10      	ldr	r3, [pc, #64]	; (800928c <TL_Init+0x48>)
 800924a:	4a11      	ldr	r2, [pc, #68]	; (8009290 <TL_Init+0x4c>)
 800924c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800924e:	4b0f      	ldr	r3, [pc, #60]	; (800928c <TL_Init+0x48>)
 8009250:	4a10      	ldr	r2, [pc, #64]	; (8009294 <TL_Init+0x50>)
 8009252:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009254:	4b0d      	ldr	r3, [pc, #52]	; (800928c <TL_Init+0x48>)
 8009256:	4a10      	ldr	r2, [pc, #64]	; (8009298 <TL_Init+0x54>)
 8009258:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800925a:	4b0c      	ldr	r3, [pc, #48]	; (800928c <TL_Init+0x48>)
 800925c:	4a0f      	ldr	r2, [pc, #60]	; (800929c <TL_Init+0x58>)
 800925e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009260:	4b0a      	ldr	r3, [pc, #40]	; (800928c <TL_Init+0x48>)
 8009262:	4a0f      	ldr	r2, [pc, #60]	; (80092a0 <TL_Init+0x5c>)
 8009264:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009266:	4b09      	ldr	r3, [pc, #36]	; (800928c <TL_Init+0x48>)
 8009268:	4a0e      	ldr	r2, [pc, #56]	; (80092a4 <TL_Init+0x60>)
 800926a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800926c:	4b07      	ldr	r3, [pc, #28]	; (800928c <TL_Init+0x48>)
 800926e:	4a0e      	ldr	r2, [pc, #56]	; (80092a8 <TL_Init+0x64>)
 8009270:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009272:	4b06      	ldr	r3, [pc, #24]	; (800928c <TL_Init+0x48>)
 8009274:	4a0d      	ldr	r2, [pc, #52]	; (80092ac <TL_Init+0x68>)
 8009276:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009278:	4b04      	ldr	r3, [pc, #16]	; (800928c <TL_Init+0x48>)
 800927a:	4a0d      	ldr	r2, [pc, #52]	; (80092b0 <TL_Init+0x6c>)
 800927c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800927e:	4b03      	ldr	r3, [pc, #12]	; (800928c <TL_Init+0x48>)
 8009280:	4a0c      	ldr	r2, [pc, #48]	; (80092b4 <TL_Init+0x70>)
 8009282:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009284:	f001 f8d2 	bl	800a42c <HW_IPCC_Init>

  return;
 8009288:	bf00      	nop
}
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20030000 	.word	0x20030000
 8009290:	20030028 	.word	0x20030028
 8009294:	20030048 	.word	0x20030048
 8009298:	20030058 	.word	0x20030058
 800929c:	20030064 	.word	0x20030064
 80092a0:	2003006c 	.word	0x2003006c
 80092a4:	20030074 	.word	0x20030074
 80092a8:	2003007c 	.word	0x2003007c
 80092ac:	20030098 	.word	0x20030098
 80092b0:	2003009c 	.word	0x2003009c
 80092b4:	200300a8 	.word	0x200300a8

080092b8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80092c4:	4811      	ldr	r0, [pc, #68]	; (800930c <TL_BLE_Init+0x54>)
 80092c6:	f000 fa27 	bl	8009718 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80092ca:	4b11      	ldr	r3, [pc, #68]	; (8009310 <TL_BLE_Init+0x58>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4a0c      	ldr	r2, [pc, #48]	; (8009314 <TL_BLE_Init+0x5c>)
 80092e4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	4a08      	ldr	r2, [pc, #32]	; (800930c <TL_BLE_Init+0x54>)
 80092ea:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80092ec:	f001 f8b4 	bl	800a458 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a08      	ldr	r2, [pc, #32]	; (8009318 <TL_BLE_Init+0x60>)
 80092f6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	4a07      	ldr	r2, [pc, #28]	; (800931c <TL_BLE_Init+0x64>)
 80092fe:	6013      	str	r3, [r2, #0]

  return 0;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	200300c4 	.word	0x200300c4
 8009310:	20030000 	.word	0x20030000
 8009314:	20030a48 	.word	0x20030a48
 8009318:	20000284 	.word	0x20000284
 800931c:	20000288 	.word	0x20000288

08009320 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800932c:	4b09      	ldr	r3, [pc, #36]	; (8009354 <TL_BLE_SendCmd+0x34>)
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2201      	movs	r2, #1
 8009334:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009336:	4b07      	ldr	r3, [pc, #28]	; (8009354 <TL_BLE_SendCmd+0x34>)
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4619      	mov	r1, r3
 800933e:	2001      	movs	r0, #1
 8009340:	f000 f96c 	bl	800961c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009344:	f001 f892 	bl	800a46c <HW_IPCC_BLE_SendCmd>

  return 0;
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20030000 	.word	0x20030000

08009358 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800935e:	e01c      	b.n	800939a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009360:	1d3b      	adds	r3, r7, #4
 8009362:	4619      	mov	r1, r3
 8009364:	4812      	ldr	r0, [pc, #72]	; (80093b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009366:	f000 fa76 	bl	8009856 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	7a5b      	ldrb	r3, [r3, #9]
 800936e:	2b0f      	cmp	r3, #15
 8009370:	d003      	beq.n	800937a <HW_IPCC_BLE_RxEvtNot+0x22>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	7a5b      	ldrb	r3, [r3, #9]
 8009376:	2b0e      	cmp	r3, #14
 8009378:	d105      	bne.n	8009386 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4619      	mov	r1, r3
 800937e:	2002      	movs	r0, #2
 8009380:	f000 f94c 	bl	800961c <OutputDbgTrace>
 8009384:	e004      	b.n	8009390 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4619      	mov	r1, r3
 800938a:	2003      	movs	r0, #3
 800938c:	f000 f946 	bl	800961c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009390:	4b08      	ldr	r3, [pc, #32]	; (80093b4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	4610      	mov	r0, r2
 8009398:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800939a:	4805      	ldr	r0, [pc, #20]	; (80093b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800939c:	f000 f9cc 	bl	8009738 <LST_is_empty>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0dc      	beq.n	8009360 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80093a6:	bf00      	nop
}
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	200300c4 	.word	0x200300c4
 80093b4:	20000284 	.word	0x20000284

080093b8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4798      	blx	r3

  return;
 80093c2:	bf00      	nop
}
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20000288 	.word	0x20000288

080093cc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80093d8:	480d      	ldr	r0, [pc, #52]	; (8009410 <TL_SYS_Init+0x44>)
 80093da:	f000 f99d 	bl	8009718 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80093de:	4b0d      	ldr	r3, [pc, #52]	; (8009414 <TL_SYS_Init+0x48>)
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4a08      	ldr	r2, [pc, #32]	; (8009410 <TL_SYS_Init+0x44>)
 80093f0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80093f2:	f001 f85d 	bl	800a4b0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a07      	ldr	r2, [pc, #28]	; (8009418 <TL_SYS_Init+0x4c>)
 80093fc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	4a06      	ldr	r2, [pc, #24]	; (800941c <TL_SYS_Init+0x50>)
 8009404:	6013      	str	r3, [r2, #0]

  return 0;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	200300cc 	.word	0x200300cc
 8009414:	20030000 	.word	0x20030000
 8009418:	2000028c 	.word	0x2000028c
 800941c:	20000290 	.word	0x20000290

08009420 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800942c:	4b09      	ldr	r3, [pc, #36]	; (8009454 <TL_SYS_SendCmd+0x34>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2210      	movs	r2, #16
 8009434:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009436:	4b07      	ldr	r3, [pc, #28]	; (8009454 <TL_SYS_SendCmd+0x34>)
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4619      	mov	r1, r3
 800943e:	2004      	movs	r0, #4
 8009440:	f000 f8ec 	bl	800961c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009444:	f001 f83e 	bl	800a4c4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20030000 	.word	0x20030000

08009458 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800945c:	4b07      	ldr	r3, [pc, #28]	; (800947c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4619      	mov	r1, r3
 8009464:	2005      	movs	r0, #5
 8009466:	f000 f8d9 	bl	800961c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800946a:	4b05      	ldr	r3, [pc, #20]	; (8009480 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a03      	ldr	r2, [pc, #12]	; (800947c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009470:	68d2      	ldr	r2, [r2, #12]
 8009472:	6812      	ldr	r2, [r2, #0]
 8009474:	4610      	mov	r0, r2
 8009476:	4798      	blx	r3

  return;
 8009478:	bf00      	nop
}
 800947a:	bd80      	pop	{r7, pc}
 800947c:	20030000 	.word	0x20030000
 8009480:	2000028c 	.word	0x2000028c

08009484 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800948a:	e00e      	b.n	80094aa <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800948c:	1d3b      	adds	r3, r7, #4
 800948e:	4619      	mov	r1, r3
 8009490:	480b      	ldr	r0, [pc, #44]	; (80094c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009492:	f000 f9e0 	bl	8009856 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4619      	mov	r1, r3
 800949a:	2006      	movs	r0, #6
 800949c:	f000 f8be 	bl	800961c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80094a0:	4b08      	ldr	r3, [pc, #32]	; (80094c4 <HW_IPCC_SYS_EvtNot+0x40>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	4610      	mov	r0, r2
 80094a8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80094aa:	4805      	ldr	r0, [pc, #20]	; (80094c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 80094ac:	f000 f944 	bl	8009738 <LST_is_empty>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0ea      	beq.n	800948c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80094b6:	bf00      	nop
}
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	200300cc 	.word	0x200300cc
 80094c4:	20000290 	.word	0x20000290

080094c8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80094d0:	4817      	ldr	r0, [pc, #92]	; (8009530 <TL_MM_Init+0x68>)
 80094d2:	f000 f921 	bl	8009718 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80094d6:	4817      	ldr	r0, [pc, #92]	; (8009534 <TL_MM_Init+0x6c>)
 80094d8:	f000 f91e 	bl	8009718 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80094dc:	4b16      	ldr	r3, [pc, #88]	; (8009538 <TL_MM_Init+0x70>)
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	4a16      	ldr	r2, [pc, #88]	; (800953c <TL_MM_Init+0x74>)
 80094e2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80094e4:	4b15      	ldr	r3, [pc, #84]	; (800953c <TL_MM_Init+0x74>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	6892      	ldr	r2, [r2, #8]
 80094ec:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80094ee:	4b13      	ldr	r3, [pc, #76]	; (800953c <TL_MM_Init+0x74>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	68d2      	ldr	r2, [r2, #12]
 80094f6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80094f8:	4b10      	ldr	r3, [pc, #64]	; (800953c <TL_MM_Init+0x74>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a0c      	ldr	r2, [pc, #48]	; (8009530 <TL_MM_Init+0x68>)
 80094fe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009500:	4b0e      	ldr	r3, [pc, #56]	; (800953c <TL_MM_Init+0x74>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	6812      	ldr	r2, [r2, #0]
 8009508:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800950a:	4b0c      	ldr	r3, [pc, #48]	; (800953c <TL_MM_Init+0x74>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	6852      	ldr	r2, [r2, #4]
 8009512:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009514:	4b09      	ldr	r3, [pc, #36]	; (800953c <TL_MM_Init+0x74>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6912      	ldr	r2, [r2, #16]
 800951c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800951e:	4b07      	ldr	r3, [pc, #28]	; (800953c <TL_MM_Init+0x74>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	6952      	ldr	r2, [r2, #20]
 8009526:	619a      	str	r2, [r3, #24]

  return;
 8009528:	bf00      	nop
}
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	200300b4 	.word	0x200300b4
 8009534:	2000027c 	.word	0x2000027c
 8009538:	20030000 	.word	0x20030000
 800953c:	20000294 	.word	0x20000294

08009540 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	4807      	ldr	r0, [pc, #28]	; (8009568 <TL_MM_EvtDone+0x28>)
 800954c:	f000 f93c 	bl	80097c8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009550:	6879      	ldr	r1, [r7, #4]
 8009552:	2000      	movs	r0, #0
 8009554:	f000 f862 	bl	800961c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009558:	4804      	ldr	r0, [pc, #16]	; (800956c <TL_MM_EvtDone+0x2c>)
 800955a:	f000 ffd9 	bl	800a510 <HW_IPCC_MM_SendFreeBuf>

  return;
 800955e:	bf00      	nop
}
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	2000027c 	.word	0x2000027c
 800956c:	08009571 	.word	0x08009571

08009570 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009576:	e00c      	b.n	8009592 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009578:	1d3b      	adds	r3, r7, #4
 800957a:	4619      	mov	r1, r3
 800957c:	480a      	ldr	r0, [pc, #40]	; (80095a8 <SendFreeBuf+0x38>)
 800957e:	f000 f96a 	bl	8009856 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009582:	4b0a      	ldr	r3, [pc, #40]	; (80095ac <SendFreeBuf+0x3c>)
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	4611      	mov	r1, r2
 800958c:	4618      	mov	r0, r3
 800958e:	f000 f91b 	bl	80097c8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009592:	4805      	ldr	r0, [pc, #20]	; (80095a8 <SendFreeBuf+0x38>)
 8009594:	f000 f8d0 	bl	8009738 <LST_is_empty>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d0ec      	beq.n	8009578 <SendFreeBuf+0x8>
  }

  return;
 800959e:	bf00      	nop
}
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	2000027c 	.word	0x2000027c
 80095ac:	20030000 	.word	0x20030000

080095b0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80095b4:	4805      	ldr	r0, [pc, #20]	; (80095cc <TL_TRACES_Init+0x1c>)
 80095b6:	f000 f8af 	bl	8009718 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80095ba:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <TL_TRACES_Init+0x20>)
 80095bc:	695b      	ldr	r3, [r3, #20]
 80095be:	4a03      	ldr	r2, [pc, #12]	; (80095cc <TL_TRACES_Init+0x1c>)
 80095c0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80095c2:	f000 ffdb 	bl	800a57c <HW_IPCC_TRACES_Init>

  return;
 80095c6:	bf00      	nop
}
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	200300bc 	.word	0x200300bc
 80095d0:	20030000 	.word	0x20030000

080095d4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80095da:	e008      	b.n	80095ee <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80095dc:	1d3b      	adds	r3, r7, #4
 80095de:	4619      	mov	r1, r3
 80095e0:	4808      	ldr	r0, [pc, #32]	; (8009604 <HW_IPCC_TRACES_EvtNot+0x30>)
 80095e2:	f000 f938 	bl	8009856 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 f80d 	bl	8009608 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80095ee:	4805      	ldr	r0, [pc, #20]	; (8009604 <HW_IPCC_TRACES_EvtNot+0x30>)
 80095f0:	f000 f8a2 	bl	8009738 <LST_is_empty>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0f0      	beq.n	80095dc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80095fa:	bf00      	nop
}
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	200300bc 	.word	0x200300bc

08009608 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	4603      	mov	r3, r0
 8009624:	6039      	str	r1, [r7, #0]
 8009626:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	2b06      	cmp	r3, #6
 800962c:	d845      	bhi.n	80096ba <OutputDbgTrace+0x9e>
 800962e:	a201      	add	r2, pc, #4	; (adr r2, 8009634 <OutputDbgTrace+0x18>)
 8009630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009634:	08009651 	.word	0x08009651
 8009638:	08009675 	.word	0x08009675
 800963c:	0800967b 	.word	0x0800967b
 8009640:	0800968f 	.word	0x0800968f
 8009644:	0800969b 	.word	0x0800969b
 8009648:	080096a1 	.word	0x080096a1
 800964c:	080096af 	.word	0x080096af
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	7a5b      	ldrb	r3, [r3, #9]
 8009658:	2bff      	cmp	r3, #255	; 0xff
 800965a:	d005      	beq.n	8009668 <OutputDbgTrace+0x4c>
 800965c:	2bff      	cmp	r3, #255	; 0xff
 800965e:	dc05      	bgt.n	800966c <OutputDbgTrace+0x50>
 8009660:	2b0e      	cmp	r3, #14
 8009662:	d005      	beq.n	8009670 <OutputDbgTrace+0x54>
 8009664:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009666:	e001      	b.n	800966c <OutputDbgTrace+0x50>
          break;
 8009668:	bf00      	nop
 800966a:	e027      	b.n	80096bc <OutputDbgTrace+0xa0>
          break;
 800966c:	bf00      	nop
 800966e:	e025      	b.n	80096bc <OutputDbgTrace+0xa0>
          break;
 8009670:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009672:	e023      	b.n	80096bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009678:	e020      	b.n	80096bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	7a5b      	ldrb	r3, [r3, #9]
 8009682:	2b0e      	cmp	r3, #14
 8009684:	d001      	beq.n	800968a <OutputDbgTrace+0x6e>
 8009686:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009688:	e000      	b.n	800968c <OutputDbgTrace+0x70>
          break;
 800968a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800968c:	e016      	b.n	80096bc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	7a5b      	ldrb	r3, [r3, #9]
 8009696:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009698:	e010      	b.n	80096bc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800969e:	e00d      	b.n	80096bc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	7a5b      	ldrb	r3, [r3, #9]
 80096a8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80096aa:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80096ac:	e006      	b.n	80096bc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	7a5b      	ldrb	r3, [r3, #9]
 80096b6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80096b8:	e000      	b.n	80096bc <OutputDbgTrace+0xa0>

    default:
      break;
 80096ba:	bf00      	nop
  }

  return;
 80096bc:	bf00      	nop
}
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	4603      	mov	r3, r0
 80096d0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80096d2:	4b0f      	ldr	r3, [pc, #60]	; (8009710 <OTP_Read+0x48>)
 80096d4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80096d6:	e002      	b.n	80096de <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3b08      	subs	r3, #8
 80096dc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3307      	adds	r3, #7
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	79fa      	ldrb	r2, [r7, #7]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d003      	beq.n	80096f2 <OTP_Read+0x2a>
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	4a09      	ldr	r2, [pc, #36]	; (8009714 <OTP_Read+0x4c>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d1f2      	bne.n	80096d8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3307      	adds	r3, #7
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	79fa      	ldrb	r2, [r7, #7]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d001      	beq.n	8009702 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80096fe:	2300      	movs	r3, #0
 8009700:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009702:	68fb      	ldr	r3, [r7, #12]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3714      	adds	r7, #20
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr
 8009710:	1fff73f8 	.word	0x1fff73f8
 8009714:	1fff7000 	.word	0x1fff7000

08009718 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	605a      	str	r2, [r3, #4]
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009740:	f3ef 8310 	mrs	r3, PRIMASK
 8009744:	60fb      	str	r3, [r7, #12]
  return(result);
 8009746:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009748:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800974a:	b672      	cpsid	i
}
 800974c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	d102      	bne.n	800975e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009758:	2301      	movs	r3, #1
 800975a:	75fb      	strb	r3, [r7, #23]
 800975c:	e001      	b.n	8009762 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800975e:	2300      	movs	r3, #0
 8009760:	75fb      	strb	r3, [r7, #23]
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f383 8810 	msr	PRIMASK, r3
}
 800976c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800976e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009770:	4618      	mov	r0, r3
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009786:	f3ef 8310 	mrs	r3, PRIMASK
 800978a:	60fb      	str	r3, [r7, #12]
  return(result);
 800978c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800978e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009790:	b672      	cpsid	i
}
 8009792:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	683a      	ldr	r2, [r7, #0]
 80097ae:	605a      	str	r2, [r3, #4]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f383 8810 	msr	PRIMASK, r3
}
 80097ba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80097bc:	bf00      	nop
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097d2:	f3ef 8310 	mrs	r3, PRIMASK
 80097d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80097d8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097dc:	b672      	cpsid	i
}
 80097de:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	601a      	str	r2, [r3, #0]
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f383 8810 	msr	PRIMASK, r3
}
 8009806:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009808:	bf00      	nop
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800981c:	f3ef 8310 	mrs	r3, PRIMASK
 8009820:	60fb      	str	r3, [r7, #12]
  return(result);
 8009822:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009824:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009826:	b672      	cpsid	i
}
 8009828:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	6812      	ldr	r2, [r2, #0]
 8009832:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6852      	ldr	r2, [r2, #4]
 800983c:	605a      	str	r2, [r3, #4]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f383 8810 	msr	PRIMASK, r3
}
 8009848:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800984a:	bf00      	nop
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b086      	sub	sp, #24
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
 800985e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009860:	f3ef 8310 	mrs	r3, PRIMASK
 8009864:	60fb      	str	r3, [r7, #12]
  return(result);
 8009866:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009868:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800986a:	b672      	cpsid	i
}
 800986c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff ffca 	bl	8009814 <LST_remove_node>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	f383 8810 	msr	PRIMASK, r3
}
 800988a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800988c:	bf00      	nop
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8009898:	4b03      	ldr	r3, [pc, #12]	; (80098a8 <LL_FLASH_GetUDN+0x14>)
 800989a:	681b      	ldr	r3, [r3, #0]
}
 800989c:	4618      	mov	r0, r3
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	1fff7580 	.word	0x1fff7580

080098ac <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80098ac:	b480      	push	{r7}
 80098ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80098b0:	4b03      	ldr	r3, [pc, #12]	; (80098c0 <LL_FLASH_GetDeviceID+0x14>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	b2db      	uxtb	r3, r3
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr
 80098c0:	1fff7584 	.word	0x1fff7584

080098c4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80098c4:	b480      	push	{r7}
 80098c6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80098c8:	4b03      	ldr	r3, [pc, #12]	; (80098d8 <LL_FLASH_GetSTCompanyID+0x14>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	0a1b      	lsrs	r3, r3, #8
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	1fff7584 	.word	0x1fff7584

080098dc <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80098dc:	b5b0      	push	{r4, r5, r7, lr}
 80098de:	b08c      	sub	sp, #48	; 0x30
 80098e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80098e2:	4b2a      	ldr	r3, [pc, #168]	; (800998c <APP_BLE_Init+0xb0>)
 80098e4:	463c      	mov	r4, r7
 80098e6:	461d      	mov	r5, r3
 80098e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80098f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80098f8:	f000 f91e 	bl	8009b38 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80098fc:	2101      	movs	r1, #1
 80098fe:	2002      	movs	r0, #2
 8009900:	f000 fe64 	bl	800a5cc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8009904:	4a22      	ldr	r2, [pc, #136]	; (8009990 <APP_BLE_Init+0xb4>)
 8009906:	2100      	movs	r1, #0
 8009908:	2004      	movs	r0, #4
 800990a:	f000 ff73 	bl	800a7f4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800990e:	463b      	mov	r3, r7
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff f999 	bl	8008c48 <SHCI_C2_BLE_Init>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 800991c:	f7f8 fc7c 	bl	8002218 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009920:	f000 f920 	bl	8009b64 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009924:	f7ff f8ec 	bl	8008b00 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009928:	4b1a      	ldr	r3, [pc, #104]	; (8009994 <APP_BLE_Init+0xb8>)
 800992a:	2200      	movs	r2, #0
 800992c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009930:	4b18      	ldr	r3, [pc, #96]	; (8009994 <APP_BLE_Init+0xb8>)
 8009932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009936:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009938:	4a17      	ldr	r2, [pc, #92]	; (8009998 <APP_BLE_Init+0xbc>)
 800993a:	2100      	movs	r1, #0
 800993c:	2001      	movs	r0, #1
 800993e:	f000 ff59 	bl	800a7f4 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8009942:	2006      	movs	r0, #6
 8009944:	f7fe fde8 	bl	8008518 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8009948:	f000 fb92 	bl	800a070 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800994c:	4b13      	ldr	r3, [pc, #76]	; (800999c <APP_BLE_Init+0xc0>)
 800994e:	2200      	movs	r2, #0
 8009950:	4913      	ldr	r1, [pc, #76]	; (80099a0 <APP_BLE_Init+0xc4>)
 8009952:	2000      	movs	r0, #0
 8009954:	f7f7 fb32 	bl	8000fbc <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8009958:	4b12      	ldr	r3, [pc, #72]	; (80099a4 <APP_BLE_Init+0xc8>)
 800995a:	2200      	movs	r2, #0
 800995c:	4912      	ldr	r1, [pc, #72]	; (80099a8 <APP_BLE_Init+0xcc>)
 800995e:	2000      	movs	r0, #0
 8009960:	f7f7 fb2c 	bl	8000fbc <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8009964:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <APP_BLE_Init+0xb8>)
 8009966:	2200      	movs	r2, #0
 8009968:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800996a:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <APP_BLE_Init+0xb8>)
 800996c:	2200      	movs	r2, #0
 800996e:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8009970:	4b0e      	ldr	r3, [pc, #56]	; (80099ac <APP_BLE_Init+0xd0>)
 8009972:	2280      	movs	r2, #128	; 0x80
 8009974:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8009976:	4b0e      	ldr	r3, [pc, #56]	; (80099b0 <APP_BLE_Init+0xd4>)
 8009978:	22a0      	movs	r2, #160	; 0xa0
 800997a:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800997c:	2001      	movs	r0, #1
 800997e:	f000 f9b3 	bl	8009ce8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8009982:	bf00      	nop
}
 8009984:	3730      	adds	r7, #48	; 0x30
 8009986:	46bd      	mov	sp, r7
 8009988:	bdb0      	pop	{r4, r5, r7, pc}
 800998a:	bf00      	nop
 800998c:	0800abe4 	.word	0x0800abe4
 8009990:	08008cdd 	.word	0x08008cdd
 8009994:	20000118 	.word	0x20000118
 8009998:	08009e51 	.word	0x08009e51
 800999c:	08009e91 	.word	0x08009e91
 80099a0:	20000199 	.word	0x20000199
 80099a4:	08009ea1 	.word	0x08009ea1
 80099a8:	2000019a 	.word	0x2000019a
 80099ac:	2000019c 	.word	0x2000019c
 80099b0:	2000019e 	.word	0x2000019e

080099b4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08a      	sub	sp, #40	; 0x28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80099bc:	2342      	movs	r3, #66	; 0x42
 80099be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3301      	adds	r3, #1
 80099c6:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2bff      	cmp	r3, #255	; 0xff
 80099ce:	f000 8081 	beq.w	8009ad4 <SVCCTL_App_Notification+0x120>
 80099d2:	2bff      	cmp	r3, #255	; 0xff
 80099d4:	f300 80a2 	bgt.w	8009b1c <SVCCTL_App_Notification+0x168>
 80099d8:	2b05      	cmp	r3, #5
 80099da:	d002      	beq.n	80099e2 <SVCCTL_App_Notification+0x2e>
 80099dc:	2b3e      	cmp	r3, #62	; 0x3e
 80099de:	d020      	beq.n	8009a22 <SVCCTL_App_Notification+0x6e>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80099e0:	e09c      	b.n	8009b1c <SVCCTL_App_Notification+0x168>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	3302      	adds	r3, #2
 80099e6:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	4b4e      	ldr	r3, [pc, #312]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 80099f2:	8adb      	ldrh	r3, [r3, #22]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d106      	bne.n	8009a06 <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80099f8:	4b4c      	ldr	r3, [pc, #304]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80099fe:	4b4b      	ldr	r3, [pc, #300]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8009a06:	2001      	movs	r0, #1
 8009a08:	f000 f96e 	bl	8009ce8 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8009a0c:	4b48      	ldr	r3, [pc, #288]	; (8009b30 <SVCCTL_App_Notification+0x17c>)
 8009a0e:	2201      	movs	r2, #1
 8009a10:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009a12:	4b46      	ldr	r3, [pc, #280]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009a14:	8ada      	ldrh	r2, [r3, #22]
 8009a16:	4b46      	ldr	r3, [pc, #280]	; (8009b30 <SVCCTL_App_Notification+0x17c>)
 8009a18:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8009a1a:	4845      	ldr	r0, [pc, #276]	; (8009b30 <SVCCTL_App_Notification+0x17c>)
 8009a1c:	f000 fb14 	bl	800a048 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009a20:	e07f      	b.n	8009b22 <SVCCTL_App_Notification+0x16e>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	3302      	adds	r3, #2
 8009a26:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	2b0c      	cmp	r3, #12
 8009a2e:	d005      	beq.n	8009a3c <SVCCTL_App_Notification+0x88>
 8009a30:	2b0c      	cmp	r3, #12
 8009a32:	dc4b      	bgt.n	8009acc <SVCCTL_App_Notification+0x118>
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d017      	beq.n	8009a68 <SVCCTL_App_Notification+0xb4>
 8009a38:	2b03      	cmp	r3, #3
          break;
 8009a3a:	e047      	b.n	8009acc <SVCCTL_App_Notification+0x118>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8009a42:	4b3a      	ldr	r3, [pc, #232]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009a44:	8adb      	ldrh	r3, [r3, #22]
 8009a46:	f107 020a 	add.w	r2, r7, #10
 8009a4a:	f107 010b 	add.w	r1, r7, #11
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe fdd0 	bl	80085f4 <hci_le_read_phy>
 8009a54:	4603      	mov	r3, r0
 8009a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8009a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d136      	bne.n	8009ad0 <SVCCTL_App_Notification+0x11c>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8009a62:	7afb      	ldrb	r3, [r7, #11]
 8009a64:	2b02      	cmp	r3, #2
          break;
 8009a66:	e033      	b.n	8009ad0 <SVCCTL_App_Notification+0x11c>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8009a68:	69bb      	ldr	r3, [r7, #24]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8009a6e:	4b2f      	ldr	r3, [pc, #188]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009a70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7f7 fb1b 	bl	80010b0 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009a7a:	4b2c      	ldr	r3, [pc, #176]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009a7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	d104      	bne.n	8009a8e <SVCCTL_App_Notification+0xda>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009a84:	4b29      	ldr	r3, [pc, #164]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009a86:	2206      	movs	r2, #6
 8009a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009a8c:	e003      	b.n	8009a96 <SVCCTL_App_Notification+0xe2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009a8e:	4b27      	ldr	r3, [pc, #156]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009a90:	2205      	movs	r2, #5
 8009a92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	4b23      	ldr	r3, [pc, #140]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009aa0:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8009aa2:	4b23      	ldr	r3, [pc, #140]	; (8009b30 <SVCCTL_App_Notification+0x17c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009aa8:	4b20      	ldr	r3, [pc, #128]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009aaa:	8ada      	ldrh	r2, [r3, #22]
 8009aac:	4b20      	ldr	r3, [pc, #128]	; (8009b30 <SVCCTL_App_Notification+0x17c>)
 8009aae:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8009ab0:	481f      	ldr	r0, [pc, #124]	; (8009b30 <SVCCTL_App_Notification+0x17c>)
 8009ab2:	f000 fac9 	bl	800a048 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8009ab6:	4b1e      	ldr	r3, [pc, #120]	; (8009b30 <SVCCTL_App_Notification+0x17c>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009abc:	4b1b      	ldr	r3, [pc, #108]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009abe:	8ada      	ldrh	r2, [r3, #22]
 8009ac0:	4b1b      	ldr	r3, [pc, #108]	; (8009b30 <SVCCTL_App_Notification+0x17c>)
 8009ac2:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8009ac4:	481a      	ldr	r0, [pc, #104]	; (8009b30 <SVCCTL_App_Notification+0x17c>)
 8009ac6:	f000 fabf 	bl	800a048 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009aca:	e002      	b.n	8009ad2 <SVCCTL_App_Notification+0x11e>
          break;
 8009acc:	bf00      	nop
 8009ace:	e028      	b.n	8009b22 <SVCCTL_App_Notification+0x16e>
          break;
 8009ad0:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8009ad2:	e026      	b.n	8009b22 <SVCCTL_App_Notification+0x16e>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ae4:	d016      	beq.n	8009b14 <SVCCTL_App_Notification+0x160>
 8009ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aea:	dc19      	bgt.n	8009b20 <SVCCTL_App_Notification+0x16c>
 8009aec:	2b04      	cmp	r3, #4
 8009aee:	d004      	beq.n	8009afa <SVCCTL_App_Notification+0x146>
 8009af0:	f240 4207 	movw	r2, #1031	; 0x407
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d00f      	beq.n	8009b18 <SVCCTL_App_Notification+0x164>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009af8:	e012      	b.n	8009b20 <SVCCTL_App_Notification+0x16c>
        	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1); // Turn on LED1
 8009afa:	2201      	movs	r2, #1
 8009afc:	2101      	movs	r1, #1
 8009afe:	480d      	ldr	r0, [pc, #52]	; (8009b34 <SVCCTL_App_Notification+0x180>)
 8009b00:	f7fa fe66 	bl	80047d0 <HAL_GPIO_WritePin>
			HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8009b04:	4b09      	ldr	r3, [pc, #36]	; (8009b2c <SVCCTL_App_Notification+0x178>)
 8009b06:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009b0a:	210a      	movs	r1, #10
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7f7 fb5b 	bl	80011c8 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009b12:	e002      	b.n	8009b1a <SVCCTL_App_Notification+0x166>
      break;
 8009b14:	bf00      	nop
 8009b16:	e003      	b.n	8009b20 <SVCCTL_App_Notification+0x16c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009b18:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009b1a:	e001      	b.n	8009b20 <SVCCTL_App_Notification+0x16c>
      break;
 8009b1c:	bf00      	nop
 8009b1e:	e000      	b.n	8009b22 <SVCCTL_App_Notification+0x16e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009b20:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009b22:	2301      	movs	r3, #1
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3728      	adds	r7, #40	; 0x28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	20000118 	.word	0x20000118
 8009b30:	200005b0 	.word	0x200005b0
 8009b34:	48000400 	.word	0x48000400

08009b38 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009b3e:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <Ble_Tl_Init+0x20>)
 8009b40:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009b42:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <Ble_Tl_Init+0x24>)
 8009b44:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009b46:	463b      	mov	r3, r7
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4805      	ldr	r0, [pc, #20]	; (8009b60 <Ble_Tl_Init+0x28>)
 8009b4c:	f7ff f8aa 	bl	8008ca4 <hci_init>

  return;
 8009b50:	bf00      	nop
}
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	200300d4 	.word	0x200300d4
 8009b5c:	08009f35 	.word	0x08009f35
 8009b60:	08009efd 	.word	0x08009efd

08009b64 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8009b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b66:	b08f      	sub	sp, #60	; 0x3c
 8009b68:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8009b6e:	f7fe fd1d 	bl	80085ac <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8009b72:	f000 f929 	bl	8009dc8 <BleGetBdAddress>
 8009b76:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8009b78:	69fa      	ldr	r2, [r7, #28]
 8009b7a:	2106      	movs	r1, #6
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f7fe fc0b 	bl	8008398 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	795a      	ldrb	r2, [r3, #5]
 8009b86:	4b52      	ldr	r3, [pc, #328]	; (8009cd0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009b88:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	791a      	ldrb	r2, [r3, #4]
 8009b8e:	4b50      	ldr	r3, [pc, #320]	; (8009cd0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009b90:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	78da      	ldrb	r2, [r3, #3]
 8009b96:	4b4e      	ldr	r3, [pc, #312]	; (8009cd0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009b98:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	789a      	ldrb	r2, [r3, #2]
 8009b9e:	4b4c      	ldr	r3, [pc, #304]	; (8009cd0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009ba0:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	785a      	ldrb	r2, [r3, #1]
 8009ba6:	4b4a      	ldr	r3, [pc, #296]	; (8009cd0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009ba8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	781a      	ldrb	r2, [r3, #0]
 8009bae:	4b48      	ldr	r3, [pc, #288]	; (8009cd0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009bb0:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8009bb2:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8009bb6:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8009bb8:	f7ff fe6c 	bl	8009894 <LL_FLASH_GetUDN>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8009bc0:	1d3b      	adds	r3, r7, #4
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	2106      	movs	r1, #6
 8009bc6:	202e      	movs	r0, #46	; 0x2e
 8009bc8:	f7fe fbe6 	bl	8008398 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8009bcc:	4a41      	ldr	r2, [pc, #260]	; (8009cd4 <Ble_Hci_Gap_Gatt_Init+0x170>)
 8009bce:	2110      	movs	r1, #16
 8009bd0:	2018      	movs	r0, #24
 8009bd2:	f7fe fbe1 	bl	8008398 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8009bd6:	4a40      	ldr	r2, [pc, #256]	; (8009cd8 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8009bd8:	2110      	movs	r1, #16
 8009bda:	2008      	movs	r0, #8
 8009bdc:	f7fe fbdc 	bl	8008398 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8009be0:	2118      	movs	r1, #24
 8009be2:	2001      	movs	r0, #1
 8009be4:	f7fe fc41 	bl	800846a <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8009be8:	f7fe f991 	bl	8007f0e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009bf0:	7efb      	ldrb	r3, [r7, #27]
 8009bf2:	f043 0301 	orr.w	r3, r3, #1
 8009bf6:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8009bf8:	7efb      	ldrb	r3, [r7, #27]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01e      	beq.n	8009c3c <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "PWRON1";
 8009bfe:	4b37      	ldr	r3, [pc, #220]	; (8009cdc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8009c00:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8009c02:	f107 0212 	add.w	r2, r7, #18
 8009c06:	7ef8      	ldrb	r0, [r7, #27]
 8009c08:	f107 030e 	add.w	r3, r7, #14
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	f107 0310 	add.w	r3, r7, #16
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	4613      	mov	r3, r2
 8009c16:	2207      	movs	r2, #7
 8009c18:	2100      	movs	r1, #0
 8009c1a:	f7fe f86d 	bl	8007cf8 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8009c1e:	8a7c      	ldrh	r4, [r7, #18]
 8009c20:	8a3d      	ldrh	r5, [r7, #16]
 8009c22:	6978      	ldr	r0, [r7, #20]
 8009c24:	f7f6 faaa 	bl	800017c <strlen>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4613      	mov	r3, r2
 8009c32:	2200      	movs	r2, #0
 8009c34:	4629      	mov	r1, r5
 8009c36:	4620      	mov	r0, r4
 8009c38:	f7fe fb27 	bl	800828a <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8009c3c:	8a78      	ldrh	r0, [r7, #18]
 8009c3e:	89f9      	ldrh	r1, [r7, #14]
 8009c40:	463b      	mov	r3, r7
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	2302      	movs	r3, #2
 8009c46:	2200      	movs	r2, #0
 8009c48:	f7fe fb1f 	bl	800828a <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	2102      	movs	r1, #2
 8009c50:	2000      	movs	r0, #0
 8009c52:	f7fe fd37 	bl	80086c4 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009c56:	4b22      	ldr	r3, [pc, #136]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c58:	2201      	movs	r2, #1
 8009c5a:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009c5c:	4b20      	ldr	r3, [pc, #128]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fd ff57 	bl	8007b14 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009c66:	4b1e      	ldr	r3, [pc, #120]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c68:	2201      	movs	r2, #1
 8009c6a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009c6c:	4b1c      	ldr	r3, [pc, #112]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c6e:	2208      	movs	r2, #8
 8009c70:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009c72:	4b1b      	ldr	r3, [pc, #108]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c74:	2210      	movs	r2, #16
 8009c76:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009c78:	4b19      	ldr	r3, [pc, #100]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8009c7e:	4b18      	ldr	r3, [pc, #96]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c80:	4a18      	ldr	r2, [pc, #96]	; (8009ce4 <Ble_Hci_Gap_Gatt_Init+0x180>)
 8009c82:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009c84:	4b16      	ldr	r3, [pc, #88]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c86:	2201      	movs	r2, #1
 8009c88:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009c8a:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c8c:	789c      	ldrb	r4, [r3, #2]
 8009c8e:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c90:	785d      	ldrb	r5, [r3, #1]
 8009c92:	4b13      	ldr	r3, [pc, #76]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c94:	791b      	ldrb	r3, [r3, #4]
 8009c96:	4a12      	ldr	r2, [pc, #72]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c98:	7952      	ldrb	r2, [r2, #5]
 8009c9a:	4911      	ldr	r1, [pc, #68]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c9c:	78c9      	ldrb	r1, [r1, #3]
 8009c9e:	4810      	ldr	r0, [pc, #64]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009ca0:	6880      	ldr	r0, [r0, #8]
 8009ca2:	2600      	movs	r6, #0
 8009ca4:	9604      	str	r6, [sp, #16]
 8009ca6:	9003      	str	r0, [sp, #12]
 8009ca8:	9102      	str	r1, [sp, #8]
 8009caa:	9201      	str	r2, [sp, #4]
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f7fd ff77 	bl	8007ba8 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009cbc:	789b      	ldrb	r3, [r3, #2]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 8009cc2:	f7fe f900 	bl	8007ec6 <aci_gap_configure_whitelist>
   }
}
 8009cc6:	bf00      	nop
 8009cc8:	3724      	adds	r7, #36	; 0x24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000010 	.word	0x20000010
 8009cd4:	0800adfc 	.word	0x0800adfc
 8009cd8:	0800ae0c 	.word	0x0800ae0c
 8009cdc:	0800ac14 	.word	0x0800ac14
 8009ce0:	20000118 	.word	0x20000118
 8009ce4:	0001b207 	.word	0x0001b207

08009ce8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08c      	sub	sp, #48	; 0x30
 8009cec:	af08      	add	r7, sp, #32
 8009cee:	4603      	mov	r3, r0
 8009cf0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009cf2:	2342      	movs	r3, #66	; 0x42
 8009cf4:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8009cf6:	79fb      	ldrb	r3, [r7, #7]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d106      	bne.n	8009d0a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8009cfc:	4b2b      	ldr	r3, [pc, #172]	; (8009dac <Adv_Request+0xc4>)
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8009d02:	4b2b      	ldr	r3, [pc, #172]	; (8009db0 <Adv_Request+0xc8>)
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	81bb      	strh	r3, [r7, #12]
 8009d08:	e005      	b.n	8009d16 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8009d0a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8009d0e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8009d10:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8009d14:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8009d16:	4b27      	ldr	r3, [pc, #156]	; (8009db4 <Adv_Request+0xcc>)
 8009d18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7f7 f9c7 	bl	80010b0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8009d22:	79fb      	ldrb	r3, [r7, #7]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d10d      	bne.n	8009d44 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8009d28:	4b22      	ldr	r3, [pc, #136]	; (8009db4 <Adv_Request+0xcc>)
 8009d2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d004      	beq.n	8009d3c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8009d32:	4b20      	ldr	r3, [pc, #128]	; (8009db4 <Adv_Request+0xcc>)
 8009d34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d103      	bne.n	8009d44 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8009d3c:	f7fd fde8 	bl	8007910 <aci_gap_set_non_discoverable>
 8009d40:	4603      	mov	r3, r0
 8009d42:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8009d44:	4a1b      	ldr	r2, [pc, #108]	; (8009db4 <Adv_Request+0xcc>)
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8009d4c:	4b19      	ldr	r3, [pc, #100]	; (8009db4 <Adv_Request+0xcc>)
 8009d4e:	7e1b      	ldrb	r3, [r3, #24]
 8009d50:	89ba      	ldrh	r2, [r7, #12]
 8009d52:	89f9      	ldrh	r1, [r7, #14]
 8009d54:	2000      	movs	r0, #0
 8009d56:	9006      	str	r0, [sp, #24]
 8009d58:	2000      	movs	r0, #0
 8009d5a:	9005      	str	r0, [sp, #20]
 8009d5c:	4816      	ldr	r0, [pc, #88]	; (8009db8 <Adv_Request+0xd0>)
 8009d5e:	9004      	str	r0, [sp, #16]
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	4b16      	ldr	r3, [pc, #88]	; (8009dbc <Adv_Request+0xd4>)
 8009d64:	9302      	str	r3, [sp, #8]
 8009d66:	2307      	movs	r3, #7
 8009d68:	9301      	str	r3, [sp, #4]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	2000      	movs	r0, #0
 8009d72:	f7fd fdf1 	bl	8007958 <aci_gap_set_discoverable>
 8009d76:	4603      	mov	r3, r0
 8009d78:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8009d7a:	4911      	ldr	r1, [pc, #68]	; (8009dc0 <Adv_Request+0xd8>)
 8009d7c:	200e      	movs	r0, #14
 8009d7e:	f7fe f846 	bl	8007e0e <aci_gap_update_adv_data>
 8009d82:	4603      	mov	r3, r0
 8009d84:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8009d86:	7afb      	ldrb	r3, [r7, #11]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8009d8c:	79fb      	ldrb	r3, [r7, #7]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d107      	bne.n	8009da2 <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8009d92:	4b08      	ldr	r3, [pc, #32]	; (8009db4 <Adv_Request+0xcc>)
 8009d94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d98:	490a      	ldr	r1, [pc, #40]	; (8009dc4 <Adv_Request+0xdc>)
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7f7 fa14 	bl	80011c8 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8009da0:	bf00      	nop
 8009da2:	bf00      	nop
}
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	2000019c 	.word	0x2000019c
 8009db0:	2000019e 	.word	0x2000019e
 8009db4:	20000118 	.word	0x20000118
 8009db8:	20000131 	.word	0x20000131
 8009dbc:	0800ae1c 	.word	0x0800ae1c
 8009dc0:	20000010 	.word	0x20000010
 8009dc4:	0001e046 	.word	0x0001e046

08009dc8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8009dce:	f7ff fd61 	bl	8009894 <LL_FLASH_GetUDN>
 8009dd2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dda:	d023      	beq.n	8009e24 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009ddc:	f7ff fd72 	bl	80098c4 <LL_FLASH_GetSTCompanyID>
 8009de0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009de2:	f7ff fd63 	bl	80098ac <LL_FLASH_GetDeviceID>
 8009de6:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	4b16      	ldr	r3, [pc, #88]	; (8009e48 <BleGetBdAddress+0x80>)
 8009dee:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	0a1b      	lsrs	r3, r3, #8
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	4b14      	ldr	r3, [pc, #80]	; (8009e48 <BleGetBdAddress+0x80>)
 8009df8:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	4b12      	ldr	r3, [pc, #72]	; (8009e48 <BleGetBdAddress+0x80>)
 8009e00:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	4b10      	ldr	r3, [pc, #64]	; (8009e48 <BleGetBdAddress+0x80>)
 8009e08:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	0a1b      	lsrs	r3, r3, #8
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	4b0d      	ldr	r3, [pc, #52]	; (8009e48 <BleGetBdAddress+0x80>)
 8009e12:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	0c1b      	lsrs	r3, r3, #16
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	4b0b      	ldr	r3, [pc, #44]	; (8009e48 <BleGetBdAddress+0x80>)
 8009e1c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8009e1e:	4b0a      	ldr	r3, [pc, #40]	; (8009e48 <BleGetBdAddress+0x80>)
 8009e20:	617b      	str	r3, [r7, #20]
 8009e22:	e00b      	b.n	8009e3c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8009e24:	2000      	movs	r0, #0
 8009e26:	f7ff fc4f 	bl	80096c8 <OTP_Read>
 8009e2a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d002      	beq.n	8009e38 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	617b      	str	r3, [r7, #20]
 8009e36:	e001      	b.n	8009e3c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8009e38:	4b04      	ldr	r3, [pc, #16]	; (8009e4c <BleGetBdAddress+0x84>)
 8009e3a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8009e3c:	697b      	ldr	r3, [r7, #20]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20000298 	.word	0x20000298
 8009e4c:	0800adf4 	.word	0x0800adf4

08009e50 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);// Turn off LED1
 8009e56:	2200      	movs	r2, #0
 8009e58:	2101      	movs	r1, #1
 8009e5a:	480b      	ldr	r0, [pc, #44]	; (8009e88 <Adv_Cancel+0x38>)
 8009e5c:	f7fa fcb8 	bl	80047d0 <HAL_GPIO_WritePin>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <Adv_Cancel+0x3c>)
 8009e62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d00a      	beq.n	8009e80 <Adv_Cancel+0x30>

  {

    tBleStatus result = 0x00;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8009e6e:	f7fd fd4f 	bl	8007910 <aci_gap_set_non_discoverable>
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009e76:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <Adv_Cancel+0x3c>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8009e7e:	bf00      	nop
 8009e80:	bf00      	nop
}
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	48000400 	.word	0x48000400
 8009e8c:	20000118 	.word	0x20000118

08009e90 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8009e94:	2100      	movs	r1, #0
 8009e96:	2001      	movs	r0, #1
 8009e98:	f000 fcce 	bl	800a838 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8009e9c:	bf00      	nop
}
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);// Turn off LED1
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	4802      	ldr	r0, [pc, #8]	; (8009eb4 <Switch_OFF_GPIO+0x14>)
 8009eaa:	f7fa fc91 	bl	80047d0 <HAL_GPIO_WritePin>
/* USER CODE END Switch_OFF_GPIO */
}
 8009eae:	bf00      	nop
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	48000400 	.word	0x48000400

08009eb8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	2004      	movs	r0, #4
 8009ec4:	f000 fcb8 	bl	800a838 <UTIL_SEQ_SetTask>
  return;
 8009ec8:	bf00      	nop
}
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009ed8:	2001      	movs	r0, #1
 8009eda:	f000 fd19 	bl	800a910 <UTIL_SEQ_SetEvt>
  return;
 8009ede:	bf00      	nop
}
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009eee:	2001      	movs	r0, #1
 8009ef0:	f000 fd2e 	bl	800a950 <UTIL_SEQ_WaitEvt>
  return;
 8009ef4:	bf00      	nop
}
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7fe fe46 	bl	8008ba0 <SVCCTL_UserEvtRx>
 8009f14:	4603      	mov	r3, r0
 8009f16:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009f18:	7afb      	ldrb	r3, [r7, #11]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2201      	movs	r2, #1
 8009f22:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8009f24:	e002      	b.n	8009f2c <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	701a      	strb	r2, [r3, #0]
}
 8009f2c:	bf00      	nop
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8009f3e:	79fb      	ldrb	r3, [r7, #7]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <BLE_StatusNot+0x16>
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d006      	beq.n	8009f56 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8009f48:	e00b      	b.n	8009f62 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009f4a:	2307      	movs	r3, #7
 8009f4c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f000 fc9e 	bl	800a890 <UTIL_SEQ_PauseTask>
      break;
 8009f54:	e005      	b.n	8009f62 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009f56:	2307      	movs	r3, #7
 8009f58:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 fcb8 	bl	800a8d0 <UTIL_SEQ_ResumeTask>
      break;
 8009f60:	bf00      	nop
  }
  return;
 8009f62:	bf00      	nop
}
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d014      	beq.n	8009fa6 <P2PS_STM_App_Notification+0x3a>
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	dc55      	bgt.n	800a02c <P2PS_STM_App_Notification+0xc0>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <P2PS_STM_App_Notification+0x1e>
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d007      	beq.n	8009f98 <P2PS_STM_App_Notification+0x2c>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8009f88:	e050      	b.n	800a02c <P2PS_STM_App_Notification+0xc0>
      P2P_Server_App_Context.Notification_Status = 1;
 8009f8a:	4b2c      	ldr	r3, [pc, #176]	; (800a03c <P2PS_STM_App_Notification+0xd0>)
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	701a      	strb	r2, [r3, #0]
      Custom_Notification = 1;
 8009f90:	4b2b      	ldr	r3, [pc, #172]	; (800a040 <P2PS_STM_App_Notification+0xd4>)
 8009f92:	2201      	movs	r2, #1
 8009f94:	701a      	strb	r2, [r3, #0]
      break;
 8009f96:	e04c      	b.n	800a032 <P2PS_STM_App_Notification+0xc6>
      P2P_Server_App_Context.Notification_Status = 0;
 8009f98:	4b28      	ldr	r3, [pc, #160]	; (800a03c <P2PS_STM_App_Notification+0xd0>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	701a      	strb	r2, [r3, #0]
      Custom_Notification = 0;
 8009f9e:	4b28      	ldr	r3, [pc, #160]	; (800a040 <P2PS_STM_App_Notification+0xd4>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
      break;
 8009fa4:	e045      	b.n	800a032 <P2PS_STM_App_Notification+0xc6>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d11b      	bne.n	8009fe8 <P2PS_STM_App_Notification+0x7c>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d107      	bne.n	8009fcc <P2PS_STM_App_Notification+0x60>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1); // Turn on LED2
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	2102      	movs	r1, #2
 8009fc0:	4820      	ldr	r0, [pc, #128]	; (800a044 <P2PS_STM_App_Notification+0xd8>)
 8009fc2:	f7fa fc05 	bl	80047d0 <HAL_GPIO_WritePin>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8009fc6:	4b1d      	ldr	r3, [pc, #116]	; (800a03c <P2PS_STM_App_Notification+0xd0>)
 8009fc8:	2201      	movs	r2, #1
 8009fca:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d107      	bne.n	8009fe8 <P2PS_STM_App_Notification+0x7c>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0); // Turn off LED2
 8009fd8:	2200      	movs	r2, #0
 8009fda:	2102      	movs	r1, #2
 8009fdc:	4819      	ldr	r0, [pc, #100]	; (800a044 <P2PS_STM_App_Notification+0xd8>)
 8009fde:	f7fa fbf7 	bl	80047d0 <HAL_GPIO_WritePin>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8009fe2:	4b16      	ldr	r3, [pc, #88]	; (800a03c <P2PS_STM_App_Notification+0xd0>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d11e      	bne.n	800a030 <P2PS_STM_App_Notification+0xc4>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d107      	bne.n	800a00e <P2PS_STM_App_Notification+0xa2>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1); // Turn on LED2
 8009ffe:	2201      	movs	r2, #1
 800a000:	2102      	movs	r1, #2
 800a002:	4810      	ldr	r0, [pc, #64]	; (800a044 <P2PS_STM_App_Notification+0xd8>)
 800a004:	f7fa fbe4 	bl	80047d0 <HAL_GPIO_WritePin>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800a008:	4b0c      	ldr	r3, [pc, #48]	; (800a03c <P2PS_STM_App_Notification+0xd0>)
 800a00a:	2201      	movs	r2, #1
 800a00c:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	3301      	adds	r3, #1
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10a      	bne.n	800a030 <P2PS_STM_App_Notification+0xc4>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0); // Turn off LED2
 800a01a:	2200      	movs	r2, #0
 800a01c:	2102      	movs	r1, #2
 800a01e:	4809      	ldr	r0, [pc, #36]	; (800a044 <P2PS_STM_App_Notification+0xd8>)
 800a020:	f7fa fbd6 	bl	80047d0 <HAL_GPIO_WritePin>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800a024:	4b05      	ldr	r3, [pc, #20]	; (800a03c <P2PS_STM_App_Notification+0xd0>)
 800a026:	2200      	movs	r2, #0
 800a028:	709a      	strb	r2, [r3, #2]
      break;
 800a02a:	e001      	b.n	800a030 <P2PS_STM_App_Notification+0xc4>
      break;
 800a02c:	bf00      	nop
 800a02e:	e000      	b.n	800a032 <P2PS_STM_App_Notification+0xc6>
      break;
 800a030:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800a032:	bf00      	nop
}
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	200001a0 	.word	0x200001a0
 800a040:	20000218 	.word	0x20000218
 800a044:	48000400 	.word	0x48000400

0800a048 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <P2PS_APP_Notification+0x1c>
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d000      	beq.n	800a05e <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800a05c:	e003      	b.n	800a066 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();
 800a05e:	f000 f819 	bl	800a094 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 800a062:	e000      	b.n	800a066 <P2PS_APP_Notification+0x1e>
    break;
 800a064:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800a066:	bf00      	nop
}
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
	...

0800a070 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 800a074:	4a05      	ldr	r2, [pc, #20]	; (800a08c <P2PS_APP_Init+0x1c>)
 800a076:	2100      	movs	r1, #0
 800a078:	2002      	movs	r0, #2
 800a07a:	f000 fbbb 	bl	800a7f4 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800a07e:	4b04      	ldr	r3, [pc, #16]	; (800a090 <P2PS_APP_Init+0x20>)
 800a080:	2200      	movs	r2, #0
 800a082:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 800a084:	f000 f806 	bl	800a094 <P2PS_APP_LED_BUTTON_context_Init>

/* USER CODE END P2PS_APP_Init */
  return;
 800a088:	bf00      	nop
}
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	0800a0c9 	.word	0x0800a0c9
 800a090:	200001a0 	.word	0x200001a0

0800a094 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0); // Turn off LED2
 800a098:	2200      	movs	r2, #0
 800a09a:	2102      	movs	r1, #2
 800a09c:	4808      	ldr	r0, [pc, #32]	; (800a0c0 <P2PS_APP_LED_BUTTON_context_Init+0x2c>)
 800a09e:	f7fa fb97 	bl	80047d0 <HAL_GPIO_WritePin>
  
#if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 800a0a2:	4b08      	ldr	r3, [pc, #32]	; (800a0c4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 800a0a8:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 800a0ae:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800a0b4:	4b03      	ldr	r3, [pc, #12]	; (800a0c4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 800a0ba:	bf00      	nop
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	48000400 	.word	0x48000400
 800a0c4:	200001a0 	.word	0x200001a0

0800a0c8 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
  }
 */

   if(P2P_Server_App_Context.Notification_Status){ 
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <P2PS_Send_Notification+0x1c>)
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d005      	beq.n	800a0e0 <P2PS_Send_Notification+0x18>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(0xfe42, (uint8_t *)&BTdata);
 800a0d4:	4904      	ldr	r1, [pc, #16]	; (800a0e8 <P2PS_Send_Notification+0x20>)
 800a0d6:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800a0da:	f7fe fc7f 	bl	80089dc <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
}
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	200001a0 	.word	0x200001a0
 800a0e8:	200001d0 	.word	0x200001d0

0800a0ec <LL_PWR_EnableBootC2>:
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <LL_PWR_EnableBootC2+0x1c>)
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	4a04      	ldr	r2, [pc, #16]	; (800a108 <LL_PWR_EnableBootC2+0x1c>)
 800a0f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0fa:	60d3      	str	r3, [r2, #12]
}
 800a0fc:	bf00      	nop
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	58000400 	.word	0x58000400

0800a10c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a114:	4b06      	ldr	r3, [pc, #24]	; (800a130 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a116:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a11a:	4905      	ldr	r1, [pc, #20]	; (800a130 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4313      	orrs	r3, r2
 800a120:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	58000800 	.word	0x58000800

0800a134 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a13e:	6a1a      	ldr	r2, [r3, #32]
 800a140:	4904      	ldr	r1, [pc, #16]	; (800a154 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4313      	orrs	r3, r2
 800a146:	620b      	str	r3, [r1, #32]
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	58000800 	.word	0x58000800

0800a158 <LL_AHB3_GRP1_EnableClock>:
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4013      	ands	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a17c:	68fb      	ldr	r3, [r7, #12]
}
 800a17e:	bf00      	nop
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b085      	sub	sp, #20
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a196:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a19a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a1a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1aa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
}
 800a1b6:	bf00      	nop
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <LL_C1_IPCC_EnableIT_TXF>:
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	601a      	str	r2, [r3, #0]
}
 800a1d6:	bf00      	nop
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <LL_C1_IPCC_EnableIT_RXO>:
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f043 0201 	orr.w	r2, r3, #1
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	601a      	str	r2, [r3, #0]
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800a202:	b480      	push	{r7}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	43db      	mvns	r3, r3
 800a216:	401a      	ands	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	605a      	str	r2, [r3, #4]
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	041b      	lsls	r3, r3, #16
 800a23a:	431a      	orrs	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	605a      	str	r2, [r3, #4]
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	43db      	mvns	r3, r3
 800a25e:	401a      	ands	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	605a      	str	r2, [r3, #4]
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr

0800a270 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	609a      	str	r2, [r3, #8]
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <LL_C1_IPCC_SetFlag_CHx>:
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	041a      	lsls	r2, r3, #16
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	609a      	str	r2, [r3, #8]
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68da      	ldr	r2, [r3, #12]
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	683a      	ldr	r2, [r7, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d101      	bne.n	800a2c6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	69da      	ldr	r2, [r3, #28]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d101      	bne.n	800a2f0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e000      	b.n	800a2f2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
	...

0800a300 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a304:	2102      	movs	r1, #2
 800a306:	4819      	ldr	r0, [pc, #100]	; (800a36c <HW_IPCC_Rx_Handler+0x6c>)
 800a308:	f7ff ffe4 	bl	800a2d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d009      	beq.n	800a326 <HW_IPCC_Rx_Handler+0x26>
 800a312:	4b16      	ldr	r3, [pc, #88]	; (800a36c <HW_IPCC_Rx_Handler+0x6c>)
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	43db      	mvns	r3, r3
 800a318:	f003 0302 	and.w	r3, r3, #2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800a320:	f000 f8ea 	bl	800a4f8 <HW_IPCC_SYS_EvtHandler>
 800a324:	e01f      	b.n	800a366 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a326:	2101      	movs	r1, #1
 800a328:	4810      	ldr	r0, [pc, #64]	; (800a36c <HW_IPCC_Rx_Handler+0x6c>)
 800a32a:	f7ff ffd3 	bl	800a2d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d008      	beq.n	800a346 <HW_IPCC_Rx_Handler+0x46>
 800a334:	4b0d      	ldr	r3, [pc, #52]	; (800a36c <HW_IPCC_Rx_Handler+0x6c>)
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800a340:	f000 f89e 	bl	800a480 <HW_IPCC_BLE_EvtHandler>
 800a344:	e00f      	b.n	800a366 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a346:	2108      	movs	r1, #8
 800a348:	4808      	ldr	r0, [pc, #32]	; (800a36c <HW_IPCC_Rx_Handler+0x6c>)
 800a34a:	f7ff ffc3 	bl	800a2d4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d009      	beq.n	800a368 <HW_IPCC_Rx_Handler+0x68>
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <HW_IPCC_Rx_Handler+0x6c>)
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	43db      	mvns	r3, r3
 800a35a:	f003 0308 	and.w	r3, r3, #8
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a362:	f000 f915 	bl	800a590 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a366:	bf00      	nop
 800a368:	bf00      	nop
}
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	58000c00 	.word	0x58000c00

0800a370 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a374:	2102      	movs	r1, #2
 800a376:	4822      	ldr	r0, [pc, #136]	; (800a400 <HW_IPCC_Tx_Handler+0x90>)
 800a378:	f7ff ff97 	bl	800a2aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d109      	bne.n	800a396 <HW_IPCC_Tx_Handler+0x26>
 800a382:	4b1f      	ldr	r3, [pc, #124]	; (800a400 <HW_IPCC_Tx_Handler+0x90>)
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	43db      	mvns	r3, r3
 800a388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d002      	beq.n	800a396 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a390:	f000 f8a6 	bl	800a4e0 <HW_IPCC_SYS_CmdEvtHandler>
 800a394:	e031      	b.n	800a3fa <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a396:	2102      	movs	r1, #2
 800a398:	4819      	ldr	r0, [pc, #100]	; (800a400 <HW_IPCC_Tx_Handler+0x90>)
 800a39a:	f7ff ff86 	bl	800a2aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d109      	bne.n	800a3b8 <HW_IPCC_Tx_Handler+0x48>
 800a3a4:	4b16      	ldr	r3, [pc, #88]	; (800a400 <HW_IPCC_Tx_Handler+0x90>)
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	43db      	mvns	r3, r3
 800a3aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a3b2:	f000 f895 	bl	800a4e0 <HW_IPCC_SYS_CmdEvtHandler>
 800a3b6:	e020      	b.n	800a3fa <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a3b8:	2108      	movs	r1, #8
 800a3ba:	4811      	ldr	r0, [pc, #68]	; (800a400 <HW_IPCC_Tx_Handler+0x90>)
 800a3bc:	f7ff ff75 	bl	800a2aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d109      	bne.n	800a3da <HW_IPCC_Tx_Handler+0x6a>
 800a3c6:	4b0e      	ldr	r3, [pc, #56]	; (800a400 <HW_IPCC_Tx_Handler+0x90>)
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	43db      	mvns	r3, r3
 800a3cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d002      	beq.n	800a3da <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a3d4:	f000 f8be 	bl	800a554 <HW_IPCC_MM_FreeBufHandler>
 800a3d8:	e00f      	b.n	800a3fa <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a3da:	2120      	movs	r1, #32
 800a3dc:	4808      	ldr	r0, [pc, #32]	; (800a400 <HW_IPCC_Tx_Handler+0x90>)
 800a3de:	f7ff ff64 	bl	800a2aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d109      	bne.n	800a3fc <HW_IPCC_Tx_Handler+0x8c>
 800a3e8:	4b05      	ldr	r3, [pc, #20]	; (800a400 <HW_IPCC_Tx_Handler+0x90>)
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	43db      	mvns	r3, r3
 800a3ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a3f6:	f000 f84f 	bl	800a498 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a3fa:	bf00      	nop
 800a3fc:	bf00      	nop
}
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	58000c00 	.word	0x58000c00

0800a404 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a408:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a40c:	f7ff febd 	bl	800a18a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a410:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a414:	f7ff fe7a 	bl	800a10c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a418:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a41c:	f7ff fe8a 	bl	800a134 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a420:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a422:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a424:	f7ff fe62 	bl	800a0ec <LL_PWR_EnableBootC2>

  return;
 800a428:	bf00      	nop
}
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a430:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a434:	f7ff fe90 	bl	800a158 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a438:	4806      	ldr	r0, [pc, #24]	; (800a454 <HW_IPCC_Init+0x28>)
 800a43a:	f7ff fed2 	bl	800a1e2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a43e:	4805      	ldr	r0, [pc, #20]	; (800a454 <HW_IPCC_Init+0x28>)
 800a440:	f7ff febf 	bl	800a1c2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a444:	202c      	movs	r0, #44	; 0x2c
 800a446:	f7f9 fd12 	bl	8003e6e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a44a:	202d      	movs	r0, #45	; 0x2d
 800a44c:	f7f9 fd0f 	bl	8003e6e <HAL_NVIC_EnableIRQ>

  return;
 800a450:	bf00      	nop
}
 800a452:	bd80      	pop	{r7, pc}
 800a454:	58000c00 	.word	0x58000c00

0800a458 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a45c:	2101      	movs	r1, #1
 800a45e:	4802      	ldr	r0, [pc, #8]	; (800a468 <HW_IPCC_BLE_Init+0x10>)
 800a460:	f7ff fef4 	bl	800a24c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a464:	bf00      	nop
}
 800a466:	bd80      	pop	{r7, pc}
 800a468:	58000c00 	.word	0x58000c00

0800a46c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a470:	2101      	movs	r1, #1
 800a472:	4802      	ldr	r0, [pc, #8]	; (800a47c <HW_IPCC_BLE_SendCmd+0x10>)
 800a474:	f7ff ff0a 	bl	800a28c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a478:	bf00      	nop
}
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	58000c00 	.word	0x58000c00

0800a480 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a480:	b580      	push	{r7, lr}
 800a482:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a484:	f7fe ff68 	bl	8009358 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a488:	2101      	movs	r1, #1
 800a48a:	4802      	ldr	r0, [pc, #8]	; (800a494 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a48c:	f7ff fef0 	bl	800a270 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a490:	bf00      	nop
}
 800a492:	bd80      	pop	{r7, pc}
 800a494:	58000c00 	.word	0x58000c00

0800a498 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a49c:	2120      	movs	r1, #32
 800a49e:	4803      	ldr	r0, [pc, #12]	; (800a4ac <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800a4a0:	f7ff fec2 	bl	800a228 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800a4a4:	f7fe ff88 	bl	80093b8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a4a8:	bf00      	nop
}
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	58000c00 	.word	0x58000c00

0800a4b0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a4b4:	2102      	movs	r1, #2
 800a4b6:	4802      	ldr	r0, [pc, #8]	; (800a4c0 <HW_IPCC_SYS_Init+0x10>)
 800a4b8:	f7ff fec8 	bl	800a24c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a4bc:	bf00      	nop
}
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	58000c00 	.word	0x58000c00

0800a4c4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a4c8:	2102      	movs	r1, #2
 800a4ca:	4804      	ldr	r0, [pc, #16]	; (800a4dc <HW_IPCC_SYS_SendCmd+0x18>)
 800a4cc:	f7ff fede 	bl	800a28c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a4d0:	2102      	movs	r1, #2
 800a4d2:	4802      	ldr	r0, [pc, #8]	; (800a4dc <HW_IPCC_SYS_SendCmd+0x18>)
 800a4d4:	f7ff fe95 	bl	800a202 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a4d8:	bf00      	nop
}
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	58000c00 	.word	0x58000c00

0800a4e0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a4e4:	2102      	movs	r1, #2
 800a4e6:	4803      	ldr	r0, [pc, #12]	; (800a4f4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a4e8:	f7ff fe9e 	bl	800a228 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a4ec:	f7fe ffb4 	bl	8009458 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a4f0:	bf00      	nop
}
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	58000c00 	.word	0x58000c00

0800a4f8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a4fc:	f7fe ffc2 	bl	8009484 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a500:	2102      	movs	r1, #2
 800a502:	4802      	ldr	r0, [pc, #8]	; (800a50c <HW_IPCC_SYS_EvtHandler+0x14>)
 800a504:	f7ff feb4 	bl	800a270 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a508:	bf00      	nop
}
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	58000c00 	.word	0x58000c00

0800a510 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a518:	2108      	movs	r1, #8
 800a51a:	480c      	ldr	r0, [pc, #48]	; (800a54c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a51c:	f7ff fec5 	bl	800a2aa <LL_C1_IPCC_IsActiveFlag_CHx>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d007      	beq.n	800a536 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a526:	4a0a      	ldr	r2, [pc, #40]	; (800a550 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a52c:	2108      	movs	r1, #8
 800a52e:	4807      	ldr	r0, [pc, #28]	; (800a54c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a530:	f7ff fe67 	bl	800a202 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a534:	e006      	b.n	800a544 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a53a:	2108      	movs	r1, #8
 800a53c:	4803      	ldr	r0, [pc, #12]	; (800a54c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a53e:	f7ff fea5 	bl	800a28c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a542:	bf00      	nop
}
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	58000c00 	.word	0x58000c00
 800a550:	200002a0 	.word	0x200002a0

0800a554 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a558:	2108      	movs	r1, #8
 800a55a:	4806      	ldr	r0, [pc, #24]	; (800a574 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a55c:	f7ff fe64 	bl	800a228 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a566:	2108      	movs	r1, #8
 800a568:	4802      	ldr	r0, [pc, #8]	; (800a574 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a56a:	f7ff fe8f 	bl	800a28c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a56e:	bf00      	nop
}
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	58000c00 	.word	0x58000c00
 800a578:	200002a0 	.word	0x200002a0

0800a57c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a580:	2108      	movs	r1, #8
 800a582:	4802      	ldr	r0, [pc, #8]	; (800a58c <HW_IPCC_TRACES_Init+0x10>)
 800a584:	f7ff fe62 	bl	800a24c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a588:	bf00      	nop
}
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	58000c00 	.word	0x58000c00

0800a590 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a594:	f7ff f81e 	bl	80095d4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a598:	2108      	movs	r1, #8
 800a59a:	4802      	ldr	r0, [pc, #8]	; (800a5a4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a59c:	f7ff fe68 	bl	800a270 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a5a0:	bf00      	nop
}
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	58000c00 	.word	0x58000c00

0800a5a8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5ac:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <UTIL_LPM_Init+0x1c>)
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5b2:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <UTIL_LPM_Init+0x20>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a5b8:	bf00      	nop
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	200002a4 	.word	0x200002a4
 800a5c8:	200002a8 	.word	0x200002a8

0800a5cc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a5dc:	613b      	str	r3, [r7, #16]
  return(result);
 800a5de:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a5e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5e2:	b672      	cpsid	i
}
 800a5e4:	bf00      	nop
  
  switch(state)
 800a5e6:	78fb      	ldrb	r3, [r7, #3]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d008      	beq.n	800a5fe <UTIL_LPM_SetOffMode+0x32>
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d10e      	bne.n	800a60e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a5f0:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <UTIL_LPM_SetOffMode+0x5c>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	4a0b      	ldr	r2, [pc, #44]	; (800a628 <UTIL_LPM_SetOffMode+0x5c>)
 800a5fa:	6013      	str	r3, [r2, #0]
      break;
 800a5fc:	e008      	b.n	800a610 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	43da      	mvns	r2, r3
 800a602:	4b09      	ldr	r3, [pc, #36]	; (800a628 <UTIL_LPM_SetOffMode+0x5c>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4013      	ands	r3, r2
 800a608:	4a07      	ldr	r2, [pc, #28]	; (800a628 <UTIL_LPM_SetOffMode+0x5c>)
 800a60a:	6013      	str	r3, [r2, #0]
      break;
 800a60c:	e000      	b.n	800a610 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a60e:	bf00      	nop
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f383 8810 	msr	PRIMASK, r3
}
 800a61a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a61c:	bf00      	nop
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	200002a8 	.word	0x200002a8

0800a62c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08c      	sub	sp, #48	; 0x30
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a634:	4b67      	ldr	r3, [pc, #412]	; (800a7d4 <UTIL_SEQ_Run+0x1a8>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a63a:	4b66      	ldr	r3, [pc, #408]	; (800a7d4 <UTIL_SEQ_Run+0x1a8>)
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4013      	ands	r3, r2
 800a642:	4a64      	ldr	r2, [pc, #400]	; (800a7d4 <UTIL_SEQ_Run+0x1a8>)
 800a644:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a646:	e083      	b.n	800a750 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800a648:	2300      	movs	r3, #0
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a64c:	e002      	b.n	800a654 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	3301      	adds	r3, #1
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a654:	4a60      	ldr	r2, [pc, #384]	; (800a7d8 <UTIL_SEQ_Run+0x1ac>)
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a65c:	4b5f      	ldr	r3, [pc, #380]	; (800a7dc <UTIL_SEQ_Run+0x1b0>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	401a      	ands	r2, r3
 800a662:	4b5c      	ldr	r3, [pc, #368]	; (800a7d4 <UTIL_SEQ_Run+0x1a8>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4013      	ands	r3, r2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d0f0      	beq.n	800a64e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800a66c:	4a5a      	ldr	r2, [pc, #360]	; (800a7d8 <UTIL_SEQ_Run+0x1ac>)
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a674:	4b59      	ldr	r3, [pc, #356]	; (800a7dc <UTIL_SEQ_Run+0x1b0>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	401a      	ands	r2, r3
 800a67a:	4b56      	ldr	r3, [pc, #344]	; (800a7d4 <UTIL_SEQ_Run+0x1a8>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4013      	ands	r3, r2
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a682:	4a55      	ldr	r2, [pc, #340]	; (800a7d8 <UTIL_SEQ_Run+0x1ac>)
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	00db      	lsls	r3, r3, #3
 800a688:	4413      	add	r3, r2
 800a68a:	685a      	ldr	r2, [r3, #4]
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	4013      	ands	r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d106      	bne.n	800a6a2 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a694:	4a50      	ldr	r2, [pc, #320]	; (800a7d8 <UTIL_SEQ_Run+0x1ac>)
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	00db      	lsls	r3, r3, #3
 800a69a:	4413      	add	r3, r2
 800a69c:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a0:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a6a2:	4a4d      	ldr	r2, [pc, #308]	; (800a7d8 <UTIL_SEQ_Run+0x1ac>)
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	4413      	add	r3, r2
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f000 f99d 	bl	800a9f0 <SEQ_BitPosition>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4b49      	ldr	r3, [pc, #292]	; (800a7e0 <UTIL_SEQ_Run+0x1b4>)
 800a6bc:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a6be:	4a46      	ldr	r2, [pc, #280]	; (800a7d8 <UTIL_SEQ_Run+0x1ac>)
 800a6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c2:	00db      	lsls	r3, r3, #3
 800a6c4:	4413      	add	r3, r2
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	4b45      	ldr	r3, [pc, #276]	; (800a7e0 <UTIL_SEQ_Run+0x1b4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2101      	movs	r1, #1
 800a6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d2:	43db      	mvns	r3, r3
 800a6d4:	401a      	ands	r2, r3
 800a6d6:	4940      	ldr	r1, [pc, #256]	; (800a7d8 <UTIL_SEQ_Run+0x1ac>)
 800a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6da:	00db      	lsls	r3, r3, #3
 800a6dc:	440b      	add	r3, r1
 800a6de:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a6e4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a6e6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a6e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6ea:	b672      	cpsid	i
}
 800a6ec:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a6ee:	4b3c      	ldr	r3, [pc, #240]	; (800a7e0 <UTIL_SEQ_Run+0x1b4>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f8:	43da      	mvns	r2, r3
 800a6fa:	4b3a      	ldr	r3, [pc, #232]	; (800a7e4 <UTIL_SEQ_Run+0x1b8>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4013      	ands	r3, r2
 800a700:	4a38      	ldr	r2, [pc, #224]	; (800a7e4 <UTIL_SEQ_Run+0x1b8>)
 800a702:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a704:	2302      	movs	r3, #2
 800a706:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a708:	e013      	b.n	800a732 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	3b01      	subs	r3, #1
 800a70e:	4a32      	ldr	r2, [pc, #200]	; (800a7d8 <UTIL_SEQ_Run+0x1ac>)
 800a710:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a714:	4b32      	ldr	r3, [pc, #200]	; (800a7e0 <UTIL_SEQ_Run+0x1b4>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2201      	movs	r2, #1
 800a71a:	fa02 f303 	lsl.w	r3, r2, r3
 800a71e:	43da      	mvns	r2, r3
 800a720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a722:	3b01      	subs	r3, #1
 800a724:	400a      	ands	r2, r1
 800a726:	492c      	ldr	r1, [pc, #176]	; (800a7d8 <UTIL_SEQ_Run+0x1ac>)
 800a728:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72e:	3b01      	subs	r3, #1
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e8      	bne.n	800a70a <UTIL_SEQ_Run+0xde>
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f383 8810 	msr	PRIMASK, r3
}
 800a742:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a744:	4b26      	ldr	r3, [pc, #152]	; (800a7e0 <UTIL_SEQ_Run+0x1b4>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a27      	ldr	r2, [pc, #156]	; (800a7e8 <UTIL_SEQ_Run+0x1bc>)
 800a74a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a74e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a750:	4b24      	ldr	r3, [pc, #144]	; (800a7e4 <UTIL_SEQ_Run+0x1b8>)
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	4b21      	ldr	r3, [pc, #132]	; (800a7dc <UTIL_SEQ_Run+0x1b0>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	401a      	ands	r2, r3
 800a75a:	4b1e      	ldr	r3, [pc, #120]	; (800a7d4 <UTIL_SEQ_Run+0x1a8>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4013      	ands	r3, r2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d007      	beq.n	800a774 <UTIL_SEQ_Run+0x148>
 800a764:	4b21      	ldr	r3, [pc, #132]	; (800a7ec <UTIL_SEQ_Run+0x1c0>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	4b21      	ldr	r3, [pc, #132]	; (800a7f0 <UTIL_SEQ_Run+0x1c4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4013      	ands	r3, r2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f43f af6a 	beq.w	800a648 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a774:	4b1a      	ldr	r3, [pc, #104]	; (800a7e0 <UTIL_SEQ_Run+0x1b4>)
 800a776:	f04f 32ff 	mov.w	r2, #4294967295
 800a77a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a77c:	f000 f92a 	bl	800a9d4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a780:	f3ef 8310 	mrs	r3, PRIMASK
 800a784:	613b      	str	r3, [r7, #16]
  return(result);
 800a786:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a78a:	b672      	cpsid	i
}
 800a78c:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a78e:	4b15      	ldr	r3, [pc, #84]	; (800a7e4 <UTIL_SEQ_Run+0x1b8>)
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	4b12      	ldr	r3, [pc, #72]	; (800a7dc <UTIL_SEQ_Run+0x1b0>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	401a      	ands	r2, r3
 800a798:	4b0e      	ldr	r3, [pc, #56]	; (800a7d4 <UTIL_SEQ_Run+0x1a8>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4013      	ands	r3, r2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d108      	bne.n	800a7b4 <UTIL_SEQ_Run+0x188>
 800a7a2:	4b12      	ldr	r3, [pc, #72]	; (800a7ec <UTIL_SEQ_Run+0x1c0>)
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	4b12      	ldr	r3, [pc, #72]	; (800a7f0 <UTIL_SEQ_Run+0x1c4>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d101      	bne.n	800a7b4 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800a7b0:	f7f5 febd 	bl	800052e <UTIL_SEQ_Idle>
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f383 8810 	msr	PRIMASK, r3
}
 800a7be:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a7c0:	f000 f90f 	bl	800a9e2 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a7c4:	4a03      	ldr	r2, [pc, #12]	; (800a7d4 <UTIL_SEQ_Run+0x1a8>)
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	6013      	str	r3, [r2, #0]

  return;
 800a7ca:	bf00      	nop
}
 800a7cc:	3730      	adds	r7, #48	; 0x30
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20000024 	.word	0x20000024
 800a7d8:	2000033c 	.word	0x2000033c
 800a7dc:	20000020 	.word	0x20000020
 800a7e0:	200002b8 	.word	0x200002b8
 800a7e4:	200002ac 	.word	0x200002ac
 800a7e8:	200002bc 	.word	0x200002bc
 800a7ec:	200002b0 	.word	0x200002b0
 800a7f0:	200002b4 	.word	0x200002b4

0800a7f4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b088      	sub	sp, #32
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a800:	f3ef 8310 	mrs	r3, PRIMASK
 800a804:	617b      	str	r3, [r7, #20]
  return(result);
 800a806:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a80a:	b672      	cpsid	i
}
 800a80c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 f8ee 	bl	800a9f0 <SEQ_BitPosition>
 800a814:	4603      	mov	r3, r0
 800a816:	4619      	mov	r1, r3
 800a818:	4a06      	ldr	r2, [pc, #24]	; (800a834 <UTIL_SEQ_RegTask+0x40>)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	f383 8810 	msr	PRIMASK, r3
}
 800a82a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a82c:	bf00      	nop
}
 800a82e:	3720      	adds	r7, #32
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	200002bc 	.word	0x200002bc

0800a838 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a838:	b480      	push	{r7}
 800a83a:	b087      	sub	sp, #28
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a842:	f3ef 8310 	mrs	r3, PRIMASK
 800a846:	60fb      	str	r3, [r7, #12]
  return(result);
 800a848:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a84a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a84c:	b672      	cpsid	i
}
 800a84e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a850:	4b0d      	ldr	r3, [pc, #52]	; (800a888 <UTIL_SEQ_SetTask+0x50>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4313      	orrs	r3, r2
 800a858:	4a0b      	ldr	r2, [pc, #44]	; (800a888 <UTIL_SEQ_SetTask+0x50>)
 800a85a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a85c:	4a0b      	ldr	r2, [pc, #44]	; (800a88c <UTIL_SEQ_SetTask+0x54>)
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	431a      	orrs	r2, r3
 800a868:	4908      	ldr	r1, [pc, #32]	; (800a88c <UTIL_SEQ_SetTask+0x54>)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	f383 8810 	msr	PRIMASK, r3
}
 800a87a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a87c:	bf00      	nop
}
 800a87e:	371c      	adds	r7, #28
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	200002ac 	.word	0x200002ac
 800a88c:	2000033c 	.word	0x2000033c

0800a890 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a890:	b480      	push	{r7}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a898:	f3ef 8310 	mrs	r3, PRIMASK
 800a89c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a89e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8a2:	b672      	cpsid	i
}
 800a8a4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	43da      	mvns	r2, r3
 800a8aa:	4b08      	ldr	r3, [pc, #32]	; (800a8cc <UTIL_SEQ_PauseTask+0x3c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	4a06      	ldr	r2, [pc, #24]	; (800a8cc <UTIL_SEQ_PauseTask+0x3c>)
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f383 8810 	msr	PRIMASK, r3
}
 800a8be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a8c0:	bf00      	nop
}
 800a8c2:	371c      	adds	r7, #28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	20000020 	.word	0x20000020

0800a8d0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8de:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8e2:	b672      	cpsid	i
}
 800a8e4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a8e6:	4b09      	ldr	r3, [pc, #36]	; (800a90c <UTIL_SEQ_ResumeTask+0x3c>)
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	4a07      	ldr	r2, [pc, #28]	; (800a90c <UTIL_SEQ_ResumeTask+0x3c>)
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f383 8810 	msr	PRIMASK, r3
}
 800a8fc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a8fe:	bf00      	nop
}
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	20000020 	.word	0x20000020

0800a910 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a918:	f3ef 8310 	mrs	r3, PRIMASK
 800a91c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a91e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a920:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a922:	b672      	cpsid	i
}
 800a924:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a926:	4b09      	ldr	r3, [pc, #36]	; (800a94c <UTIL_SEQ_SetEvt+0x3c>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	4a07      	ldr	r2, [pc, #28]	; (800a94c <UTIL_SEQ_SetEvt+0x3c>)
 800a930:	6013      	str	r3, [r2, #0]
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	f383 8810 	msr	PRIMASK, r3
}
 800a93c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a93e:	bf00      	nop
}
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	200002b0 	.word	0x200002b0

0800a950 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a958:	4b1b      	ldr	r3, [pc, #108]	; (800a9c8 <UTIL_SEQ_WaitEvt+0x78>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a95e:	4b1a      	ldr	r3, [pc, #104]	; (800a9c8 <UTIL_SEQ_WaitEvt+0x78>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a966:	d102      	bne.n	800a96e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800a968:	2300      	movs	r3, #0
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	e005      	b.n	800a97a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800a96e:	4b16      	ldr	r3, [pc, #88]	; (800a9c8 <UTIL_SEQ_WaitEvt+0x78>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2201      	movs	r2, #1
 800a974:	fa02 f303 	lsl.w	r3, r2, r3
 800a978:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a97a:	4b14      	ldr	r3, [pc, #80]	; (800a9cc <UTIL_SEQ_WaitEvt+0x7c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800a980:	4a12      	ldr	r2, [pc, #72]	; (800a9cc <UTIL_SEQ_WaitEvt+0x7c>)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800a986:	e005      	b.n	800a994 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800a988:	4b10      	ldr	r3, [pc, #64]	; (800a9cc <UTIL_SEQ_WaitEvt+0x7c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4619      	mov	r1, r3
 800a98e:	6978      	ldr	r0, [r7, #20]
 800a990:	f7f5 fdd4 	bl	800053c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800a994:	4b0e      	ldr	r3, [pc, #56]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x80>)
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	4b0c      	ldr	r3, [pc, #48]	; (800a9cc <UTIL_SEQ_WaitEvt+0x7c>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4013      	ands	r3, r2
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0f2      	beq.n	800a988 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a9a2:	4a09      	ldr	r2, [pc, #36]	; (800a9c8 <UTIL_SEQ_WaitEvt+0x78>)
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800a9a8:	4b08      	ldr	r3, [pc, #32]	; (800a9cc <UTIL_SEQ_WaitEvt+0x7c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	43da      	mvns	r2, r3
 800a9ae:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x80>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	4a06      	ldr	r2, [pc, #24]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x80>)
 800a9b6:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800a9b8:	4a04      	ldr	r2, [pc, #16]	; (800a9cc <UTIL_SEQ_WaitEvt+0x7c>)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6013      	str	r3, [r2, #0]

  return;
 800a9be:	bf00      	nop
}
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	200002b8 	.word	0x200002b8
 800a9cc:	200002b4 	.word	0x200002b4
 800a9d0:	200002b0 	.word	0x200002b0

0800a9d4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a9d8:	bf00      	nop
}
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a9e6:	bf00      	nop
}
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	0c1b      	lsrs	r3, r3, #16
 800aa00:	041b      	lsls	r3, r3, #16
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d104      	bne.n	800aa10 <SEQ_BitPosition+0x20>
 800aa06:	2310      	movs	r3, #16
 800aa08:	73fb      	strb	r3, [r7, #15]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	041b      	lsls	r3, r3, #16
 800aa0e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d105      	bne.n	800aa26 <SEQ_BitPosition+0x36>
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
 800aa1c:	3308      	adds	r3, #8
 800aa1e:	73fb      	strb	r3, [r7, #15]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	021b      	lsls	r3, r3, #8
 800aa24:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d105      	bne.n	800aa3c <SEQ_BitPosition+0x4c>
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	3304      	adds	r3, #4
 800aa34:	73fb      	strb	r3, [r7, #15]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	011b      	lsls	r3, r3, #4
 800aa3a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	0f1b      	lsrs	r3, r3, #28
 800aa40:	4a07      	ldr	r2, [pc, #28]	; (800aa60 <SEQ_BitPosition+0x70>)
 800aa42:	5cd2      	ldrb	r2, [r2, r3]
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	4413      	add	r3, r2
 800aa48:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	f1c3 031f 	rsb	r3, r3, #31
 800aa50:	b2db      	uxtb	r3, r3
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	0800ae24 	.word	0x0800ae24

0800aa64 <__libc_init_array>:
 800aa64:	b570      	push	{r4, r5, r6, lr}
 800aa66:	4d0d      	ldr	r5, [pc, #52]	; (800aa9c <__libc_init_array+0x38>)
 800aa68:	4c0d      	ldr	r4, [pc, #52]	; (800aaa0 <__libc_init_array+0x3c>)
 800aa6a:	1b64      	subs	r4, r4, r5
 800aa6c:	10a4      	asrs	r4, r4, #2
 800aa6e:	2600      	movs	r6, #0
 800aa70:	42a6      	cmp	r6, r4
 800aa72:	d109      	bne.n	800aa88 <__libc_init_array+0x24>
 800aa74:	4d0b      	ldr	r5, [pc, #44]	; (800aaa4 <__libc_init_array+0x40>)
 800aa76:	4c0c      	ldr	r4, [pc, #48]	; (800aaa8 <__libc_init_array+0x44>)
 800aa78:	f000 f88a 	bl	800ab90 <_init>
 800aa7c:	1b64      	subs	r4, r4, r5
 800aa7e:	10a4      	asrs	r4, r4, #2
 800aa80:	2600      	movs	r6, #0
 800aa82:	42a6      	cmp	r6, r4
 800aa84:	d105      	bne.n	800aa92 <__libc_init_array+0x2e>
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
 800aa88:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa8c:	4798      	blx	r3
 800aa8e:	3601      	adds	r6, #1
 800aa90:	e7ee      	b.n	800aa70 <__libc_init_array+0xc>
 800aa92:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa96:	4798      	blx	r3
 800aa98:	3601      	adds	r6, #1
 800aa9a:	e7f2      	b.n	800aa82 <__libc_init_array+0x1e>
 800aa9c:	0800ae5c 	.word	0x0800ae5c
 800aaa0:	0800ae5c 	.word	0x0800ae5c
 800aaa4:	0800ae5c 	.word	0x0800ae5c
 800aaa8:	0800ae60 	.word	0x0800ae60

0800aaac <__itoa>:
 800aaac:	1e93      	subs	r3, r2, #2
 800aaae:	2b22      	cmp	r3, #34	; 0x22
 800aab0:	b510      	push	{r4, lr}
 800aab2:	460c      	mov	r4, r1
 800aab4:	d904      	bls.n	800aac0 <__itoa+0x14>
 800aab6:	2300      	movs	r3, #0
 800aab8:	700b      	strb	r3, [r1, #0]
 800aaba:	461c      	mov	r4, r3
 800aabc:	4620      	mov	r0, r4
 800aabe:	bd10      	pop	{r4, pc}
 800aac0:	2a0a      	cmp	r2, #10
 800aac2:	d109      	bne.n	800aad8 <__itoa+0x2c>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	da07      	bge.n	800aad8 <__itoa+0x2c>
 800aac8:	232d      	movs	r3, #45	; 0x2d
 800aaca:	700b      	strb	r3, [r1, #0]
 800aacc:	4240      	negs	r0, r0
 800aace:	2101      	movs	r1, #1
 800aad0:	4421      	add	r1, r4
 800aad2:	f000 f81b 	bl	800ab0c <__utoa>
 800aad6:	e7f1      	b.n	800aabc <__itoa+0x10>
 800aad8:	2100      	movs	r1, #0
 800aada:	e7f9      	b.n	800aad0 <__itoa+0x24>

0800aadc <itoa>:
 800aadc:	f7ff bfe6 	b.w	800aaac <__itoa>

0800aae0 <memcpy>:
 800aae0:	440a      	add	r2, r1
 800aae2:	4291      	cmp	r1, r2
 800aae4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aae8:	d100      	bne.n	800aaec <memcpy+0xc>
 800aaea:	4770      	bx	lr
 800aaec:	b510      	push	{r4, lr}
 800aaee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aaf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaf6:	4291      	cmp	r1, r2
 800aaf8:	d1f9      	bne.n	800aaee <memcpy+0xe>
 800aafa:	bd10      	pop	{r4, pc}

0800aafc <memset>:
 800aafc:	4402      	add	r2, r0
 800aafe:	4603      	mov	r3, r0
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d100      	bne.n	800ab06 <memset+0xa>
 800ab04:	4770      	bx	lr
 800ab06:	f803 1b01 	strb.w	r1, [r3], #1
 800ab0a:	e7f9      	b.n	800ab00 <memset+0x4>

0800ab0c <__utoa>:
 800ab0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0e:	4c1f      	ldr	r4, [pc, #124]	; (800ab8c <__utoa+0x80>)
 800ab10:	b08b      	sub	sp, #44	; 0x2c
 800ab12:	4605      	mov	r5, r0
 800ab14:	460b      	mov	r3, r1
 800ab16:	466e      	mov	r6, sp
 800ab18:	f104 0c20 	add.w	ip, r4, #32
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	6861      	ldr	r1, [r4, #4]
 800ab20:	4637      	mov	r7, r6
 800ab22:	c703      	stmia	r7!, {r0, r1}
 800ab24:	3408      	adds	r4, #8
 800ab26:	4564      	cmp	r4, ip
 800ab28:	463e      	mov	r6, r7
 800ab2a:	d1f7      	bne.n	800ab1c <__utoa+0x10>
 800ab2c:	7921      	ldrb	r1, [r4, #4]
 800ab2e:	7139      	strb	r1, [r7, #4]
 800ab30:	1e91      	subs	r1, r2, #2
 800ab32:	6820      	ldr	r0, [r4, #0]
 800ab34:	6038      	str	r0, [r7, #0]
 800ab36:	2922      	cmp	r1, #34	; 0x22
 800ab38:	f04f 0100 	mov.w	r1, #0
 800ab3c:	d904      	bls.n	800ab48 <__utoa+0x3c>
 800ab3e:	7019      	strb	r1, [r3, #0]
 800ab40:	460b      	mov	r3, r1
 800ab42:	4618      	mov	r0, r3
 800ab44:	b00b      	add	sp, #44	; 0x2c
 800ab46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab48:	1e58      	subs	r0, r3, #1
 800ab4a:	4684      	mov	ip, r0
 800ab4c:	fbb5 f7f2 	udiv	r7, r5, r2
 800ab50:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800ab54:	fb02 5617 	mls	r6, r2, r7, r5
 800ab58:	4476      	add	r6, lr
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ab60:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ab64:	462e      	mov	r6, r5
 800ab66:	42b2      	cmp	r2, r6
 800ab68:	f101 0101 	add.w	r1, r1, #1
 800ab6c:	463d      	mov	r5, r7
 800ab6e:	d9ed      	bls.n	800ab4c <__utoa+0x40>
 800ab70:	2200      	movs	r2, #0
 800ab72:	545a      	strb	r2, [r3, r1]
 800ab74:	1919      	adds	r1, r3, r4
 800ab76:	1aa5      	subs	r5, r4, r2
 800ab78:	42aa      	cmp	r2, r5
 800ab7a:	dae2      	bge.n	800ab42 <__utoa+0x36>
 800ab7c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ab80:	780e      	ldrb	r6, [r1, #0]
 800ab82:	7006      	strb	r6, [r0, #0]
 800ab84:	3201      	adds	r2, #1
 800ab86:	f801 5901 	strb.w	r5, [r1], #-1
 800ab8a:	e7f4      	b.n	800ab76 <__utoa+0x6a>
 800ab8c:	0800ae34 	.word	0x0800ae34

0800ab90 <_init>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr

0800ab9c <_fini>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr
