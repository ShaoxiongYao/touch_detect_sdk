
BLE_TouchDetect_WB30.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa8c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800abc8  0800abc8  0001abc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800ae7c  0800ae7c  0001ae7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ae80  0800ae80  0001ae80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000004  0800ae84  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000028  0800aea8  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000c4  0800af41  000200c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000104  0800af7e  00020104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000090  20000118  0800af8f  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000040c  200001a8  0800b01f  000201a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005b4  0800b01f  000205b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0003dd3d  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006afb  00000000  00000000  0005df15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002948  00000000  00000000  00064a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000026c0  00000000  00000000  00067358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000294a7  00000000  00000000  00069a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002d882  00000000  00000000  00092ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000e82a8  00000000  00000000  000c0741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001a89e9  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000ae1c  00000000  00000000  001a8a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001a8 	.word	0x200001a8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800abb0 	.word	0x0800abb0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001ac 	.word	0x200001ac
 8000178:	0800abb0 	.word	0x0800abb0

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800018c:	b480      	push	{r7}
 800018e:	b083      	sub	sp, #12
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000194:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000196:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800019a:	4905      	ldr	r1, [pc, #20]	; (80001b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	4313      	orrs	r3, r2
 80001a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr
 80001b0:	58000800 	.word	0x58000800

080001b4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4313      	orrs	r3, r2
 80001ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4013      	ands	r3, r2
 80001d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001d8:	68fb      	ldr	r3, [r7, #12]
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b085      	sub	sp, #20
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80001ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001f2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80001f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4313      	orrs	r3, r2
 80001fe:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000206:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4013      	ands	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000210:	68fb      	ldr	r3, [r7, #12]
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800021e:	b580      	push	{r7, lr}
 8000220:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000222:	f002 fb3f 	bl	80028a4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000226:	f002 fb43 	bl	80028b0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800022a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800022e:	f7ff ffad 	bl	800018c <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000232:	f000 f821 	bl	8000278 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000236:	f000 f8c3 	bl	80003c0 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800023a:	bf00      	nop
}
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <APPD_EnableCPU2+0x34>)
 8000248:	1d3c      	adds	r4, r7, #4
 800024a:	461d      	mov	r5, r3
 800024c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000250:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000254:	c403      	stmia	r4!, {r0, r1}
 8000256:	8022      	strh	r2, [r4, #0]
 8000258:	3402      	adds	r4, #2
 800025a:	0c13      	lsrs	r3, r2, #16
 800025c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800025e:	f009 f9b7 	bl	80095d0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f008 fd16 	bl	8008c96 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800026a:	bf00      	nop
}
 800026c:	3720      	adds	r7, #32
 800026e:	46bd      	mov	sp, r7
 8000270:	bdb0      	pop	{r4, r5, r7, pc}
 8000272:	bf00      	nop
 8000274:	0800abc8 	.word	0x0800abc8

08000278 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000298:	2300      	movs	r3, #0
 800029a:	77fb      	strb	r3, [r7, #31]
 800029c:	e038      	b.n	8000310 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800029e:	7ffb      	ldrb	r3, [r7, #31]
 80002a0:	4a44      	ldr	r2, [pc, #272]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002a2:	00db      	lsls	r3, r3, #3
 80002a4:	4413      	add	r3, r2
 80002a6:	799b      	ldrb	r3, [r3, #6]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d02b      	beq.n	8000304 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80002ac:	7ffb      	ldrb	r3, [r7, #31]
 80002ae:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002b4:	4a40      	ldr	r2, [pc, #256]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d01b      	beq.n	80002f2 <APPD_SetCPU2GpioConfig+0x7a>
 80002ba:	4a3f      	ldr	r2, [pc, #252]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d823      	bhi.n	8000308 <APPD_SetCPU2GpioConfig+0x90>
 80002c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002c4:	d003      	beq.n	80002ce <APPD_SetCPU2GpioConfig+0x56>
 80002c6:	4a3d      	ldr	r2, [pc, #244]	; (80003bc <APPD_SetCPU2GpioConfig+0x144>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d009      	beq.n	80002e0 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80002cc:	e01c      	b.n	8000308 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80002ce:	7ffb      	ldrb	r3, [r7, #31]
 80002d0:	4a38      	ldr	r2, [pc, #224]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	4413      	add	r3, r2
 80002d6:	889a      	ldrh	r2, [r3, #4]
 80002d8:	8bbb      	ldrh	r3, [r7, #28]
 80002da:	4313      	orrs	r3, r2
 80002dc:	83bb      	strh	r3, [r7, #28]
          break;
 80002de:	e014      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80002e0:	7ffb      	ldrb	r3, [r7, #31]
 80002e2:	4a34      	ldr	r2, [pc, #208]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002e4:	00db      	lsls	r3, r3, #3
 80002e6:	4413      	add	r3, r2
 80002e8:	889a      	ldrh	r2, [r3, #4]
 80002ea:	8b7b      	ldrh	r3, [r7, #26]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	837b      	strh	r3, [r7, #26]
          break;
 80002f0:	e00b      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 80002f2:	7ffb      	ldrb	r3, [r7, #31]
 80002f4:	4a2f      	ldr	r2, [pc, #188]	; (80003b4 <APPD_SetCPU2GpioConfig+0x13c>)
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4413      	add	r3, r2
 80002fa:	889a      	ldrh	r2, [r3, #4]
 80002fc:	8b3b      	ldrh	r3, [r7, #24]
 80002fe:	4313      	orrs	r3, r2
 8000300:	833b      	strh	r3, [r7, #24]
          break;
 8000302:	e002      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000304:	bf00      	nop
 8000306:	e000      	b.n	800030a <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000308:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800030a:	7ffb      	ldrb	r3, [r7, #31]
 800030c:	3301      	adds	r3, #1
 800030e:	77fb      	strb	r3, [r7, #31]
 8000310:	7ffb      	ldrb	r3, [r7, #31]
 8000312:	2b21      	cmp	r3, #33	; 0x21
 8000314:	d9c3      	bls.n	800029e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800031e:	2303      	movs	r3, #3
 8000320:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000322:	8bbb      	ldrh	r3, [r7, #28]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d014      	beq.n	8000352 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000328:	8bbb      	ldrh	r3, [r7, #28]
 800032a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff41 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000332:	2001      	movs	r0, #1
 8000334:	f7ff ff57 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f004 f8ee 	bl	8004520 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000344:	8bbb      	ldrh	r3, [r7, #28]
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034e:	f004 fa4f 	bl	80047f0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000352:	8b7b      	ldrh	r3, [r7, #26]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d012      	beq.n	800037e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000358:	8b7b      	ldrh	r3, [r7, #26]
 800035a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	2002      	movs	r0, #2
 800035e:	f7ff ff29 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000362:	2002      	movs	r0, #2
 8000364:	f7ff ff3f 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <APPD_SetCPU2GpioConfig+0x144>)
 800036e:	f004 f8d7 	bl	8004520 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000372:	8b7b      	ldrh	r3, [r7, #26]
 8000374:	2200      	movs	r2, #0
 8000376:	4619      	mov	r1, r3
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <APPD_SetCPU2GpioConfig+0x144>)
 800037a:	f004 fa39 	bl	80047f0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800037e:	8b3b      	ldrh	r3, [r7, #24]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d013      	beq.n	80003ac <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000384:	8b3b      	ldrh	r3, [r7, #24]
 8000386:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000388:	2004      	movs	r0, #4
 800038a:	f7ff ff13 	bl	80001b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800038e:	2004      	movs	r0, #4
 8000390:	f7ff ff29 	bl	80001e6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 800039a:	f004 f8c1 	bl	8004520 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800039e:	8b3b      	ldrh	r3, [r7, #24]
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <APPD_SetCPU2GpioConfig+0x140>)
 80003a6:	f004 fa23 	bl	80047f0 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
}
 80003ae:	3720      	adds	r7, #32
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	0800ac3c 	.word	0x0800ac3c
 80003b8:	48000800 	.word	0x48000800
 80003bc:	48000400 	.word	0x48000400

080003c0 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80003c4:	bf00      	nop
}
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <LL_C2_PWR_SetPowerMode+0x28>)
 80003da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003de:	f023 0207 	bic.w	r2, r3, #7
 80003e2:	4905      	ldr	r1, [pc, #20]	; (80003f8 <LL_C2_PWR_SetPowerMode+0x28>)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	58000400 	.word	0x58000400

080003fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800040e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	608b      	str	r3, [r1, #8]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000428:	f000 f814 	bl	8000454 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800042c:	4908      	ldr	r1, [pc, #32]	; (8000450 <APPE_Init+0x2c>)
 800042e:	2000      	movs	r0, #0
 8000430:	f000 fcde 	bl	8000df0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000434:	f7ff fef3 	bl	800021e <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000438:	2101      	movs	r1, #1
 800043a:	2001      	movs	r0, #1
 800043c:	f00a f8d6 	bl	800a5ec <UTIL_LPM_SetOffMode>

  Led_Init();
 8000440:	f000 f867 	bl	8000512 <Led_Init>

  Button_Init();
 8000444:	f000 f86c 	bl	8000520 <Button_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000448:	f000 f812 	bl	8000470 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800044c:	bf00      	nop
}
 800044e:	bd80      	pop	{r7, pc}
 8000450:	2000053c 	.word	0x2000053c

08000454 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000458:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800045c:	f7ff ffce 	bl	80003fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000460:	f00a f8b2 	bl	800a5c8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000464:	2004      	movs	r0, #4
 8000466:	f7ff ffb3 	bl	80003d0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800046a:	bf00      	nop
}
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000476:	f008 fef5 	bl	8009264 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800047a:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <appe_Tl_Init+0x50>)
 800047c:	2100      	movs	r1, #0
 800047e:	2008      	movs	r0, #8
 8000480:	f00a f9c8 	bl	800a814 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <appe_Tl_Init+0x54>)
 8000486:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <appe_Tl_Init+0x58>)
 800048a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800048c:	463b      	mov	r3, r7
 800048e:	4619      	mov	r1, r3
 8000490:	480e      	ldr	r0, [pc, #56]	; (80004cc <appe_Tl_Init+0x5c>)
 8000492:	f008 fdad 	bl	8008ff0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <appe_Tl_Init+0x60>)
 8000498:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <appe_Tl_Init+0x64>)
 800049c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <appe_Tl_Init+0x68>)
 80004a0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80004a2:	f240 533c 	movw	r3, #1340	; 0x53c
 80004a6:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80004a8:	f107 0308 	add.w	r3, r7, #8
 80004ac:	4618      	mov	r0, r3
 80004ae:	f009 f81b 	bl	80094e8 <TL_MM_Init>

  TL_Enable();
 80004b2:	f008 fed1 	bl	8009258 <TL_Enable>

  return;
 80004b6:	bf00      	nop
}
 80004b8:	3720      	adds	r7, #32
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	08009029 	.word	0x08009029
 80004c4:	20030724 	.word	0x20030724
 80004c8:	080004dd 	.word	0x080004dd
 80004cc:	080004f3 	.word	0x080004f3
 80004d0:	2003093c 	.word	0x2003093c
 80004d4:	20030830 	.word	0x20030830
 80004d8:	200301e8 	.word	0x200301e8

080004dc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80004e6:	bf00      	nop
}
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80004fa:	f7ff fea1 	bl	8000240 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80004fe:	f009 f9fd 	bl	80098fc <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000502:	2100      	movs	r1, #0
 8000504:	2001      	movs	r0, #1
 8000506:	f00a f871 	bl	800a5ec <UTIL_LPM_SetOffMode>
  return;
 800050a:	bf00      	nop
}
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
//  BSP_LED_Init(LED_RED);
//
//  BSP_LED_On(LED_GREEN);
#endif

  return;
 8000516:	bf00      	nop
}
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <Button_Init>:

static void Button_Init( void )
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

//  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
//  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
#endif

  return;
 8000524:	bf00      	nop
}
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000532:	bf00      	nop
}
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000546:	f04f 30ff 	mov.w	r0, #4294967295
 800054a:	f00a f87f 	bl	800a64c <UTIL_SEQ_Run>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b082      	sub	sp, #8
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800055e:	2100      	movs	r1, #0
 8000560:	2008      	movs	r0, #8
 8000562:	f00a f979 	bl	800a858 <UTIL_SEQ_SetTask>
  return;
 8000566:	bf00      	nop
}
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}

0800056e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b082      	sub	sp, #8
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000576:	2002      	movs	r0, #2
 8000578:	f00a f9da 	bl	800a930 <UTIL_SEQ_SetEvt>
  return;
 800057c:	bf00      	nop
}
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800058c:	2002      	movs	r0, #2
 800058e:	f00a f9ef 	bl	800a970 <UTIL_SEQ_WaitEvt>
  return;
 8000592:	bf00      	nop
}
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <LL_EXTI_EnableIT_0_31>:
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80005a6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80005aa:	4905      	ldr	r1, [pc, #20]	; (80005c0 <LL_EXTI_EnableIT_0_31+0x24>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	58000800 	.word	0x58000800

080005c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4904      	ldr	r1, [pc, #16]	; (80005e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	600b      	str	r3, [r1, #0]

}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	58000800 	.word	0x58000800

080005e8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <ReadRtcSsrValue+0x3c>)
 80005f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <ReadRtcSsrValue+0x3c>)
 80005f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80005fe:	e005      	b.n	800060c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <ReadRtcSsrValue+0x3c>)
 8000606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000608:	b29b      	uxth	r3, r3
 800060a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	429a      	cmp	r2, r3
 8000612:	d1f5      	bne.n	8000600 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000614:	683b      	ldr	r3, [r7, #0]
}
 8000616:	4618      	mov	r0, r3
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40002800 	.word	0x40002800

08000628 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000638:	79ba      	ldrb	r2, [r7, #6]
 800063a:	491d      	ldr	r1, [pc, #116]	; (80006b0 <LinkTimerAfter+0x88>)
 800063c:	4613      	mov	r3, r2
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	4413      	add	r3, r2
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	440b      	add	r3, r1
 8000646:	3315      	adds	r3, #21
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b06      	cmp	r3, #6
 8000650:	d009      	beq.n	8000666 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000652:	7bfa      	ldrb	r2, [r7, #15]
 8000654:	4916      	ldr	r1, [pc, #88]	; (80006b0 <LinkTimerAfter+0x88>)
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	440b      	add	r3, r1
 8000660:	3314      	adds	r3, #20
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000666:	79fa      	ldrb	r2, [r7, #7]
 8000668:	4911      	ldr	r1, [pc, #68]	; (80006b0 <LinkTimerAfter+0x88>)
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	440b      	add	r3, r1
 8000674:	3315      	adds	r3, #21
 8000676:	7bfa      	ldrb	r2, [r7, #15]
 8000678:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800067a:	79fa      	ldrb	r2, [r7, #7]
 800067c:	490c      	ldr	r1, [pc, #48]	; (80006b0 <LinkTimerAfter+0x88>)
 800067e:	4613      	mov	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4413      	add	r3, r2
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	440b      	add	r3, r1
 8000688:	3314      	adds	r3, #20
 800068a:	79ba      	ldrb	r2, [r7, #6]
 800068c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800068e:	79ba      	ldrb	r2, [r7, #6]
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <LinkTimerAfter+0x88>)
 8000692:	4613      	mov	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	4413      	add	r3, r2
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	440b      	add	r3, r1
 800069c:	3315      	adds	r3, #21
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	701a      	strb	r2, [r3, #0]

  return;
 80006a2:	bf00      	nop
}
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028

080006b4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <LinkTimerBefore+0xb8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	79ba      	ldrb	r2, [r7, #6]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d032      	beq.n	8000736 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80006d0:	79ba      	ldrb	r2, [r7, #6]
 80006d2:	4927      	ldr	r1, [pc, #156]	; (8000770 <LinkTimerBefore+0xbc>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	440b      	add	r3, r1
 80006de:	3314      	adds	r3, #20
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80006e4:	7bfa      	ldrb	r2, [r7, #15]
 80006e6:	4922      	ldr	r1, [pc, #136]	; (8000770 <LinkTimerBefore+0xbc>)
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	440b      	add	r3, r1
 80006f2:	3315      	adds	r3, #21
 80006f4:	79fa      	ldrb	r2, [r7, #7]
 80006f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80006f8:	79fa      	ldrb	r2, [r7, #7]
 80006fa:	491d      	ldr	r1, [pc, #116]	; (8000770 <LinkTimerBefore+0xbc>)
 80006fc:	4613      	mov	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	4413      	add	r3, r2
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	440b      	add	r3, r1
 8000706:	3315      	adds	r3, #21
 8000708:	79ba      	ldrb	r2, [r7, #6]
 800070a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800070c:	79fa      	ldrb	r2, [r7, #7]
 800070e:	4918      	ldr	r1, [pc, #96]	; (8000770 <LinkTimerBefore+0xbc>)
 8000710:	4613      	mov	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4413      	add	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	440b      	add	r3, r1
 800071a:	3314      	adds	r3, #20
 800071c:	7bfa      	ldrb	r2, [r7, #15]
 800071e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000720:	79ba      	ldrb	r2, [r7, #6]
 8000722:	4913      	ldr	r1, [pc, #76]	; (8000770 <LinkTimerBefore+0xbc>)
 8000724:	4613      	mov	r3, r2
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	4413      	add	r3, r2
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	440b      	add	r3, r1
 800072e:	3314      	adds	r3, #20
 8000730:	79fa      	ldrb	r2, [r7, #7]
 8000732:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000734:	e014      	b.n	8000760 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	490d      	ldr	r1, [pc, #52]	; (8000770 <LinkTimerBefore+0xbc>)
 800073a:	4613      	mov	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	4413      	add	r3, r2
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	440b      	add	r3, r1
 8000744:	3315      	adds	r3, #21
 8000746:	79ba      	ldrb	r2, [r7, #6]
 8000748:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <LinkTimerBefore+0xbc>)
 800074e:	4613      	mov	r3, r2
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	4413      	add	r3, r2
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	440b      	add	r3, r1
 8000758:	3314      	adds	r3, #20
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	701a      	strb	r2, [r3, #0]
  return;
 800075e:	bf00      	nop
}
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200000b8 	.word	0x200000b8
 8000770:	20000028 	.word	0x20000028

08000774 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800077e:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <linkTimer+0x144>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b06      	cmp	r3, #6
 8000786:	d118      	bne.n	80007ba <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000788:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <linkTimer+0x144>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b4b      	ldr	r3, [pc, #300]	; (80008bc <linkTimer+0x148>)
 8000790:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000792:	4a49      	ldr	r2, [pc, #292]	; (80008b8 <linkTimer+0x144>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000798:	79fa      	ldrb	r2, [r7, #7]
 800079a:	4949      	ldr	r1, [pc, #292]	; (80008c0 <linkTimer+0x14c>)
 800079c:	4613      	mov	r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4413      	add	r3, r2
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	440b      	add	r3, r1
 80007a6:	3315      	adds	r3, #21
 80007a8:	2206      	movs	r2, #6
 80007aa:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80007ac:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <linkTimer+0x150>)
 80007ae:	f04f 32ff 	mov.w	r2, #4294967295
 80007b2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	81fb      	strh	r3, [r7, #14]
 80007b8:	e078      	b.n	80008ac <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80007ba:	f000 f909 	bl	80009d0 <ReturnTimeElapsed>
 80007be:	4603      	mov	r3, r0
 80007c0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80007c2:	79fa      	ldrb	r2, [r7, #7]
 80007c4:	493e      	ldr	r1, [pc, #248]	; (80008c0 <linkTimer+0x14c>)
 80007c6:	4613      	mov	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	440b      	add	r3, r1
 80007d0:	3308      	adds	r3, #8
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	89fb      	ldrh	r3, [r7, #14]
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	4419      	add	r1, r3
 80007da:	4839      	ldr	r0, [pc, #228]	; (80008c0 <linkTimer+0x14c>)
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4403      	add	r3, r0
 80007e6:	3308      	adds	r3, #8
 80007e8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80007ea:	79fa      	ldrb	r2, [r7, #7]
 80007ec:	4934      	ldr	r1, [pc, #208]	; (80008c0 <linkTimer+0x14c>)
 80007ee:	4613      	mov	r3, r2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	440b      	add	r3, r1
 80007f8:	3308      	adds	r3, #8
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <linkTimer+0x144>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <linkTimer+0x14c>)
 8000808:	460b      	mov	r3, r1
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	440b      	add	r3, r1
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4413      	add	r3, r2
 8000812:	3308      	adds	r3, #8
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	429a      	cmp	r2, r3
 800081a:	d337      	bcc.n	800088c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800081c:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <linkTimer+0x144>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000822:	7b7a      	ldrb	r2, [r7, #13]
 8000824:	4926      	ldr	r1, [pc, #152]	; (80008c0 <linkTimer+0x14c>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	3315      	adds	r3, #21
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000836:	e013      	b.n	8000860 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000838:	7b7a      	ldrb	r2, [r7, #13]
 800083a:	4921      	ldr	r1, [pc, #132]	; (80008c0 <linkTimer+0x14c>)
 800083c:	4613      	mov	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4413      	add	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	440b      	add	r3, r1
 8000846:	3315      	adds	r3, #21
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800084c:	7b7a      	ldrb	r2, [r7, #13]
 800084e:	491c      	ldr	r1, [pc, #112]	; (80008c0 <linkTimer+0x14c>)
 8000850:	4613      	mov	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	4413      	add	r3, r2
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	440b      	add	r3, r1
 800085a:	3315      	adds	r3, #21
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000860:	7b3b      	ldrb	r3, [r7, #12]
 8000862:	2b06      	cmp	r3, #6
 8000864:	d00b      	beq.n	800087e <linkTimer+0x10a>
 8000866:	7b3a      	ldrb	r2, [r7, #12]
 8000868:	4915      	ldr	r1, [pc, #84]	; (80008c0 <linkTimer+0x14c>)
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	440b      	add	r3, r1
 8000874:	3308      	adds	r3, #8
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	429a      	cmp	r2, r3
 800087c:	d2dc      	bcs.n	8000838 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800087e:	7b7a      	ldrb	r2, [r7, #13]
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fecf 	bl	8000628 <LinkTimerAfter>
 800088a:	e00f      	b.n	80008ac <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <linkTimer+0x144>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff0c 	bl	80006b4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <linkTimer+0x144>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <linkTimer+0x148>)
 80008a4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <linkTimer+0x144>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80008ac:	89fb      	ldrh	r3, [r7, #14]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	200000b9 	.word	0x200000b9
 80008c0:	20000028 	.word	0x20000028
 80008c4:	200000bc 	.word	0x200000bc

080008c8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	460a      	mov	r2, r1
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4613      	mov	r3, r2
 80008d6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <UnlinkTimer+0xf8>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	79fa      	ldrb	r2, [r7, #7]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d111      	bne.n	8000908 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80008e4:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <UnlinkTimer+0xf8>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <UnlinkTimer+0xfc>)
 80008ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	4935      	ldr	r1, [pc, #212]	; (80009c8 <UnlinkTimer+0x100>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	3315      	adds	r3, #21
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4b2f      	ldr	r3, [pc, #188]	; (80009c0 <UnlinkTimer+0xf8>)
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e03e      	b.n	8000986 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	492f      	ldr	r1, [pc, #188]	; (80009c8 <UnlinkTimer+0x100>)
 800090c:	4613      	mov	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	4413      	add	r3, r2
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	440b      	add	r3, r1
 8000916:	3314      	adds	r3, #20
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800091c:	79fa      	ldrb	r2, [r7, #7]
 800091e:	492a      	ldr	r1, [pc, #168]	; (80009c8 <UnlinkTimer+0x100>)
 8000920:	4613      	mov	r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	00db      	lsls	r3, r3, #3
 8000928:	440b      	add	r3, r1
 800092a:	3315      	adds	r3, #21
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000930:	79f9      	ldrb	r1, [r7, #7]
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	4824      	ldr	r0, [pc, #144]	; (80009c8 <UnlinkTimer+0x100>)
 8000936:	460b      	mov	r3, r1
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	440b      	add	r3, r1
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	4403      	add	r3, r0
 8000940:	3315      	adds	r3, #21
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2d8      	uxtb	r0, r3
 8000946:	4920      	ldr	r1, [pc, #128]	; (80009c8 <UnlinkTimer+0x100>)
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	440b      	add	r3, r1
 8000952:	3315      	adds	r3, #21
 8000954:	4602      	mov	r2, r0
 8000956:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	2b06      	cmp	r3, #6
 800095c:	d013      	beq.n	8000986 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800095e:	79f9      	ldrb	r1, [r7, #7]
 8000960:	7bba      	ldrb	r2, [r7, #14]
 8000962:	4819      	ldr	r0, [pc, #100]	; (80009c8 <UnlinkTimer+0x100>)
 8000964:	460b      	mov	r3, r1
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	440b      	add	r3, r1
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	4403      	add	r3, r0
 800096e:	3314      	adds	r3, #20
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2d8      	uxtb	r0, r3
 8000974:	4914      	ldr	r1, [pc, #80]	; (80009c8 <UnlinkTimer+0x100>)
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	3314      	adds	r3, #20
 8000982:	4602      	mov	r2, r0
 8000984:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	490f      	ldr	r1, [pc, #60]	; (80009c8 <UnlinkTimer+0x100>)
 800098a:	4613      	mov	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	330c      	adds	r3, #12
 8000996:	2201      	movs	r2, #1
 8000998:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <UnlinkTimer+0xf8>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b06      	cmp	r3, #6
 80009a2:	d107      	bne.n	80009b4 <UnlinkTimer+0xec>
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d104      	bne.n	80009b4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <UnlinkTimer+0x104>)
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	601a      	str	r2, [r3, #0]
  }

  return;
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
}
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	200000b8 	.word	0x200000b8
 80009c4:	200000b9 	.word	0x200000b9
 80009c8:	20000028 	.word	0x20000028
 80009cc:	200000bc 	.word	0x200000bc

080009d0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <ReturnTimeElapsed+0x70>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009de:	d026      	beq.n	8000a2e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80009e0:	f7ff fe02 	bl	80005e8 <ReadRtcSsrValue>
 80009e4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <ReturnTimeElapsed+0x70>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d805      	bhi.n	80009fc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <ReturnTimeElapsed+0x70>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	e00a      	b.n	8000a12 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <ReturnTimeElapsed+0x74>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000a08:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <ReturnTimeElapsed+0x70>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <ReturnTimeElapsed+0x78>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	fb02 f303 	mul.w	r3, r2, r3
 8000a1e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <ReturnTimeElapsed+0x7c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	40d3      	lsrs	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	e001      	b.n	8000a32 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	b29b      	uxth	r3, r3
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000bc 	.word	0x200000bc
 8000a44:	200001ca 	.word	0x200001ca
 8000a48:	200001c9 	.word	0x200001c9
 8000a4c:	200001c8 	.word	0x200001c8

08000a50 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d108      	bne.n	8000a72 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000a60:	f7ff fdc2 	bl	80005e8 <ReadRtcSsrValue>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <RestartWakeupCounter+0xa8>)
 8000a68:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f003 fa37 	bl	8003ede <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000a70:	e03e      	b.n	8000af0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d803      	bhi.n	8000a80 <RestartWakeupCounter+0x30>
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <RestartWakeupCounter+0xac>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d002      	beq.n	8000a86 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000a86:	bf00      	nop
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f7      	beq.n	8000a88 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000aac:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <RestartWakeupCounter+0xb4>)
 8000ab0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ab4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f003 fa1f 	bl	8003efa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <RestartWakeupCounter+0xb8>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	0c1b      	lsrs	r3, r3, #16
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	88fa      	ldrh	r2, [r7, #6]
 8000ac6:	4910      	ldr	r1, [pc, #64]	; (8000b08 <RestartWakeupCounter+0xb8>)
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000acc:	f7ff fd8c 	bl	80005e8 <ReadRtcSsrValue>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <RestartWakeupCounter+0xa8>)
 8000ad4:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <RestartWakeupCounter+0xb0>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ae8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000aea:	f3af 8000 	nop.w
  return ;
 8000aee:	bf00      	nop
}
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000bc 	.word	0x200000bc
 8000afc:	200001c8 	.word	0x200001c8
 8000b00:	200001c4 	.word	0x200001c4
 8000b04:	58000800 	.word	0x58000800
 8000b08:	40002800 	.word	0x40002800

08000b0c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b12:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <RescheduleTimerList+0x124>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b1e:	d108      	bne.n	8000b32 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000b20:	bf00      	nop
 8000b22:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <RescheduleTimerList+0x128>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f7      	bne.n	8000b22 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000b32:	4b40      	ldr	r3, [pc, #256]	; (8000c34 <RescheduleTimerList+0x128>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689a      	ldr	r2, [r3, #8]
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <RescheduleTimerList+0x128>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b44:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000b46:	4b3c      	ldr	r3, [pc, #240]	; (8000c38 <RescheduleTimerList+0x12c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000b4c:	7bfa      	ldrb	r2, [r7, #15]
 8000b4e:	493b      	ldr	r1, [pc, #236]	; (8000c3c <RescheduleTimerList+0x130>)
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	440b      	add	r3, r1
 8000b5a:	3308      	adds	r3, #8
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000b60:	f7ff ff36 	bl	80009d0 <ReturnTimeElapsed>
 8000b64:	4603      	mov	r3, r0
 8000b66:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d205      	bcs.n	8000b7c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <RescheduleTimerList+0x134>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e04d      	b.n	8000c18 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <RescheduleTimerList+0x138>)
 8000b80:	8812      	ldrh	r2, [r2, #0]
 8000b82:	b292      	uxth	r2, r2
 8000b84:	4413      	add	r3, r2
 8000b86:	461a      	mov	r2, r3
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d906      	bls.n	8000b9c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000b8e:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <RescheduleTimerList+0x138>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <RescheduleTimerList+0x134>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
 8000b9a:	e03d      	b.n	8000c18 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <RescheduleTimerList+0x134>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000bac:	e034      	b.n	8000c18 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000bae:	7bfa      	ldrb	r2, [r7, #15]
 8000bb0:	4922      	ldr	r1, [pc, #136]	; (8000c3c <RescheduleTimerList+0x130>)
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	440b      	add	r3, r1
 8000bbc:	3308      	adds	r3, #8
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d20a      	bcs.n	8000bdc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000bc6:	7bfa      	ldrb	r2, [r7, #15]
 8000bc8:	491c      	ldr	r1, [pc, #112]	; (8000c3c <RescheduleTimerList+0x130>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	e013      	b.n	8000c04 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000bdc:	7bfa      	ldrb	r2, [r7, #15]
 8000bde:	4917      	ldr	r1, [pc, #92]	; (8000c3c <RescheduleTimerList+0x130>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	440b      	add	r3, r1
 8000bea:	3308      	adds	r3, #8
 8000bec:	6819      	ldr	r1, [r3, #0]
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	7bfa      	ldrb	r2, [r7, #15]
 8000bf2:	1ac9      	subs	r1, r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <RescheduleTimerList+0x130>)
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	4403      	add	r3, r0
 8000c00:	3308      	adds	r3, #8
 8000c02:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c04:	7bfa      	ldrb	r2, [r7, #15]
 8000c06:	490d      	ldr	r1, [pc, #52]	; (8000c3c <RescheduleTimerList+0x130>)
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	440b      	add	r3, r1
 8000c12:	3315      	adds	r3, #21
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d1c7      	bne.n	8000bae <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000c1e:	89bb      	ldrh	r3, [r7, #12]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff15 	bl	8000a50 <RestartWakeupCounter>

  return ;
 8000c26:	bf00      	nop
}
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40002800 	.word	0x40002800
 8000c34:	200001c4 	.word	0x200001c4
 8000c38:	200000b8 	.word	0x200000b8
 8000c3c:	20000028 	.word	0x20000028
 8000c40:	200000c0 	.word	0x200000c0
 8000c44:	200001cc 	.word	0x200001cc

08000c48 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8000c52:	617b      	str	r3, [r7, #20]
  return(result);
 8000c54:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c5c:	4b5f      	ldr	r3, [pc, #380]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	22ca      	movs	r2, #202	; 0xca
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
 8000c66:	4b5d      	ldr	r3, [pc, #372]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2253      	movs	r2, #83	; 0x53
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000c70:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c82:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000c84:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000c8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c90:	4954      	ldr	r1, [pc, #336]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	440b      	add	r3, r1
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d172      	bne.n	8000d8c <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ca6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000caa:	494e      	ldr	r1, [pc, #312]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000cba:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cbe:	4949      	ldr	r1, [pc, #292]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	440b      	add	r3, r1
 8000cca:	3310      	adds	r3, #16
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d050      	beq.n	8000d7c <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000cda:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cde:	4941      	ldr	r1, [pc, #260]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	330d      	adds	r3, #13
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d126      	bne.n	8000d42 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fde4 	bl	80008c8 <UnlinkTimer>
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	f383 8810 	msr	PRIMASK, r3
}
 8000d0a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d0c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d10:	4934      	ldr	r1, [pc, #208]	; (8000de4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fa4e 	bl	80011c8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	22ca      	movs	r2, #202	; 0xca
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2253      	movs	r2, #83	; 0x53
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
 8000d40:	e014      	b.n	8000d6c <HW_TS_RTC_Wakeup_Handler+0x124>
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f383 8810 	msr	PRIMASK, r3
}
 8000d4c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f9ac 	bl	80010b0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d58:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	22ca      	movs	r2, #202	; 0xca
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2253      	movs	r2, #83	; 0x53
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d70:	69fa      	ldr	r2, [r7, #28]
 8000d72:	4619      	mov	r1, r3
 8000d74:	69b8      	ldr	r0, [r7, #24]
 8000d76:	f000 faaf 	bl	80012d8 <HW_TS_RTC_Int_AppNot>
 8000d7a:	e025      	b.n	8000dc8 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000d7c:	f7ff fec6 	bl	8000b0c <RescheduleTimerList>
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	f383 8810 	msr	PRIMASK, r3
}
 8000d8a:	e01d      	b.n	8000dc8 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000d8c:	bf00      	nop
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f7      	beq.n	8000d8e <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000db2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000db4:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000db6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f383 8810 	msr	PRIMASK, r3
}
 8000dc6:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000dd2:	bf00      	nop
}
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001c4 	.word	0x200001c4
 8000de0:	200000b8 	.word	0x200000b8
 8000de4:	20000028 	.word	0x20000028
 8000de8:	200000c0 	.word	0x200000c0
 8000dec:	58000800 	.word	0x58000800

08000df0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000dfc:	4a64      	ldr	r2, [pc, #400]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e02:	4b63      	ldr	r3, [pc, #396]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	22ca      	movs	r2, #202	; 0xca
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e0c:	4b60      	ldr	r3, [pc, #384]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2253      	movs	r2, #83	; 0x53
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e16:	4b5f      	ldr	r3, [pc, #380]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	4a5e      	ldr	r2, [pc, #376]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e1c:	f043 0320 	orr.w	r3, r3, #32
 8000e20:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e22:	4b5c      	ldr	r3, [pc, #368]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f1c3 0304 	rsb	r3, r3, #4
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b58      	ldr	r3, [pc, #352]	; (8000f98 <HW_TS_Init+0x1a8>)
 8000e36:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e38:	4b56      	ldr	r3, [pc, #344]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000e40:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000e44:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	fa92 f2a2 	rbit	r2, r2
 8000e4c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	d101      	bne.n	8000e5c <HW_TS_Init+0x6c>
  {
    return 32U;
 8000e58:	2220      	movs	r2, #32
 8000e5a:	e003      	b.n	8000e64 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	fab2 f282 	clz	r2, r2
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	40d3      	lsrs	r3, r2
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <HW_TS_Init+0x1ac>)
 8000e6e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000e70:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <HW_TS_Init+0x1a4>)
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b47      	ldr	r3, [pc, #284]	; (8000fa0 <HW_TS_Init+0x1b0>)
 8000e82:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000e84:	4b46      	ldr	r3, [pc, #280]	; (8000fa0 <HW_TS_Init+0x1b0>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	4a44      	ldr	r2, [pc, #272]	; (8000f9c <HW_TS_Init+0x1ac>)
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	fb02 f303 	mul.w	r3, r2, r3
 8000e92:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000e96:	4a40      	ldr	r2, [pc, #256]	; (8000f98 <HW_TS_Init+0x1a8>)
 8000e98:	7812      	ldrb	r2, [r2, #0]
 8000e9a:	40d3      	lsrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d904      	bls.n	8000eb2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <HW_TS_Init+0x1b4>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	801a      	strh	r2, [r3, #0]
 8000eb0:	e003      	b.n	8000eba <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <HW_TS_Init+0x1b4>)
 8000eb8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000eba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ebe:	f7ff fb81 	bl	80005c4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ec2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ec6:	f7ff fb69 	bl	800059c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d143      	bne.n	8000f58 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HW_TS_Init+0x1b8>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	; (8000fac <HW_TS_Init+0x1bc>)
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	77fb      	strb	r3, [r7, #31]
 8000ee2:	e00c      	b.n	8000efe <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000ee4:	7ffa      	ldrb	r2, [r7, #31]
 8000ee6:	4932      	ldr	r1, [pc, #200]	; (8000fb0 <HW_TS_Init+0x1c0>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	330c      	adds	r3, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ef8:	7ffb      	ldrb	r3, [r7, #31]
 8000efa:	3301      	adds	r3, #1
 8000efc:	77fb      	strb	r3, [r7, #31]
 8000efe:	7ffb      	ldrb	r3, [r7, #31]
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d9ef      	bls.n	8000ee4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HW_TS_Init+0x1c4>)
 8000f06:	2206      	movs	r2, #6
 8000f08:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f1c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f32:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f34:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HW_TS_Init+0x1c8>)
 8000f36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f3a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f002 ffdc 	bl	8003efa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	e00a      	b.n	8000f6e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f002 ffb8 	bl	8003ede <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HW_TS_Init+0x1a0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	22ff      	movs	r2, #255	; 0xff
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f002 ff6c 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000f82:	2003      	movs	r0, #3
 8000f84:	f002 ff83 	bl	8003e8e <HAL_NVIC_EnableIRQ>

  return;
 8000f88:	bf00      	nop
}
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001c4 	.word	0x200001c4
 8000f94:	40002800 	.word	0x40002800
 8000f98:	200001c8 	.word	0x200001c8
 8000f9c:	200001c9 	.word	0x200001c9
 8000fa0:	200001ca 	.word	0x200001ca
 8000fa4:	200001cc 	.word	0x200001cc
 8000fa8:	200000c0 	.word	0x200000c0
 8000fac:	200000bc 	.word	0x200000bc
 8000fb0:	20000028 	.word	0x20000028
 8000fb4:	200000b8 	.word	0x200000b8
 8000fb8:	58000800 	.word	0x58000800

08000fbc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8000fd6:	61fb      	str	r3, [r7, #28]
  return(result);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000fdc:	b672      	cpsid	i
}
 8000fde:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000fe0:	e004      	b.n	8000fec <HW_TS_Create+0x30>
  {
    loop++;
 8000fe2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8000fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d80c      	bhi.n	800100e <HW_TS_Create+0x52>
 8000ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ff8:	492c      	ldr	r1, [pc, #176]	; (80010ac <HW_TS_Create+0xf0>)
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4413      	add	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	440b      	add	r3, r1
 8001004:	330c      	adds	r3, #12
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1e9      	bne.n	8000fe2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800100e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001012:	2b06      	cmp	r3, #6
 8001014:	d038      	beq.n	8001088 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001016:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800101a:	4924      	ldr	r1, [pc, #144]	; (80010ac <HW_TS_Create+0xf0>)
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	440b      	add	r3, r1
 8001026:	330c      	adds	r3, #12
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	f383 8810 	msr	PRIMASK, r3
}
 8001036:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001038:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800103c:	491b      	ldr	r1, [pc, #108]	; (80010ac <HW_TS_Create+0xf0>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3310      	adds	r3, #16
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800104e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001052:	4916      	ldr	r1, [pc, #88]	; (80010ac <HW_TS_Create+0xf0>)
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	330d      	adds	r3, #13
 8001060:	79fa      	ldrb	r2, [r7, #7]
 8001062:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001064:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001068:	4910      	ldr	r1, [pc, #64]	; (80010ac <HW_TS_Create+0xf0>)
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800107e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001086:	e008      	b.n	800109a <HW_TS_Create+0xde>
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f383 8810 	msr	PRIMASK, r3
}
 8001092:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001094:	2301      	movs	r3, #1
 8001096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800109a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800109e:	4618      	mov	r0, r3
 80010a0:	372c      	adds	r7, #44	; 0x2c
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000028 	.word	0x20000028

080010b0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010ba:	f3ef 8310 	mrs	r3, PRIMASK
 80010be:	60fb      	str	r3, [r7, #12]
  return(result);
 80010c0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80010c8:	2003      	movs	r0, #3
 80010ca:	f002 feee 	bl	8003eaa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HW_TS_Stop+0x100>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	22ca      	movs	r2, #202	; 0xca
 80010d6:	625a      	str	r2, [r3, #36]	; 0x24
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <HW_TS_Stop+0x100>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2253      	movs	r2, #83	; 0x53
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	4933      	ldr	r1, [pc, #204]	; (80011b4 <HW_TS_Stop+0x104>)
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	440b      	add	r3, r1
 80010f0:	330c      	adds	r3, #12
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d148      	bne.n	800118c <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fbe2 	bl	80008c8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HW_TS_Stop+0x108>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800110a:	7cfb      	ldrb	r3, [r7, #19]
 800110c:	2b06      	cmp	r3, #6
 800110e:	d135      	bne.n	800117c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001110:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <HW_TS_Stop+0x10c>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111c:	d108      	bne.n	8001130 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800111e:	bf00      	nop
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HW_TS_Stop+0x100>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f7      	bne.n	8001120 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <HW_TS_Stop+0x100>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HW_TS_Stop+0x100>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001142:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001144:	bf00      	nop
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HW_TS_Stop+0x100>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0f7      	beq.n	8001146 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HW_TS_Stop+0x100>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HW_TS_Stop+0x100>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800116a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HW_TS_Stop+0x110>)
 800116e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001172:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001174:	2003      	movs	r0, #3
 8001176:	f002 fec0 	bl	8003efa <HAL_NVIC_ClearPendingIRQ>
 800117a:	e007      	b.n	800118c <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HW_TS_Stop+0x114>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	7cfa      	ldrb	r2, [r7, #19]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001188:	f7ff fcc0 	bl	8000b0c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HW_TS_Stop+0x100>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	22ff      	movs	r2, #255	; 0xff
 8001194:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001196:	2003      	movs	r0, #3
 8001198:	f002 fe79 	bl	8003e8e <HAL_NVIC_EnableIRQ>
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	f383 8810 	msr	PRIMASK, r3
}
 80011a6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011a8:	bf00      	nop
}
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001c4 	.word	0x200001c4
 80011b4:	20000028 	.word	0x20000028
 80011b8:	200000b8 	.word	0x200000b8
 80011bc:	40002800 	.word	0x40002800
 80011c0:	58000800 	.word	0x58000800
 80011c4:	200000b9 	.word	0x200000b9

080011c8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80011d4:	79fa      	ldrb	r2, [r7, #7]
 80011d6:	493c      	ldr	r1, [pc, #240]	; (80012c8 <HW_TS_Start+0x100>)
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	330c      	adds	r3, #12
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d103      	bne.n	80011f4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff5e 	bl	80010b0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011f4:	f3ef 8310 	mrs	r3, PRIMASK
 80011f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80011fa:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80011fe:	b672      	cpsid	i
}
 8001200:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001202:	2003      	movs	r0, #3
 8001204:	f002 fe51 	bl	8003eaa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HW_TS_Start+0x104>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	22ca      	movs	r2, #202	; 0xca
 8001210:	625a      	str	r2, [r3, #36]	; 0x24
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <HW_TS_Start+0x104>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2253      	movs	r2, #83	; 0x53
 800121a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	492a      	ldr	r1, [pc, #168]	; (80012c8 <HW_TS_Start+0x100>)
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	330c      	adds	r3, #12
 800122c:	2202      	movs	r2, #2
 800122e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001230:	79fa      	ldrb	r2, [r7, #7]
 8001232:	4925      	ldr	r1, [pc, #148]	; (80012c8 <HW_TS_Start+0x100>)
 8001234:	4613      	mov	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4413      	add	r3, r2
 800123a:	00db      	lsls	r3, r3, #3
 800123c:	440b      	add	r3, r1
 800123e:	3308      	adds	r3, #8
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	4920      	ldr	r1, [pc, #128]	; (80012c8 <HW_TS_Start+0x100>)
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	3304      	adds	r3, #4
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fa8a 	bl	8000774 <linkTimer>
 8001260:	4603      	mov	r3, r0
 8001262:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HW_TS_Start+0x108>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HW_TS_Start+0x10c>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	7c7a      	ldrb	r2, [r7, #17]
 8001272:	429a      	cmp	r2, r3
 8001274:	d002      	beq.n	800127c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001276:	f7ff fc49 	bl	8000b0c <RescheduleTimerList>
 800127a:	e013      	b.n	80012a4 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	4912      	ldr	r1, [pc, #72]	; (80012c8 <HW_TS_Start+0x100>)
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	3308      	adds	r3, #8
 800128c:	6819      	ldr	r1, [r3, #0]
 800128e:	8a7b      	ldrh	r3, [r7, #18]
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	1ac9      	subs	r1, r1, r3
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <HW_TS_Start+0x100>)
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4403      	add	r3, r0
 80012a0:	3308      	adds	r3, #8
 80012a2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HW_TS_Start+0x104>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	22ff      	movs	r2, #255	; 0xff
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012ae:	2003      	movs	r0, #3
 80012b0:	f002 fded 	bl	8003e8e <HAL_NVIC_EnableIRQ>
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	f383 8810 	msr	PRIMASK, r3
}
 80012be:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012c0:	bf00      	nop
}
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000028 	.word	0x20000028
 80012cc:	200001c4 	.word	0x200001c4
 80012d0:	200000b8 	.word	0x200000b8
 80012d4:	200000b9 	.word	0x200000b9

080012d8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	460b      	mov	r3, r1
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4798      	blx	r3

  return;
 80012ea:	bf00      	nop
}
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <LL_EXTI_DisableIT_0_31>:
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <LL_EXTI_DisableIT_0_31+0x28>)
 80012fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	43db      	mvns	r3, r3
 8001306:	4905      	ldr	r1, [pc, #20]	; (800131c <LL_EXTI_DisableIT_0_31+0x28>)
 8001308:	4013      	ands	r3, r2
 800130a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	58000800 	.word	0x58000800

08001320 <LL_EXTI_DisableIT_32_63>:
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <LL_EXTI_DisableIT_32_63+0x28>)
 800132a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	43db      	mvns	r3, r3
 8001332:	4905      	ldr	r1, [pc, #20]	; (8001348 <LL_EXTI_DisableIT_32_63+0x28>)
 8001334:	4013      	ands	r3, r2
 8001336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	58000800 	.word	0x58000800

0800134c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800135a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800135e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001366:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001372:	4313      	orrs	r3, r2
 8001374:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	cafecafe 	.word	0xcafecafe

08001388 <LL_RCC_LSE_SetDriveCapability>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001398:	f023 0218 	bic.w	r2, r3, #24
 800139c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80013fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800140c:	d101      	bne.n	8001412 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001432:	d101      	bne.n	8001438 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_AHB1_GRP1_EnableClock>:
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4313      	orrs	r3, r2
 800145a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800145c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001460:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4013      	ands	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001468:	68fb      	ldr	r3, [r7, #12]
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <LL_AHB2_GRP1_EnableClock>:
{
 8001476:	b480      	push	{r7}
 8001478:	b085      	sub	sp, #20
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800147e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001484:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4313      	orrs	r3, r2
 800148c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4013      	ands	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_AHB3_GRP1_EnableClock>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80014b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014cc:	68fb      	ldr	r3, [r7, #12]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	041b      	lsls	r3, r3, #16
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	605a      	str	r2, [r3, #4]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	605a      	str	r2, [r3, #4]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	615a      	str	r2, [r3, #20]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	615a      	str	r2, [r3, #20]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	609a      	str	r2, [r3, #8]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0a6      	sub	sp, #152	; 0x98
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t i = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint8_t UART_count = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 // char UART_string[33] = {"\0"};
  char buffer[3];
  char char_buffer[4];
  char UART_String[98] = {0};
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	225e      	movs	r2, #94	; 0x5e
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f009 faac 	bl	800ab1c <memset>
  char ADC_UART_String[33] = {0};
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	221d      	movs	r2, #29
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f009 faa4 	bl	800ab1c <memset>
  UART_String[97] = 10; // line feed
 80015d4:	230a      	movs	r3, #10
 80015d6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  UART_String[96] = 13; // carriage return
 80015da:	230d      	movs	r3, #13
 80015dc:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  Custom_Notification = 0;
 80015e0:	4bca      	ldr	r3, [pc, #808]	; (800190c <main+0x36c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
  uint8_t SequenceLoop = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
  uint8_t UART_Transmit_ADC_values = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  uint8_t ADC_Read_Array_Complete = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  uint16_t BatV = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80015fe:	4bc4      	ldr	r3, [pc, #784]	; (8001910 <main+0x370>)
 8001600:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001604:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001606:	f001 f8c7 	bl	8002798 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 800160a:	f000 fd94 	bl	8002136 <Reset_Device>
  Config_HSE();
 800160e:	f000 fd7e 	bl	800210e <Config_HSE>
	
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001612:	f000 fb15 	bl	8001c40 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001616:	f000 fc35 	bl	8001e84 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 800161a:	f000 fd71 	bl	8002100 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 800161e:	f000 fdcc 	bl	80021ba <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f000 fd29 	bl	8002078 <MX_GPIO_Init>
  MX_DMA_Init();
 8001626:	f000 fd0d 	bl	8002044 <MX_DMA_Init>
  MX_RF_Init();
 800162a:	f000 fc3f 	bl	8001eac <MX_RF_Init>
  MX_RTC_Init();
 800162e:	f000 fc45 	bl	8001ebc <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001632:	f000 fcbb 	bl	8001fac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001636:	f000 fc6b 	bl	8001f10 <MX_TIM2_Init>
  MX_ADC1_Init();
 800163a:	f000 fb6d 	bl	8001d18 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Calibration for ADC
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800163e:	217f      	movs	r1, #127	; 0x7f
 8001640:	48b4      	ldr	r0, [pc, #720]	; (8001914 <main+0x374>)
 8001642:	f002 fa6d 	bl	8003b20 <HAL_ADCEx_Calibration_Start>

  UART_Transmit_ADC_values = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 800164c:	f7fe feea 	bl	8000424 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  HAL_TIM_Base_Start_IT(&htim2); //start timer2 with interrupt
 8001650:	48b1      	ldr	r0, [pc, #708]	; (8001918 <main+0x378>)
 8001652:	f004 fe1b 	bl	800628c <HAL_TIM_Base_Start_IT>
  {
  	
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001656:	f04f 30ff 	mov.w	r0, #4294967295
 800165a:	f008 fff7 	bl	800a64c <UTIL_SEQ_Run>

	// RunningState = 1 means BLE is running
	// This if function is meant to let STM micro to send data to computer once data is compiled.
	if ((RunningState == 1) && (ADC_Read_Array_Complete == 1)) {
 800165e:	4baf      	ldr	r3, [pc, #700]	; (800191c <main+0x37c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d10a      	bne.n	800167c <main+0xdc>
 8001666:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800166a:	2b01      	cmp	r3, #1
 800166c:	d106      	bne.n	800167c <main+0xdc>

		}
*/
		// Compile data into an array for sending via BLE

		RunningState = 0; // reset variable
 800166e:	4bab      	ldr	r3, [pc, #684]	; (800191c <main+0x37c>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8001674:	2100      	movs	r1, #0
 8001676:	2002      	movs	r0, #2
 8001678:	f009 f8ee 	bl	800a858 <UTIL_SEQ_SetTask>
		// Temporarily disable the UART transmit to reduce time for processing
		// HAL_UART_Transmit(&huart1, &UART_String, sizeof(UART_String), 100); // Send data via UART (working)
	}

	if (TimeReady == 1) {
 800167c:	4ba8      	ldr	r3, [pc, #672]	; (8001920 <main+0x380>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d12f      	bne.n	80016e4 <main+0x144>

		// reset variables
		SequenceLoop = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
		TimeReady = 0; // reset trigger
 800168a:	4ba5      	ldr	r3, [pc, #660]	; (8001920 <main+0x380>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]

		// start GPIO1
		HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_SET); // GPIO1
 8001690:	2201      	movs	r2, #1
 8001692:	2104      	movs	r1, #4
 8001694:	48a3      	ldr	r0, [pc, #652]	; (8001924 <main+0x384>)
 8001696:	f003 f8ab 	bl	80047f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET); // GPIO2
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f003 f8a4 	bl	80047f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b2:	f003 f89d 	bl	80047f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
 80016b6:	2200      	movs	r2, #0
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f003 f897 	bl	80047f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c8:	4896      	ldr	r0, [pc, #600]	; (8001924 <main+0x384>)
 80016ca:	f003 f891 	bl	80047f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d4:	4893      	ldr	r0, [pc, #588]	; (8001924 <main+0x384>)
 80016d6:	f003 f88b 	bl	80047f0 <HAL_GPIO_WritePin>

		// start adc conversion
		HAL_ADC_Start_DMA(&hadc1, &ADC_Buffer, 6); //This needs to be changed later, ADC reads 7 values
 80016da:	2206      	movs	r2, #6
 80016dc:	4992      	ldr	r1, [pc, #584]	; (8001928 <main+0x388>)
 80016de:	488d      	ldr	r0, [pc, #564]	; (8001914 <main+0x374>)
 80016e0:	f001 fc26 	bl	8002f30 <HAL_ADC_Start_DMA>

	}

	// ADC_Read_Complete only goes 1 when ADC conversion is finished
	if (ADC_Read_Complete == 1) {
 80016e4:	4b91      	ldr	r3, [pc, #580]	; (800192c <main+0x38c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d1b4      	bne.n	8001656 <main+0xb6>

		// Save data to BT array
		for (i=0; i<6; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80016f2:	e02d      	b.n	8001750 <main+0x1b0>
			BTdata[SequenceLoop*12 + i*2] = ADC_Buffer[i]>>8; //high byte
 80016f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016f8:	4a8b      	ldr	r2, [pc, #556]	; (8001928 <main+0x388>)
 80016fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016fe:	0a1b      	lsrs	r3, r3, #8
 8001700:	b299      	uxth	r1, r3
 8001702:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	461a      	mov	r2, r3
 8001710:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001714:	4413      	add	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	b2c9      	uxtb	r1, r1
 800171a:	4a85      	ldr	r2, [pc, #532]	; (8001930 <main+0x390>)
 800171c:	54d1      	strb	r1, [r2, r3]
			BTdata[SequenceLoop*12 + i*2 + 1] = ADC_Buffer[i]; //low byte
 800171e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001722:	4a81      	ldr	r2, [pc, #516]	; (8001928 <main+0x388>)
 8001724:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001728:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	461a      	mov	r2, r3
 8001736:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	3301      	adds	r3, #1
 8001740:	b2c9      	uxtb	r1, r1
 8001742:	4a7b      	ldr	r2, [pc, #492]	; (8001930 <main+0x390>)
 8001744:	54d1      	strb	r1, [r2, r3]
		for (i=0; i<6; i++) {
 8001746:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800174a:	3301      	adds	r3, #1
 800174c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001750:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001754:	2b05      	cmp	r3, #5
 8001756:	d9cd      	bls.n	80016f4 <main+0x154>
		}

		// UART Debug transmission, set UART_Transmit_ADC_values to 0 to quicken operation
		if (UART_Transmit_ADC_values == 1) {
 8001758:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800175c:	2b01      	cmp	r3, #1
 800175e:	f040 814e 	bne.w	80019fe <main+0x45e>
			itoa(SequenceLoop, buffer, 10);
 8001762:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001766:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800176a:	220a      	movs	r2, #10
 800176c:	4618      	mov	r0, r3
 800176e:	f009 f9c5 	bl	800aafc <itoa>
			buffer[1] = '=';
 8001772:	233d      	movs	r3, #61	; 0x3d
 8001774:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
			buffer[2] = '>';
 8001778:	233e      	movs	r3, #62	; 0x3e
 800177a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			HAL_UART_Transmit(&huart1, buffer, 3, 10); // Send data via UART (working)
 800177e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001782:	230a      	movs	r3, #10
 8001784:	2203      	movs	r2, #3
 8001786:	486b      	ldr	r0, [pc, #428]	; (8001934 <main+0x394>)
 8001788:	f005 f9ba 	bl	8006b00 <HAL_UART_Transmit>

			UART_count = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

			// Reading the ADC buffer results
			for (i=0; i<6; i++) {
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001798:	e108      	b.n	80019ac <main+0x40c>
				// Making a char array for transmitting via UART for checking
				itoa(ADC_Buffer[i], char_buffer, 10);
 800179a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800179e:	4a62      	ldr	r2, [pc, #392]	; (8001928 <main+0x388>)
 80017a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80017aa:	220a      	movs	r2, #10
 80017ac:	4619      	mov	r1, r3
 80017ae:	f009 f9a5 	bl	800aafc <itoa>

				if (ADC_Buffer[i] < 10) {
 80017b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80017b6:	4a5c      	ldr	r2, [pc, #368]	; (8001928 <main+0x388>)
 80017b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017bc:	2b09      	cmp	r3, #9
 80017be:	d832      	bhi.n	8001826 <main+0x286>
					ADC_UART_String[UART_count+0] = '0';
 80017c0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80017c4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80017c8:	4413      	add	r3, r2
 80017ca:	2230      	movs	r2, #48	; 0x30
 80017cc:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+1] = '0';
 80017d0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80017d4:	3301      	adds	r3, #1
 80017d6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80017da:	4413      	add	r3, r2
 80017dc:	2230      	movs	r2, #48	; 0x30
 80017de:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+2] = '0';
 80017e2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80017e6:	3302      	adds	r3, #2
 80017e8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80017ec:	4413      	add	r3, r2
 80017ee:	2230      	movs	r2, #48	; 0x30
 80017f0:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+3] = char_buffer[0];
 80017f4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80017f8:	3303      	adds	r3, #3
 80017fa:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80017fe:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001802:	440b      	add	r3, r1
 8001804:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+4] = 44; //44 is ascii for ","
 8001808:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800180c:	3304      	adds	r3, #4
 800180e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001812:	4413      	add	r3, r2
 8001814:	222c      	movs	r2, #44	; 0x2c
 8001816:	f803 2c98 	strb.w	r2, [r3, #-152]
					UART_count += 5;
 800181a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800181e:	3305      	adds	r3, #5
 8001820:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001824:	e0bd      	b.n	80019a2 <main+0x402>
				}
				else if (ADC_Buffer[i] < 100) {
 8001826:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <main+0x388>)
 800182c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001830:	2b63      	cmp	r3, #99	; 0x63
 8001832:	d833      	bhi.n	800189c <main+0x2fc>
					ADC_UART_String[UART_count+0] = '0';
 8001834:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001838:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800183c:	4413      	add	r3, r2
 800183e:	2230      	movs	r2, #48	; 0x30
 8001840:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+1] = '0';
 8001844:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001848:	3301      	adds	r3, #1
 800184a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800184e:	4413      	add	r3, r2
 8001850:	2230      	movs	r2, #48	; 0x30
 8001852:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+2] = char_buffer[0];
 8001856:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800185a:	3302      	adds	r3, #2
 800185c:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8001860:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001864:	440b      	add	r3, r1
 8001866:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+3] = char_buffer[1];
 800186a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800186e:	3303      	adds	r3, #3
 8001870:	f897 2089 	ldrb.w	r2, [r7, #137]	; 0x89
 8001874:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001878:	440b      	add	r3, r1
 800187a:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+4] = 44; //44 is ascii for ","
 800187e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001882:	3304      	adds	r3, #4
 8001884:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001888:	4413      	add	r3, r2
 800188a:	222c      	movs	r2, #44	; 0x2c
 800188c:	f803 2c98 	strb.w	r2, [r3, #-152]
					UART_count += 5;
 8001890:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001894:	3305      	adds	r3, #5
 8001896:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800189a:	e082      	b.n	80019a2 <main+0x402>
				}
				else if (ADC_Buffer[i] < 1000) {
 800189c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80018a0:	4a21      	ldr	r2, [pc, #132]	; (8001928 <main+0x388>)
 80018a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018aa:	d245      	bcs.n	8001938 <main+0x398>
					ADC_UART_String[UART_count+0] = '0';
 80018ac:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80018b0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80018b4:	4413      	add	r3, r2
 80018b6:	2230      	movs	r2, #48	; 0x30
 80018b8:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+1] = char_buffer[0];
 80018bc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80018c0:	3301      	adds	r3, #1
 80018c2:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80018c6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80018ca:	440b      	add	r3, r1
 80018cc:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+2] = char_buffer[1];
 80018d0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80018d4:	3302      	adds	r3, #2
 80018d6:	f897 2089 	ldrb.w	r2, [r7, #137]	; 0x89
 80018da:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80018de:	440b      	add	r3, r1
 80018e0:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+3] = char_buffer[2];
 80018e4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80018e8:	3303      	adds	r3, #3
 80018ea:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 80018ee:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80018f2:	440b      	add	r3, r1
 80018f4:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+4] = 44; //44 is ascii for ","
 80018f8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80018fc:	3304      	adds	r3, #4
 80018fe:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001902:	4413      	add	r3, r2
 8001904:	222c      	movs	r2, #44	; 0x2c
 8001906:	f803 2c98 	strb.w	r2, [r3, #-152]
 800190a:	e04a      	b.n	80019a2 <main+0x402>
 800190c:	20000218 	.word	0x20000218
 8001910:	58004000 	.word	0x58004000
 8001914:	200003e8 	.word	0x200003e8
 8001918:	20000560 	.word	0x20000560
 800191c:	20000219 	.word	0x20000219
 8001920:	2000021a 	.word	0x2000021a
 8001924:	48000400 	.word	0x48000400
 8001928:	2000021c 	.word	0x2000021c
 800192c:	20000228 	.word	0x20000228
 8001930:	200001d0 	.word	0x200001d0
 8001934:	2000044c 	.word	0x2000044c
				}

				else {
					ADC_UART_String[UART_count+0] = char_buffer[0];
 8001938:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800193c:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8001940:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001944:	440b      	add	r3, r1
 8001946:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+1] = char_buffer[1];
 800194a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800194e:	3301      	adds	r3, #1
 8001950:	f897 2089 	ldrb.w	r2, [r7, #137]	; 0x89
 8001954:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001958:	440b      	add	r3, r1
 800195a:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+2] = char_buffer[2];
 800195e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001962:	3302      	adds	r3, #2
 8001964:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 8001968:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800196c:	440b      	add	r3, r1
 800196e:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+3] = char_buffer[3];
 8001972:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001976:	3303      	adds	r3, #3
 8001978:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 800197c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001980:	440b      	add	r3, r1
 8001982:	f803 2c98 	strb.w	r2, [r3, #-152]
					ADC_UART_String[UART_count+4] = 44; //44 is ascii for ","
 8001986:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800198a:	3304      	adds	r3, #4
 800198c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001990:	4413      	add	r3, r2
 8001992:	222c      	movs	r2, #44	; 0x2c
 8001994:	f803 2c98 	strb.w	r2, [r3, #-152]
					UART_count += 5;
 8001998:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800199c:	3305      	adds	r3, #5
 800199e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			for (i=0; i<6; i++) {
 80019a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80019a6:	3301      	adds	r3, #1
 80019a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80019ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	f67f aef2 	bls.w	800179a <main+0x1fa>
				}
			}

			ADC_UART_String[UART_count] = 'A';
 80019b6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80019ba:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80019be:	4413      	add	r3, r2
 80019c0:	2241      	movs	r2, #65	; 0x41
 80019c2:	f803 2c98 	strb.w	r2, [r3, #-152]
			ADC_UART_String[UART_count+1] = '\n';
 80019c6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80019ca:	3301      	adds	r3, #1
 80019cc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80019d0:	4413      	add	r3, r2
 80019d2:	220a      	movs	r2, #10
 80019d4:	f803 2c98 	strb.w	r2, [r3, #-152]
			ADC_UART_String[UART_count+2] = '\r';
 80019d8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80019dc:	3302      	adds	r3, #2
 80019de:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80019e2:	4413      	add	r3, r2
 80019e4:	220d      	movs	r2, #13
 80019e6:	f803 2c98 	strb.w	r2, [r3, #-152]

			HAL_UART_Transmit(&huart1, &ADC_UART_String, UART_count+3, 50); // Send data via UART (working)
 80019ea:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3303      	adds	r3, #3
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4639      	mov	r1, r7
 80019f6:	2332      	movs	r3, #50	; 0x32
 80019f8:	488c      	ldr	r0, [pc, #560]	; (8001c2c <main+0x68c>)
 80019fa:	f005 f881 	bl	8006b00 <HAL_UART_Transmit>
		}

		ADC_Read_Complete = 0;
 80019fe:	4b8c      	ldr	r3, [pc, #560]	; (8001c30 <main+0x690>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
		SequenceLoop++;
 8001a04:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

		// Set the appropriate GPIO pins
		if (SequenceLoop == 1) {
 8001a0e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d125      	bne.n	8001a62 <main+0x4c2>
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET); // GPIO1
 8001a16:	2200      	movs	r2, #0
 8001a18:	2104      	movs	r1, #4
 8001a1a:	4886      	ldr	r0, [pc, #536]	; (8001c34 <main+0x694>)
 8001a1c:	f002 fee8 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_SET);   // GPIO2
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f002 fee1 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a38:	f002 feda 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f002 fed4 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a4e:	4879      	ldr	r0, [pc, #484]	; (8001c34 <main+0x694>)
 8001a50:	f002 fece 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
 8001a54:	2200      	movs	r2, #0
 8001a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a5a:	4876      	ldr	r0, [pc, #472]	; (8001c34 <main+0x694>)
 8001a5c:	f002 fec8 	bl	80047f0 <HAL_GPIO_WritePin>
 8001a60:	e0a6      	b.n	8001bb0 <main+0x610>
		}
		else if (SequenceLoop == 2) {
 8001a62:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d125      	bne.n	8001ab6 <main+0x516>
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET); // GPIO1
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	4871      	ldr	r0, [pc, #452]	; (8001c34 <main+0x694>)
 8001a70:	f002 febe 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET); // GPIO2
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7e:	f002 feb7 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_SET);   // GPIO3
 8001a82:	2201      	movs	r2, #1
 8001a84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8c:	f002 feb0 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
 8001a90:	2200      	movs	r2, #0
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f002 feaa 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa2:	4864      	ldr	r0, [pc, #400]	; (8001c34 <main+0x694>)
 8001aa4:	f002 fea4 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aae:	4861      	ldr	r0, [pc, #388]	; (8001c34 <main+0x694>)
 8001ab0:	f002 fe9e 	bl	80047f0 <HAL_GPIO_WritePin>
 8001ab4:	e07c      	b.n	8001bb0 <main+0x610>
		}
		else if (SequenceLoop == 3) {
 8001ab6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d125      	bne.n	8001b0a <main+0x56a>
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET); // GPIO1
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	485c      	ldr	r0, [pc, #368]	; (8001c34 <main+0x694>)
 8001ac4:	f002 fe94 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET); // GPIO2
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f002 fe8d 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae0:	f002 fe86 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_SET); // GPIO4
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2180      	movs	r1, #128	; 0x80
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aec:	f002 fe80 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af6:	484f      	ldr	r0, [pc, #316]	; (8001c34 <main+0x694>)
 8001af8:	f002 fe7a 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b02:	484c      	ldr	r0, [pc, #304]	; (8001c34 <main+0x694>)
 8001b04:	f002 fe74 	bl	80047f0 <HAL_GPIO_WritePin>
 8001b08:	e052      	b.n	8001bb0 <main+0x610>
		}
		else if (SequenceLoop == 4) {
 8001b0a:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d125      	bne.n	8001b5e <main+0x5be>
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET); // GPIO1
 8001b12:	2200      	movs	r2, #0
 8001b14:	2104      	movs	r1, #4
 8001b16:	4847      	ldr	r0, [pc, #284]	; (8001c34 <main+0x694>)
 8001b18:	f002 fe6a 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET); // GPIO2
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b26:	f002 fe63 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b34:	f002 fe5c 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f002 fe56 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_SET); // GPIO5
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b4a:	483a      	ldr	r0, [pc, #232]	; (8001c34 <main+0x694>)
 8001b4c:	f002 fe50 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b56:	4837      	ldr	r0, [pc, #220]	; (8001c34 <main+0x694>)
 8001b58:	f002 fe4a 	bl	80047f0 <HAL_GPIO_WritePin>
 8001b5c:	e028      	b.n	8001bb0 <main+0x610>
		}
		else if (SequenceLoop == 5) {
 8001b5e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	d124      	bne.n	8001bb0 <main+0x610>
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET); // GPIO1
 8001b66:	2200      	movs	r2, #0
 8001b68:	2104      	movs	r1, #4
 8001b6a:	4832      	ldr	r0, [pc, #200]	; (8001c34 <main+0x694>)
 8001b6c:	f002 fe40 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET); // GPIO2
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7a:	f002 fe39 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b88:	f002 fe32 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2180      	movs	r1, #128	; 0x80
 8001b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b94:	f002 fe2c 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b9e:	4825      	ldr	r0, [pc, #148]	; (8001c34 <main+0x694>)
 8001ba0:	f002 fe26 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_SET); // GPIO6
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001baa:	4822      	ldr	r0, [pc, #136]	; (8001c34 <main+0x694>)
 8001bac:	f002 fe20 	bl	80047f0 <HAL_GPIO_WritePin>
		}

		// once all ADC reading is done
		if (SequenceLoop >= 6) {
 8001bb0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d933      	bls.n	8001c20 <main+0x680>

			if (UART_Transmit_ADC_values == 1) {
 8001bb8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d106      	bne.n	8001bce <main+0x62e>
				HAL_UART_Transmit(&huart1, '\n\r', 2, 20); // Send data via UART
 8001bc0:	2314      	movs	r3, #20
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f640 210d 	movw	r1, #2573	; 0xa0d
 8001bc8:	4818      	ldr	r0, [pc, #96]	; (8001c2c <main+0x68c>)
 8001bca:	f004 ff99 	bl	8006b00 <HAL_UART_Transmit>
			}

			// reset all GPIO
			HAL_GPIO_WritePin(GPIO1_GPIO_Port, GPIO1_Pin, GPIO_PIN_RESET); // GPIO1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	4818      	ldr	r0, [pc, #96]	; (8001c34 <main+0x694>)
 8001bd4:	f002 fe0c 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO2_GPIO_Port, GPIO2_Pin, GPIO_PIN_RESET); // GPIO2
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f002 fe05 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO3_GPIO_Port, GPIO3_Pin, GPIO_PIN_RESET); // GPIO3
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf0:	f002 fdfe 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO4_GPIO_Port, GPIO4_Pin, GPIO_PIN_RESET); // GPIO4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2180      	movs	r1, #128	; 0x80
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfc:	f002 fdf8 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO5_GPIO_Port, GPIO5_Pin, GPIO_PIN_RESET); // GPIO5
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c06:	480b      	ldr	r0, [pc, #44]	; (8001c34 <main+0x694>)
 8001c08:	f002 fdf2 	bl	80047f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET); // GPIO6
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c12:	4808      	ldr	r0, [pc, #32]	; (8001c34 <main+0x694>)
 8001c14:	f002 fdec 	bl	80047f0 <HAL_GPIO_WritePin>

			ADC_Read_Array_Complete = 1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8001c1e:	e51a      	b.n	8001656 <main+0xb6>
		}
		else {
			HAL_ADC_Start_DMA(&hadc1, &ADC_Buffer, 6); // Start conversion
 8001c20:	2206      	movs	r2, #6
 8001c22:	4905      	ldr	r1, [pc, #20]	; (8001c38 <main+0x698>)
 8001c24:	4805      	ldr	r0, [pc, #20]	; (8001c3c <main+0x69c>)
 8001c26:	f001 f983 	bl	8002f30 <HAL_ADC_Start_DMA>
	UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001c2a:	e514      	b.n	8001656 <main+0xb6>
 8001c2c:	2000044c 	.word	0x2000044c
 8001c30:	20000228 	.word	0x20000228
 8001c34:	48000400 	.word	0x48000400
 8001c38:	2000021c 	.word	0x2000021c
 8001c3c:	200003e8 	.word	0x200003e8

08001c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0a2      	sub	sp, #136	; 0x88
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c4a:	2248      	movs	r2, #72	; 0x48
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f008 ff64 	bl	800ab1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
 8001c64:	615a      	str	r2, [r3, #20]
 8001c66:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f008 ff54 	bl	800ab1c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c74:	f002 fe7e 	bl	8004974 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff fb85 	bl	8001388 <LL_RCC_LSE_SetDriveCapability>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001c7e:	2307      	movs	r3, #7
 8001c80:	643b      	str	r3, [r7, #64]	; 0x40
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c92:	2340      	movs	r3, #64	; 0x40
 8001c94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 f9e2 	bl	8005068 <HAL_RCC_OscConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001caa:	f000 fac5 	bl	8002238 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001cae:	236f      	movs	r3, #111	; 0x6f
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cce:	2101      	movs	r1, #1
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fd4b 	bl	800576c <HAL_RCC_ClockConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001cdc:	f000 faac 	bl	8002238 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP|RCC_PERIPHCLK_RTC
 8001ce0:	f641 4301 	movw	r3, #7169	; 0x1c01
 8001ce4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001cea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001cee:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001cf6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cfa:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 f8a4 	bl	8005e4c <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001d0a:	f000 fa95 	bl	8002238 <Error_Handler>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3788      	adds	r7, #136	; 0x88
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
 8001d2c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d30:	4a4d      	ldr	r2, [pc, #308]	; (8001e68 <MX_ADC1_Init+0x150>)
 8001d32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d40:	4b48      	ldr	r3, [pc, #288]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d4c:	4b45      	ldr	r3, [pc, #276]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d4e:	2204      	movs	r2, #4
 8001d50:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d52:	4b44      	ldr	r3, [pc, #272]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d58:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 6;
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d60:	2206      	movs	r2, #6
 8001d62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d64:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d6c:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d78:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d80:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d86:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d8e:	4835      	ldr	r0, [pc, #212]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001d90:	f000 ff82 	bl	8002c98 <HAL_ADC_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001d9a:	f000 fa4d 	bl	8002238 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <MX_ADC1_Init+0x154>)
 8001da0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001da2:	2306      	movs	r3, #6
 8001da4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001da6:	2303      	movs	r3, #3
 8001da8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001daa:	237f      	movs	r3, #127	; 0x7f
 8001dac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dae:	2304      	movs	r3, #4
 8001db0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db6:	463b      	mov	r3, r7
 8001db8:	4619      	mov	r1, r3
 8001dba:	482a      	ldr	r0, [pc, #168]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001dbc:	f001 f950 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001dc6:	f000 fa37 	bl	8002238 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <MX_ADC1_Init+0x158>)
 8001dcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dce:	230c      	movs	r3, #12
 8001dd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4823      	ldr	r0, [pc, #140]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001dd8:	f001 f942 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001de2:	f000 fa29 	bl	8002238 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001de6:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <MX_ADC1_Init+0x15c>)
 8001de8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001dea:	2312      	movs	r3, #18
 8001dec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	481c      	ldr	r0, [pc, #112]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001df4:	f001 f934 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001dfe:	f000 fa1b 	bl	8002238 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_ADC1_Init+0x160>)
 8001e04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e06:	2318      	movs	r3, #24
 8001e08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4815      	ldr	r0, [pc, #84]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001e10:	f001 f926 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001e1a:	f000 fa0d 	bl	8002238 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_ADC1_Init+0x164>)
 8001e20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e28:	463b      	mov	r3, r7
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480d      	ldr	r0, [pc, #52]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001e2e:	f001 f917 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 8001e38:	f000 f9fe 	bl	8002238 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <MX_ADC1_Init+0x168>)
 8001e3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001e40:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001e44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e46:	463b      	mov	r3, r7
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <MX_ADC1_Init+0x14c>)
 8001e4c:	f001 f908 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 8001e56:	f000 f9ef 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200003e8 	.word	0x200003e8
 8001e68:	50040000 	.word	0x50040000
 8001e6c:	14f00020 	.word	0x14f00020
 8001e70:	19200040 	.word	0x19200040
 8001e74:	1d500080 	.word	0x1d500080
 8001e78:	21800100 	.word	0x21800100
 8001e7c:	25b00200 	.word	0x25b00200
 8001e80:	2a000400 	.word	0x2a000400

08001e84 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_IPCC_Init+0x20>)
 8001e8a:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <MX_IPCC_Init+0x24>)
 8001e8c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_IPCC_Init+0x20>)
 8001e90:	f002 fcea 	bl	8004868 <HAL_IPCC_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001e9a:	f000 f9cd 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000034c 	.word	0x2000034c
 8001ea8:	58000c00 	.word	0x58000c00

08001eac <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_RTC_Init+0x4c>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <MX_RTC_Init+0x50>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <MX_RTC_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_RTC_Init+0x4c>)
 8001ece:	220f      	movs	r2, #15
 8001ed0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <MX_RTC_Init+0x4c>)
 8001ed4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ed8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_RTC_Init+0x4c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_RTC_Init+0x4c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_RTC_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_RTC_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_RTC_Init+0x4c>)
 8001ef4:	f004 f885 	bl	8006002 <HAL_RTC_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001efe:	f000 f99b 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2000053c 	.word	0x2000053c
 8001f0c:	40002800 	.word	0x40002800

08001f10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <MX_TIM2_Init+0x98>)
 8001f30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3199;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_TIM2_Init+0x98>)
 8001f38:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001f3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <MX_TIM2_Init+0x98>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <MX_TIM2_Init+0x98>)
 8001f46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <MX_TIM2_Init+0x98>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_TIM2_Init+0x98>)
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f58:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <MX_TIM2_Init+0x98>)
 8001f5a:	f004 f940 	bl	80061de <HAL_TIM_Base_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001f64:	f000 f968 	bl	8002238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	4619      	mov	r1, r3
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_TIM2_Init+0x98>)
 8001f76:	f004 faf6 	bl	8006566 <HAL_TIM_ConfigClockSource>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001f80:	f000 f95a 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_TIM2_Init+0x98>)
 8001f92:	f004 fcd7 	bl	8006944 <HAL_TIMEx_MasterConfigSynchronization>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001f9c:	f000 f94c 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	3720      	adds	r7, #32
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000560 	.word	0x20000560

08001fac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fb2:	4a23      	ldr	r2, [pc, #140]	; (8002040 <MX_USART1_UART_Init+0x94>)
 8001fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fee:	4b13      	ldr	r3, [pc, #76]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ff4:	4811      	ldr	r0, [pc, #68]	; (800203c <MX_USART1_UART_Init+0x90>)
 8001ff6:	f004 fd33 	bl	8006a60 <HAL_UART_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002000:	f000 f91a 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002004:	2100      	movs	r1, #0
 8002006:	480d      	ldr	r0, [pc, #52]	; (800203c <MX_USART1_UART_Init+0x90>)
 8002008:	f005 fbc8 	bl	800779c <HAL_UARTEx_SetTxFifoThreshold>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002012:	f000 f911 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002016:	2100      	movs	r1, #0
 8002018:	4808      	ldr	r0, [pc, #32]	; (800203c <MX_USART1_UART_Init+0x90>)
 800201a:	f005 fbfd 	bl	8007818 <HAL_UARTEx_SetRxFifoThreshold>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002024:	f000 f908 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002028:	4804      	ldr	r0, [pc, #16]	; (800203c <MX_USART1_UART_Init+0x90>)
 800202a:	f005 fb7e 	bl	800772a <HAL_UARTEx_DisableFifoMode>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002034:	f000 f900 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2000044c 	.word	0x2000044c
 8002040:	40013800 	.word	0x40013800

08002044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002048:	2004      	movs	r0, #4
 800204a:	f7ff f9fb 	bl	8001444 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800204e:	2001      	movs	r0, #1
 8002050:	f7ff f9f8 	bl	8001444 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002054:	2200      	movs	r2, #0
 8002056:	2100      	movs	r1, #0
 8002058:	200b      	movs	r0, #11
 800205a:	f001 fefe 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800205e:	200b      	movs	r0, #11
 8002060:	f001 ff15 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	200c      	movs	r0, #12
 800206a:	f001 fef6 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800206e:	200c      	movs	r0, #12
 8002070:	f001 ff0d 	bl	8003e8e <HAL_NVIC_EnableIRQ>

}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208c:	2004      	movs	r0, #4
 800208e:	f7ff f9f2 	bl	8001476 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2002      	movs	r0, #2
 8002094:	f7ff f9ef 	bl	8001476 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	2001      	movs	r0, #1
 800209a:	f7ff f9ec 	bl	8001476 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO6_Pin|GPIO5_Pin|GPIO1_Pin|LED1_Pin
 800209e:	2200      	movs	r2, #0
 80020a0:	f240 3107 	movw	r1, #775	; 0x307
 80020a4:	4815      	ldr	r0, [pc, #84]	; (80020fc <MX_GPIO_Init+0x84>)
 80020a6:	f002 fba3 	bl	80047f0 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO4_Pin|GPIO3_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 7160 	mov.w	r1, #896	; 0x380
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b4:	f002 fb9c 	bl	80047f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO6_Pin GPIO5_Pin GPIO1_Pin LED1_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin|GPIO1_Pin|LED1_Pin
 80020b8:	f240 3307 	movw	r3, #775	; 0x307
 80020bc:	607b      	str	r3, [r7, #4]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	480b      	ldr	r0, [pc, #44]	; (80020fc <MX_GPIO_Init+0x84>)
 80020d0:	f002 fa26 	bl	8004520 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO4_Pin GPIO3_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = GPIO4_Pin|GPIO3_Pin|GPIO2_Pin;
 80020d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80020d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f002 fa17 	bl	8004520 <HAL_GPIO_Init>

}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	48000400 	.word	0x48000400

08002100 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8002104:	bf00      	nop
}
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002114:	2000      	movs	r0, #0
 8002116:	f007 fae7 	bl	80096e8 <OTP_Read>
 800211a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	799b      	ldrb	r3, [r3, #6]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff f910 	bl	800134c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800212c:	bf00      	nop
 800212e:	bf00      	nop
}  
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <Reset_Device>:


static void Reset_Device( void )
{
 8002136:	b580      	push	{r7, lr}
 8002138:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 800213a:	f000 f827 	bl	800218c <Reset_BackupDomain>

	Reset_IPCC();
 800213e:	f000 f803 	bl	8002148 <Reset_IPCC>
#endif

	return;
 8002142:	bf00      	nop
}
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800214c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002150:	f7ff f9aa 	bl	80014a8 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8002154:	213f      	movs	r1, #63	; 0x3f
 8002156:	480c      	ldr	r0, [pc, #48]	; (8002188 <Reset_IPCC+0x40>)
 8002158:	f7ff fa05 	bl	8001566 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 800215c:	213f      	movs	r1, #63	; 0x3f
 800215e:	480a      	ldr	r0, [pc, #40]	; (8002188 <Reset_IPCC+0x40>)
 8002160:	f7ff fa0f 	bl	8001582 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8002164:	213f      	movs	r1, #63	; 0x3f
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <Reset_IPCC+0x40>)
 8002168:	f7ff f9b7 	bl	80014da <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 800216c:	213f      	movs	r1, #63	; 0x3f
 800216e:	4806      	ldr	r0, [pc, #24]	; (8002188 <Reset_IPCC+0x40>)
 8002170:	f7ff f9d6 	bl	8001520 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8002174:	213f      	movs	r1, #63	; 0x3f
 8002176:	4804      	ldr	r0, [pc, #16]	; (8002188 <Reset_IPCC+0x40>)
 8002178:	f7ff f9c1 	bl	80014fe <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 800217c:	213f      	movs	r1, #63	; 0x3f
 800217e:	4802      	ldr	r0, [pc, #8]	; (8002188 <Reset_IPCC+0x40>)
 8002180:	f7ff f9e0 	bl	8001544 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8002184:	bf00      	nop
}
 8002186:	bd80      	pop	{r7, pc}
 8002188:	58000c00 	.word	0x58000c00

0800218c <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002190:	f7ff f932 	bl	80013f8 <LL_RCC_IsActiveFlag_PINRST>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00d      	beq.n	80021b6 <Reset_BackupDomain+0x2a>
 800219a:	f7ff f940 	bl	800141e <LL_RCC_IsActiveFlag_SFTRST>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d108      	bne.n	80021b6 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80021a4:	f002 fbe6 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 80021a8:	f002 fbe4 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 80021ac:	f7ff f902 	bl	80013b4 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 80021b0:	f7ff f911 	bl	80013d6 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
}
 80021b8:	bd80      	pop	{r7, pc}

080021ba <Init_Exti>:

static void Init_Exti( void )
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80021be:	f04f 30ff 	mov.w	r0, #4294967295
 80021c2:	f7ff f897 	bl	80012f4 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80021c6:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80021ca:	f7ff f8a9 	bl	8001320 <LL_EXTI_DisableIT_32_63>

  return;
 80021ce:	bf00      	nop
}
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);

	if (Custom_Notification == 1) {
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		// UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
		RunningState = 1;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]

		TimeReady = 1;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
		RunningState = 0;
		TimeReady = 0;
	}


}
 80021f0:	e005      	b.n	80021fe <HAL_TIM_PeriodElapsedCallback+0x2a>
		RunningState = 0;
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
		TimeReady = 0;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000218 	.word	0x20000218
 8002210:	20000219 	.word	0x20000219
 8002214:	2000021a 	.word	0x2000021a

08002218 <HAL_ADC_ConvCpltCallback>:

// Interrupt when ADC completed conversion
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	ADC_Read_Complete = 1;
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000228 	.word	0x20000228

08002238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002240:	e7fe      	b.n	8002240 <Error_Handler+0x8>

08002242 <LL_RCC_EnableRTC>:
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_AHB2_GRP1_EnableClock>:
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800226c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002288:	68fb      	ldr	r3, [r7, #12]
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_AHB3_GRP1_EnableClock>:
{
 8002296:	b480      	push	{r7}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4013      	ands	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_APB1_GRP1_EnableClock>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4313      	orrs	r3, r2
 80022de:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80022e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ec:	68fb      	ldr	r3, [r7, #12]
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <LL_APB2_GRP1_EnableClock>:
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4313      	orrs	r3, r2
 8002310:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002316:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4013      	ands	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800231e:	68fb      	ldr	r3, [r7, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002330:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002334:	f7ff ffaf 	bl	8002296 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	202e      	movs	r0, #46	; 0x2e
 800233e:	f001 fd8c 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002342:	202e      	movs	r0, #46	; 0x2e
 8002344:	f001 fda3 	bl	8003e8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 030c 	add.w	r3, r7, #12
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <HAL_ADC_MspInit+0xa8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d13e      	bne.n	80023ec <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800236e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002372:	f7ff ff77 	bl	8002264 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2001      	movs	r0, #1
 8002378:	f7ff ff74 	bl	8002264 <LL_AHB2_GRP1_EnableClock>
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC3_Pin|ADC4_Pin
 800237c:	233f      	movs	r3, #63	; 0x3f
 800237e:	60fb      	str	r3, [r7, #12]
                          |ADC5_Pin|ADC6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002380:	2303      	movs	r3, #3
 8002382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002392:	f002 f8c5 	bl	8004520 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 8002398:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_ADC_MspInit+0xb0>)
 800239a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800239c:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 800239e:	2205      	movs	r2, #5
 80023a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023c6:	2220      	movs	r2, #32
 80023c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023d0:	4809      	ldr	r0, [pc, #36]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023d2:	f001 fda1 	bl	8003f18 <HAL_DMA_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 80023dc:	f7ff ff2c 	bl	8002238 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a05      	ldr	r2, [pc, #20]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80023e6:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_ADC_MspInit+0xac>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023ec:	bf00      	nop
 80023ee:	3720      	adds	r7, #32
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	50040000 	.word	0x50040000
 80023f8:	200004dc 	.word	0x200004dc
 80023fc:	4002001c 	.word	0x4002001c

08002400 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <HAL_IPCC_MspInit+0x44>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d113      	bne.n	800243a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002412:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002416:	f7ff ff3e 	bl	8002296 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	202c      	movs	r0, #44	; 0x2c
 8002420:	f001 fd1b 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002424:	202c      	movs	r0, #44	; 0x2c
 8002426:	f001 fd32 	bl	8003e8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	202d      	movs	r0, #45	; 0x2d
 8002430:	f001 fd13 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002434:	202d      	movs	r0, #45	; 0x2d
 8002436:	f001 fd2a 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	58000c00 	.word	0x58000c00

08002448 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_RTC_MspInit+0x28>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d105      	bne.n	8002466 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800245a:	f7ff fef2 	bl	8002242 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800245e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002462:	f7ff ff31 	bl	80022c8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40002800 	.word	0x40002800

08002474 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002484:	d10a      	bne.n	800249c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002486:	2001      	movs	r0, #1
 8002488:	f7ff ff1e 	bl	80022c8 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	201c      	movs	r0, #28
 8002492:	f001 fce2 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002496:	201c      	movs	r0, #28
 8002498:	f001 fcf9 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a27      	ldr	r2, [pc, #156]	; (8002560 <HAL_UART_MspInit+0xbc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d147      	bne.n	8002556 <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024ca:	f7ff ff16 	bl	80022fa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2002      	movs	r0, #2
 80024d0:	f7ff fec8 	bl	8002264 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024d4:	23c0      	movs	r3, #192	; 0xc0
 80024d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024dc:	2301      	movs	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024e4:	2307      	movs	r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	4619      	mov	r1, r3
 80024ee:	481d      	ldr	r0, [pc, #116]	; (8002564 <HAL_UART_MspInit+0xc0>)
 80024f0:	f002 f816 	bl	8004520 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80024f4:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <HAL_UART_MspInit+0xc4>)
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_UART_MspInit+0xc8>)
 80024f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_UART_MspInit+0xc4>)
 80024fc:	220f      	movs	r2, #15
 80024fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_UART_MspInit+0xc4>)
 8002502:	2210      	movs	r2, #16
 8002504:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_UART_MspInit+0xc4>)
 8002508:	2200      	movs	r2, #0
 800250a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <HAL_UART_MspInit+0xc4>)
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_UART_MspInit+0xc4>)
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002518:	4b13      	ldr	r3, [pc, #76]	; (8002568 <HAL_UART_MspInit+0xc4>)
 800251a:	2200      	movs	r2, #0
 800251c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_UART_MspInit+0xc4>)
 8002520:	2200      	movs	r2, #0
 8002522:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_UART_MspInit+0xc4>)
 8002526:	2200      	movs	r2, #0
 8002528:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800252a:	480f      	ldr	r0, [pc, #60]	; (8002568 <HAL_UART_MspInit+0xc4>)
 800252c:	f001 fcf4 	bl	8003f18 <HAL_DMA_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8002536:	f7ff fe7f 	bl	8002238 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <HAL_UART_MspInit+0xc4>)
 800253e:	679a      	str	r2, [r3, #120]	; 0x78
 8002540:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_UART_MspInit+0xc4>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2024      	movs	r0, #36	; 0x24
 800254c:	f001 fc85 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002550:	2024      	movs	r0, #36	; 0x24
 8002552:	f001 fc9c 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002556:	bf00      	nop
 8002558:	3720      	adds	r7, #32
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40013800 	.word	0x40013800
 8002564:	48000400 	.word	0x48000400
 8002568:	20000388 	.word	0x20000388
 800256c:	40020008 	.word	0x40020008

08002570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
//  while (1)
//  {
//  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002582:	e7fe      	b.n	8002582 <HardFault_Handler+0x4>

08002584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002588:	e7fe      	b.n	8002588 <MemManage_Handler+0x4>

0800258a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800258a:	b480      	push	{r7}
 800258c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800258e:	e7fe      	b.n	800258e <BusFault_Handler+0x4>

08002590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <UsageFault_Handler+0x4>

08002596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025c4:	f000 f942 	bl	800284c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}

080025cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025d0:	4802      	ldr	r0, [pc, #8]	; (80025dc <DMA1_Channel1_IRQHandler+0x10>)
 80025d2:	f001 fe66 	bl	80042a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000388 	.word	0x20000388

080025e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <DMA1_Channel2_IRQHandler+0x10>)
 80025e6:	f001 fe5c 	bl	80042a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200004dc 	.word	0x200004dc

080025f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <TIM2_IRQHandler+0x10>)
 80025fa:	f003 fe95 	bl	8006328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000560 	.word	0x20000560

08002608 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <USART1_IRQHandler+0x10>)
 800260e:	f004 fb0d 	bl	8006c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2000044c 	.word	0x2000044c

0800261c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002620:	f007 fe7e 	bl	800a320 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}

08002628 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800262c:	f007 feb0 	bl	800a390 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}

08002634 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002638:	f002 f8f2 	bl	8004820 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}

08002640 <RTC_WKUP_IRQHandler>:
{
//  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
}

void RTC_WKUP_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002644:	f7fe fb00 	bl	8000c48 <HW_TS_RTC_Wakeup_Handler>
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <SystemInit+0x90>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	4a21      	ldr	r2, [pc, #132]	; (80026dc <SystemInit+0x90>)
 8002658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800265c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002674:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002678:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <SystemInit+0x94>)
 8002686:	4013      	ands	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002696:	f023 0305 	bic.w	r3, r3, #5
 800269a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <SystemInit+0x98>)
 80026b8:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00
 80026e0:	faf6fefb 	.word	0xfaf6fefb
 80026e4:	22041000 	.word	0x22041000

080026e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80026e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ec:	3304      	adds	r3, #4

080026ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80026f2:	d3f9      	bcc.n	80026e8 <CopyDataInit>
  bx lr
 80026f4:	4770      	bx	lr

080026f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80026f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80026f8:	3004      	adds	r0, #4

080026fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80026fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>
  bx lr
 80026fe:	4770      	bx	lr

08002700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002702:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002704:	f7ff ffa2 	bl	800264c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002708:	480b      	ldr	r0, [pc, #44]	; (8002738 <LoopForever+0x8>)
 800270a:	490c      	ldr	r1, [pc, #48]	; (800273c <LoopForever+0xc>)
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <LoopForever+0x10>)
 800270e:	2300      	movs	r3, #0
 8002710:	f7ff ffed 	bl	80026ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002714:	480b      	ldr	r0, [pc, #44]	; (8002744 <LoopForever+0x14>)
 8002716:	490c      	ldr	r1, [pc, #48]	; (8002748 <LoopForever+0x18>)
 8002718:	2300      	movs	r3, #0
 800271a:	f7ff ffee 	bl	80026fa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800271e:	480b      	ldr	r0, [pc, #44]	; (800274c <LoopForever+0x1c>)
 8002720:	490b      	ldr	r1, [pc, #44]	; (8002750 <LoopForever+0x20>)
 8002722:	2300      	movs	r3, #0
 8002724:	f7ff ffe9 	bl	80026fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002728:	f008 f9ac 	bl	800aa84 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800272c:	f7fe ff38 	bl	80015a0 <main>

08002730 <LoopForever>:

LoopForever:
  b LoopForever
 8002730:	e7fe      	b.n	8002730 <LoopForever>
 8002732:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002734:	20008000 	.word	0x20008000
  INIT_DATA _sdata, _edata, _sidata
 8002738:	20000004 	.word	0x20000004
 800273c:	20000028 	.word	0x20000028
 8002740:	0800ae84 	.word	0x0800ae84
  INIT_BSS _sbss, _ebss
 8002744:	200001a8 	.word	0x200001a8
 8002748:	200005b4 	.word	0x200005b4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800274c:	200301e0 	.word	0x200301e0
 8002750:	20030a57 	.word	0x20030a57

08002754 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <ADC1_IRQHandler>
	...

08002758 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6053      	str	r3, [r2, #4]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e0042000 	.word	0xe0042000

08002778 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002782:	f043 0302 	orr.w	r3, r3, #2
 8002786:	6053      	str	r3, [r2, #4]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e0042000 	.word	0xe0042000

08002798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_Init+0x3c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <HAL_Init+0x3c>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ae:	2003      	movs	r0, #3
 80027b0:	f001 fb48 	bl	8003e44 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027b4:	2000      	movs	r0, #0
 80027b6:	f000 f80f 	bl	80027d8 <HAL_InitTick>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	71fb      	strb	r3, [r7, #7]
 80027c4:	e001      	b.n	80027ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027c6:	f7ff fdb1 	bl	800232c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027ca:	79fb      	ldrb	r3, [r7, #7]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	58004000 	.word	0x58004000

080027d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80027e4:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_InitTick+0x6c>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d024      	beq.n	8002836 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027ec:	f003 f96a 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <HAL_InitTick+0x6c>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	4618      	mov	r0, r3
 8002806:	f001 fb5e 	bl	8003ec6 <HAL_SYSTICK_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b0f      	cmp	r3, #15
 8002814:	d809      	bhi.n	800282a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002816:	2200      	movs	r2, #0
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	f04f 30ff 	mov.w	r0, #4294967295
 800281e:	f001 fb1c 	bl	8003e5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002822:	4a09      	ldr	r2, [pc, #36]	; (8002848 <HAL_InitTick+0x70>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	e007      	b.n	800283a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	e004      	b.n	800283a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	e001      	b.n	800283a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	2000000c 	.word	0x2000000c
 8002848:	20000008 	.word	0x20000008

0800284c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_IncTick+0x20>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x24>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <HAL_IncTick+0x24>)
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000000c 	.word	0x2000000c
 8002870:	200005ac 	.word	0x200005ac

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_GetTick+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	200005ac 	.word	0x200005ac

0800288c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_GetTickPrio+0x14>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000008 	.word	0x20000008

080028a4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80028a8:	f7ff ff56 	bl	8002758 <LL_DBGMCU_EnableDBGSleepMode>
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80028b4:	f7ff ff60 	bl	8002778 <LL_DBGMCU_EnableDBGStopMode>
}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}

080028bc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	609a      	str	r2, [r3, #8]
#endif
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3360      	adds	r3, #96	; 0x60
 8002936:	461a      	mov	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b08      	ldr	r3, [pc, #32]	; (8002968 <LL_ADC_SetOffset+0x44>)
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	4313      	orrs	r3, r2
 8002954:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	03fff000 	.word	0x03fff000

0800296c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3360      	adds	r3, #96	; 0x60
 800297a:	461a      	mov	r2, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3360      	adds	r3, #96	; 0x60
 80029a8:	461a      	mov	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	431a      	orrs	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029c2:	bf00      	nop
 80029c4:	371c      	adds	r7, #28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
#if defined (ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029e6:	2300      	movs	r3, #0
#endif
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3330      	adds	r3, #48	; 0x30
 8002a04:	461a      	mov	r2, r3
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	0a1b      	lsrs	r3, r3, #8
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	4413      	add	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	211f      	movs	r1, #31
 8002a20:	fa01 f303 	lsl.w	r3, r1, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	401a      	ands	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	f003 011f 	and.w	r1, r3, #31
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif
}
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	0e5b      	lsrs	r3, r3, #25
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	4413      	add	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0d1b      	lsrs	r3, r3, #20
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2107      	movs	r1, #7
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	401a      	ands	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	0d1b      	lsrs	r3, r3, #20
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a90:	431a      	orrs	r2, r3
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abc:	43db      	mvns	r3, r3
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0318 	and.w	r3, r3, #24
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ac8:	40d9      	lsrs	r1, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	400b      	ands	r3, r1
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	0007ffff 	.word	0x0007ffff

08002aec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002afc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6093      	str	r3, [r2, #8]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b24:	d101      	bne.n	8002b2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b74:	d101      	bne.n	8002b7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc4:	f043 0202 	orr.w	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <LL_ADC_IsEnabled+0x18>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <LL_ADC_IsEnabled+0x1a>
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d101      	bne.n	8002c16 <LL_ADC_IsDisableOngoing+0x18>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <LL_ADC_IsDisableOngoing+0x1a>
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c38:	f043 0204 	orr.w	r2, r3, #4
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d101      	bne.n	8002c64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d101      	bne.n	8002c8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif

  /* Check ADC handle */
  if (hadc == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e12e      	b.n	8002f14 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff fb41 	bl	800234c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff17 	bl	8002b10 <LL_ADC_IsDeepPowerDownEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fefd 	bl	8002aec <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff32 	bl	8002b60 <LL_ADC_IsInternalRegulatorEnabled>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d115      	bne.n	8002d2e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff16 	bl	8002b38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d0c:	4b83      	ldr	r3, [pc, #524]	; (8002f1c <HAL_ADC_Init+0x284>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	4a83      	ldr	r2, [pc, #524]	; (8002f20 <HAL_ADC_Init+0x288>)
 8002d14:	fba2 2303 	umull	r2, r3, r2, r3
 8002d18:	099b      	lsrs	r3, r3, #6
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d20:	e002      	b.n	8002d28 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f9      	bne.n	8002d22 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff14 	bl	8002b60 <LL_ADC_IsInternalRegulatorEnabled>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f043 0210 	orr.w	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff74 	bl	8002c4c <LL_ADC_REG_IsConversionOngoing>
 8002d64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 80c7 	bne.w	8002f02 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f040 80c3 	bne.w	8002f02 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d84:	f043 0202 	orr.w	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff21 	bl	8002bd8 <LL_ADC_IsEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10b      	bne.n	8002db4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d9c:	4861      	ldr	r0, [pc, #388]	; (8002f24 <HAL_ADC_Init+0x28c>)
 8002d9e:	f7ff ff1b 	bl	8002bd8 <LL_ADC_IsEnabled>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	4619      	mov	r1, r3
 8002dae:	485e      	ldr	r0, [pc, #376]	; (8002f28 <HAL_ADC_Init+0x290>)
 8002db0:	f7ff fd84 	bl	80028bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7e5b      	ldrb	r3, [r3, #25]
 8002db8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dbe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002dc4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002dca:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8002dd4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d106      	bne.n	8002df4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	3b01      	subs	r3, #1
 8002dec:	045b      	lsls	r3, r3, #17
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d009      	beq.n	8002e10 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	4b45      	ldr	r3, [pc, #276]	; (8002f2c <HAL_ADC_Init+0x294>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff0f 	bl	8002c4c <LL_ADC_REG_IsConversionOngoing>
 8002e2e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff1c 	bl	8002c72 <LL_ADC_INJ_IsConversionOngoing>
 8002e3a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d13d      	bne.n	8002ebe <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d13a      	bne.n	8002ebe <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e4c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e54:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e64:	f023 0302 	bic.w	r3, r3, #2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	69b9      	ldr	r1, [r7, #24]
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d118      	bne.n	8002eae <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e86:	f023 0304 	bic.w	r3, r3, #4
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e92:	4311      	orrs	r1, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e98:	4311      	orrs	r1, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	611a      	str	r2, [r3, #16]
 8002eac:	e007      	b.n	8002ebe <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0201 	bic.w	r2, r2, #1
 8002ebc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f023 010f 	bic.w	r1, r3, #15
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	1e5a      	subs	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
 8002ede:	e007      	b.n	8002ef0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 020f 	bic.w	r2, r2, #15
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f023 0303 	bic.w	r3, r3, #3
 8002ef8:	f043 0201 	orr.w	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54
 8002f00:	e007      	b.n	8002f12 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	f043 0210 	orr.w	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000004 	.word	0x20000004
 8002f20:	053e2d63 	.word	0x053e2d63
 8002f24:	50040000 	.word	0x50040000
 8002f28:	50040300 	.word	0x50040300
 8002f2c:	fff0c007 	.word	0xfff0c007

08002f30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fe83 	bl	8002c4c <LL_ADC_REG_IsConversionOngoing>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d167      	bne.n	800301c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_Start_DMA+0x2a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e063      	b.n	8003022 <HAL_ADC_Start_DMA+0xf2>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fc42 	bl	80037ec <ADC_Enable>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d14f      	bne.n	8003012 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
#if defined (ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	f023 0206 	bic.w	r2, r3, #6
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58
 8002f9e:	e002      	b.n	8002fa6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	4a20      	ldr	r2, [pc, #128]	; (800302c <HAL_ADC_Start_DMA+0xfc>)
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	4a1f      	ldr	r2, [pc, #124]	; (8003030 <HAL_ADC_Start_DMA+0x100>)
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <HAL_ADC_Start_DMA+0x104>)
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	221c      	movs	r2, #28
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0210 	orr.w	r2, r2, #16
 8002fdc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if defined (ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	60da      	str	r2, [r3, #12]
#endif

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3340      	adds	r3, #64	; 0x40
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f001 f817 	bl	8004030 <HAL_DMA_Start_IT>
 8003002:	4603      	mov	r3, r0
 8003004:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fe0a 	bl	8002c24 <LL_ADC_REG_StartConversion>
 8003010:	e006      	b.n	8003020 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800301a:	e001      	b.n	8003020 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800301c:	2302      	movs	r3, #2
 800301e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003020:	7dfb      	ldrb	r3, [r7, #23]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	0800399f 	.word	0x0800399f
 8003030:	08003a77 	.word	0x08003a77
 8003034:	08003a93 	.word	0x08003a93

08003038 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b0b6      	sub	sp, #216	; 0xd8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x22>
 800307e:	2302      	movs	r3, #2
 8003080:	e39f      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x762>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fddc 	bl	8002c4c <LL_ADC_REG_IsConversionOngoing>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 8384 	bne.w	80037a4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f7ff fca3 	bl	80029f4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined (ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fdca 	bl	8002c4c <LL_ADC_REG_IsConversionOngoing>
 80030b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fdd6 	bl	8002c72 <LL_ADC_INJ_IsConversionOngoing>
 80030c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 81a6 	bne.w	8003420 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f040 81a1 	bne.w	8003420 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f7ff fcae 	bl	8002a4c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	08db      	lsrs	r3, r3, #3
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	2b04      	cmp	r3, #4
 8003110:	d00a      	beq.n	8003128 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6919      	ldr	r1, [r3, #16]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003122:	f7ff fbff 	bl	8002924 <LL_ADC_SetOffset>
 8003126:	e17b      	b.n	8003420 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff fc1c 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003134:	4603      	mov	r3, r0
 8003136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_ADC_ConfigChannel+0xf4>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2100      	movs	r1, #0
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fc11 	bl	800296c <LL_ADC_GetOffsetChannel>
 800314a:	4603      	mov	r3, r0
 800314c:	0e9b      	lsrs	r3, r3, #26
 800314e:	f003 021f 	and.w	r2, r3, #31
 8003152:	e01e      	b.n	8003192 <HAL_ADC_ConfigChannel+0x132>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fc06 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003160:	4603      	mov	r3, r0
 8003162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003176:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800317a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e004      	b.n	8003190 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	2b00      	cmp	r3, #0
 800319c:	d105      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x14a>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	0e9b      	lsrs	r3, r3, #26
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	e018      	b.n	80031dc <HAL_ADC_ConfigChannel+0x17c>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80031be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80031c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80031ce:	2320      	movs	r3, #32
 80031d0:	e004      	b.n	80031dc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80031d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	429a      	cmp	r2, r3
 80031de:	d106      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fbd5 	bl	8002998 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fbb9 	bl	800296c <LL_ADC_GetOffsetChannel>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <HAL_ADC_ConfigChannel+0x1ba>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2101      	movs	r1, #1
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fbae 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003210:	4603      	mov	r3, r0
 8003212:	0e9b      	lsrs	r3, r3, #26
 8003214:	f003 021f 	and.w	r2, r3, #31
 8003218:	e01e      	b.n	8003258 <HAL_ADC_ConfigChannel+0x1f8>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fba3 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003226:	4603      	mov	r3, r0
 8003228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003238:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800323c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003248:	2320      	movs	r3, #32
 800324a:	e004      	b.n	8003256 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800324c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x210>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0e9b      	lsrs	r3, r3, #26
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	e018      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x242>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003284:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800328c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e004      	b.n	80032a2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8003298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800329c:	fab3 f383 	clz	r3, r3
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d106      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2200      	movs	r2, #0
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fb72 	bl	8002998 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fb56 	bl	800296c <LL_ADC_GetOffsetChannel>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10a      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x280>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2102      	movs	r1, #2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fb4b 	bl	800296c <LL_ADC_GetOffsetChannel>
 80032d6:	4603      	mov	r3, r0
 80032d8:	0e9b      	lsrs	r3, r3, #26
 80032da:	f003 021f 	and.w	r2, r3, #31
 80032de:	e01e      	b.n	800331e <HAL_ADC_ConfigChannel+0x2be>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2102      	movs	r1, #2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fb40 	bl	800296c <LL_ADC_GetOffsetChannel>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f6:	fa93 f3a3 	rbit	r3, r3
 80032fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800330e:	2320      	movs	r3, #32
 8003310:	e004      	b.n	800331c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003312:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003326:	2b00      	cmp	r3, #0
 8003328:	d105      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x2d6>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0e9b      	lsrs	r3, r3, #26
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	e016      	b.n	8003364 <HAL_ADC_ConfigChannel+0x304>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800334a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800334e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8003356:	2320      	movs	r3, #32
 8003358:	e004      	b.n	8003364 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800335a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	429a      	cmp	r2, r3
 8003366:	d106      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2200      	movs	r2, #0
 800336e:	2102      	movs	r1, #2
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fb11 	bl	8002998 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2103      	movs	r1, #3
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff faf5 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x342>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2103      	movs	r1, #3
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff faea 	bl	800296c <LL_ADC_GetOffsetChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	f003 021f 	and.w	r2, r3, #31
 80033a0:	e017      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x372>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2103      	movs	r1, #3
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fadf 	bl	800296c <LL_ADC_GetOffsetChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80033ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80033be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e003      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80033c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	461a      	mov	r2, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d105      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x38a>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	0e9b      	lsrs	r3, r3, #26
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	e011      	b.n	800340e <HAL_ADC_ConfigChannel+0x3ae>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e003      	b.n	800340e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	429a      	cmp	r2, r3
 8003410:	d106      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2200      	movs	r2, #0
 8003418:	2103      	movs	r1, #3
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fabc 	bl	8002998 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fbd7 	bl	8002bd8 <LL_ADC_IsEnabled>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	f040 81c2 	bne.w	80037b6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	461a      	mov	r2, r3
 8003440:	f7ff fb30 	bl	8002aa4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4a8e      	ldr	r2, [pc, #568]	; (8003684 <HAL_ADC_ConfigChannel+0x624>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f040 8130 	bne.w	80036b0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x418>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	0e9b      	lsrs	r3, r3, #26
 8003466:	3301      	adds	r3, #1
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2b09      	cmp	r3, #9
 800346e:	bf94      	ite	ls
 8003470:	2301      	movls	r3, #1
 8003472:	2300      	movhi	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e019      	b.n	80034ac <HAL_ADC_ConfigChannel+0x44c>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003488:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800348a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8003494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2b09      	cmp	r3, #9
 80034a4:	bf94      	ite	ls
 80034a6:	2301      	movls	r3, #1
 80034a8:	2300      	movhi	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d079      	beq.n	80035a4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x46c>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	3301      	adds	r3, #1
 80034c4:	069b      	lsls	r3, r3, #26
 80034c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ca:	e015      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x498>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80034e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	069b      	lsls	r3, r3, #26
 80034f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x4b8>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0e9b      	lsrs	r3, r3, #26
 800350a:	3301      	adds	r3, #1
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	e017      	b.n	8003548 <HAL_ADC_ConfigChannel+0x4e8>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003520:	fa93 f3a3 	rbit	r3, r3
 8003524:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003528:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800352a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8003530:	2320      	movs	r3, #32
 8003532:	e003      	b.n	800353c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8003534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003536:	fab3 f383 	clz	r3, r3
 800353a:	b2db      	uxtb	r3, r3
 800353c:	3301      	adds	r3, #1
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2101      	movs	r1, #1
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	ea42 0103 	orr.w	r1, r2, r3
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <HAL_ADC_ConfigChannel+0x50e>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	051b      	lsls	r3, r3, #20
 800356c:	e018      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x540>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003586:	2320      	movs	r3, #32
 8003588:	e003      	b.n	8003592 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800358a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f003 021f 	and.w	r2, r3, #31
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a0:	430b      	orrs	r3, r1
 80035a2:	e080      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x560>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	3301      	adds	r3, #1
 80035b8:	069b      	lsls	r3, r3, #26
 80035ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035be:	e015      	b.n	80035ec <HAL_ADC_ConfigChannel+0x58c>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80035d8:	2320      	movs	r3, #32
 80035da:	e003      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80035dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	069b      	lsls	r3, r3, #26
 80035e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_ADC_ConfigChannel+0x5ac>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0e9b      	lsrs	r3, r3, #26
 80035fe:	3301      	adds	r3, #1
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	e017      	b.n	800363c <HAL_ADC_ConfigChannel+0x5dc>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	fa93 f3a3 	rbit	r3, r3
 8003618:	61fb      	str	r3, [r7, #28]
  return result;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8003624:	2320      	movs	r3, #32
 8003626:	e003      	b.n	8003630 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	3301      	adds	r3, #1
 8003632:	f003 031f 	and.w	r3, r3, #31
 8003636:	2101      	movs	r1, #1
 8003638:	fa01 f303 	lsl.w	r3, r1, r3
 800363c:	ea42 0103 	orr.w	r1, r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x608>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0e9b      	lsrs	r3, r3, #26
 8003652:	3301      	adds	r3, #1
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	3b1e      	subs	r3, #30
 8003660:	051b      	lsls	r3, r3, #20
 8003662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003666:	e01d      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x644>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	613b      	str	r3, [r7, #16]
  return result;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d103      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003680:	2320      	movs	r3, #32
 8003682:	e005      	b.n	8003690 <HAL_ADC_ConfigChannel+0x630>
 8003684:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f003 021f 	and.w	r2, r3, #31
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	3b1e      	subs	r3, #30
 800369e:	051b      	lsls	r3, r3, #20
 80036a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a4:	430b      	orrs	r3, r1
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	6892      	ldr	r2, [r2, #8]
 80036aa:	4619      	mov	r1, r3
 80036ac:	f7ff f9ce 	bl	8002a4c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b45      	ldr	r3, [pc, #276]	; (80037cc <HAL_ADC_ConfigChannel+0x76c>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d07c      	beq.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036bc:	4844      	ldr	r0, [pc, #272]	; (80037d0 <HAL_ADC_ConfigChannel+0x770>)
 80036be:	f7ff f923 	bl	8002908 <LL_ADC_GetCommonPathInternalCh>
 80036c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c6:	4843      	ldr	r0, [pc, #268]	; (80037d4 <HAL_ADC_ConfigChannel+0x774>)
 80036c8:	f7ff fa86 	bl	8002bd8 <LL_ADC_IsEnabled>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d15e      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a40      	ldr	r2, [pc, #256]	; (80037d8 <HAL_ADC_ConfigChannel+0x778>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d127      	bne.n	800372c <HAL_ADC_ConfigChannel+0x6cc>
 80036dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d121      	bne.n	800372c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a39      	ldr	r2, [pc, #228]	; (80037d4 <HAL_ADC_ConfigChannel+0x774>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d161      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80036f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036fa:	4619      	mov	r1, r3
 80036fc:	4834      	ldr	r0, [pc, #208]	; (80037d0 <HAL_ADC_ConfigChannel+0x770>)
 80036fe:	f7ff f8f0 	bl	80028e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <HAL_ADC_ConfigChannel+0x77c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	4a35      	ldr	r2, [pc, #212]	; (80037e0 <HAL_ADC_ConfigChannel+0x780>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800371c:	e002      	b.n	8003724 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b01      	subs	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f9      	bne.n	800371e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800372a:	e044      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_ADC_ConfigChannel+0x784>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d113      	bne.n	800375e <HAL_ADC_ConfigChannel+0x6fe>
 8003736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800373a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10d      	bne.n	800375e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <HAL_ADC_ConfigChannel+0x774>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d134      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800374c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003754:	4619      	mov	r1, r3
 8003756:	481e      	ldr	r0, [pc, #120]	; (80037d0 <HAL_ADC_ConfigChannel+0x770>)
 8003758:	f7ff f8c3 	bl	80028e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800375c:	e02b      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a21      	ldr	r2, [pc, #132]	; (80037e8 <HAL_ADC_ConfigChannel+0x788>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d126      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
 8003768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800376c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d120      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <HAL_ADC_ConfigChannel+0x774>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d11b      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800377e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003782:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003786:	4619      	mov	r1, r3
 8003788:	4811      	ldr	r0, [pc, #68]	; (80037d0 <HAL_ADC_ConfigChannel+0x770>)
 800378a:	f7ff f8aa 	bl	80028e2 <LL_ADC_SetCommonPathInternalCh>
 800378e:	e012      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037a2:	e008      	b.n	80037b6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	f043 0220 	orr.w	r2, r3, #32
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80037be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	37d8      	adds	r7, #216	; 0xd8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	80080000 	.word	0x80080000
 80037d0:	50040300 	.word	0x50040300
 80037d4:	50040000 	.word	0x50040000
 80037d8:	c7520000 	.word	0xc7520000
 80037dc:	20000004 	.word	0x20000004
 80037e0:	053e2d63 	.word	0x053e2d63
 80037e4:	cb840000 	.word	0xcb840000
 80037e8:	80000001 	.word	0x80000001

080037ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff f9eb 	bl	8002bd8 <LL_ADC_IsEnabled>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d15e      	bne.n	80038c6 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <ADC_Enable+0xe4>)
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <ADC_Enable+0x46>
#endif
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	f043 0210 	orr.w	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e04a      	b.n	80038c8 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff f9a6 	bl	8002b88 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800383c:	4825      	ldr	r0, [pc, #148]	; (80038d4 <ADC_Enable+0xe8>)
 800383e:	f7ff f863 	bl	8002908 <LL_ADC_GetCommonPathInternalCh>
 8003842:	4603      	mov	r3, r0
 8003844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00f      	beq.n	800386c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <ADC_Enable+0xec>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	4a22      	ldr	r2, [pc, #136]	; (80038dc <ADC_Enable+0xf0>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	3301      	adds	r3, #1
 800385c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800385e:	e002      	b.n	8003866 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	3b01      	subs	r3, #1
 8003864:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f9      	bne.n	8003860 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800386c:	f7ff f802 	bl	8002874 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003872:	e021      	b.n	80038b8 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff f9ad 	bl	8002bd8 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff f97d 	bl	8002b88 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800388e:	f7fe fff1 	bl	8002874 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d90d      	bls.n	80038b8 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a0:	f043 0210 	orr.w	r2, r3, #16
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e007      	b.n	80038c8 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d1d6      	bne.n	8003874 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	8000003f 	.word	0x8000003f
 80038d4:	50040300 	.word	0x50040300
 80038d8:	20000004 	.word	0x20000004
 80038dc:	053e2d63 	.word	0x053e2d63

080038e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff f986 	bl	8002bfe <LL_ADC_IsDisableOngoing>
 80038f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff f96d 	bl	8002bd8 <LL_ADC_IsEnabled>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d047      	beq.n	8003994 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d144      	bne.n	8003994 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if defined (ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 030d 	and.w	r3, r3, #13
 8003914:	2b01      	cmp	r3, #1
 8003916:	d10c      	bne.n	8003932 <ADC_Disable+0x52>
#endif
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f947 	bl	8002bb0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2203      	movs	r2, #3
 8003928:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800392a:	f7fe ffa3 	bl	8002874 <HAL_GetTick>
 800392e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003930:	e029      	b.n	8003986 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	f043 0210 	orr.w	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e023      	b.n	8003996 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800394e:	f7fe ff91 	bl	8002874 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d914      	bls.n	8003986 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e007      	b.n	8003996 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1dc      	bne.n	800394e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d14b      	bne.n	8003a50 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d021      	beq.n	8003a16 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fff9 	bl	80029ce <LL_ADC_REG_IsTriggerSourceSWStart>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d032      	beq.n	8003a48 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d12b      	bne.n	8003a48 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11f      	bne.n	8003a48 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
 8003a14:	e018      	b.n	8003a48 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d111      	bne.n	8003a48 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d105      	bne.n	8003a48 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a40:	f043 0201 	orr.w	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f7fe fbe5 	bl	8002218 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a4e:	e00e      	b.n	8003a6e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff faf5 	bl	800304c <HAL_ADC_ErrorCallback>
}
 8003a62:	e004      	b.n	8003a6e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	4798      	blx	r3
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff fad7 	bl	8003038 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f043 0204 	orr.w	r2, r3, #4
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7ff fac7 	bl	800304c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <LL_ADC_StartCalibration>:
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003ad8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_IsCalibrationOnGoing>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b0c:	d101      	bne.n	8003b12 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB serie, parameter not available on devices: STM32WB10xx, STM32WB15xx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
#if defined (ADC_SUPPORT_2_5_MSPS)
  UNUSED(SingleDiff);
#endif
  
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_ADCEx_Calibration_Start+0x1c>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e04d      	b.n	8003bd8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fecb 	bl	80038e0 <ADC_Disable>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d136      	bne.n	8003bc2 <HAL_ADCEx_Calibration_Start+0xa2>
#if defined (ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
#else
    ADC_STATE_CLR_SET(hadc->State,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b5c:	f023 0302 	bic.w	r3, r3, #2
 8003b60:	f043 0202 	orr.w	r2, r3, #2
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Start ADC calibration in mode single-ended or differential */
#if defined (ADC_SUPPORT_2_5_MSPS)
    LL_ADC_StartCalibration(hadc->Instance);
#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6839      	ldr	r1, [r7, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff ffa9 	bl	8003ac6 <LL_ADC_StartCalibration>
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b74:	e014      	b.n	8003ba0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d90d      	bls.n	8003ba0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	f023 0312 	bic.w	r3, r3, #18
 8003b8c:	f043 0210 	orr.w	r2, r3, #16
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e01b      	b.n	8003bd8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ffa7 	bl	8003af8 <LL_ADC_IsCalibrationOnGoing>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e2      	bne.n	8003b76 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	f023 0303 	bic.w	r3, r3, #3
 8003bb8:	f043 0201 	orr.w	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
 8003bc0:	e005      	b.n	8003bce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	f043 0210 	orr.w	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	00026aaa 	.word	0x00026aaa

08003be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c00:	4013      	ands	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c16:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <__NVIC_SetPriorityGrouping+0x44>)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	60d3      	str	r3, [r2, #12]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <__NVIC_GetPriorityGrouping+0x18>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	f003 0307 	and.w	r3, r3, #7
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	db0b      	blt.n	8003c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	f003 021f 	and.w	r2, r3, #31
 8003c60:	4907      	ldr	r1, [pc, #28]	; (8003c80 <__NVIC_EnableIRQ+0x38>)
 8003c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2001      	movs	r0, #1
 8003c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000e100 	.word	0xe000e100

08003c84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db12      	blt.n	8003cbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	490a      	ldr	r1, [pc, #40]	; (8003cc8 <__NVIC_DisableIRQ+0x44>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8003caa:	3320      	adds	r3, #32
 8003cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cb0:	f3bf 8f4f 	dsb	sy
}
 8003cb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cb6:	f3bf 8f6f 	isb	sy
}
 8003cba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e100 	.word	0xe000e100

08003ccc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db0c      	blt.n	8003cf8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	f003 021f 	and.w	r2, r3, #31
 8003ce4:	4907      	ldr	r1, [pc, #28]	; (8003d04 <__NVIC_SetPendingIRQ+0x38>)
 8003ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2001      	movs	r0, #1
 8003cee:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf2:	3340      	adds	r3, #64	; 0x40
 8003cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000e100 	.word	0xe000e100

08003d08 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db0c      	blt.n	8003d34 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4907      	ldr	r1, [pc, #28]	; (8003d40 <__NVIC_ClearPendingIRQ+0x38>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2001      	movs	r0, #1
 8003d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2e:	3360      	adds	r3, #96	; 0x60
 8003d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000e100 	.word	0xe000e100

08003d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	db0a      	blt.n	8003d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	490c      	ldr	r1, [pc, #48]	; (8003d90 <__NVIC_SetPriority+0x4c>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	440b      	add	r3, r1
 8003d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d6c:	e00a      	b.n	8003d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4908      	ldr	r1, [pc, #32]	; (8003d94 <__NVIC_SetPriority+0x50>)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	440b      	add	r3, r1
 8003d82:	761a      	strb	r2, [r3, #24]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000e100 	.word	0xe000e100
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f1c3 0307 	rsb	r3, r3, #7
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	bf28      	it	cs
 8003db6:	2304      	movcs	r3, #4
 8003db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d902      	bls.n	8003dc8 <NVIC_EncodePriority+0x30>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3b03      	subs	r3, #3
 8003dc6:	e000      	b.n	8003dca <NVIC_EncodePriority+0x32>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	401a      	ands	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	43d9      	mvns	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	4313      	orrs	r3, r2
         );
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e10:	d301      	bcc.n	8003e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00f      	b.n	8003e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e16:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <SysTick_Config+0x40>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1e:	210f      	movs	r1, #15
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	f7ff ff8e 	bl	8003d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <SysTick_Config+0x40>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2e:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <SysTick_Config+0x40>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	e000e010 	.word	0xe000e010

08003e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fec9 	bl	8003be4 <__NVIC_SetPriorityGrouping>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	4603      	mov	r3, r0
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e68:	f7ff fee0 	bl	8003c2c <__NVIC_GetPriorityGrouping>
 8003e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	6978      	ldr	r0, [r7, #20]
 8003e74:	f7ff ff90 	bl	8003d98 <NVIC_EncodePriority>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff5f 	bl	8003d44 <__NVIC_SetPriority>
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fed3 	bl	8003c48 <__NVIC_EnableIRQ>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fee3 	bl	8003c84 <__NVIC_DisableIRQ>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ff96 	bl	8003e00 <SysTick_Config>
 8003ed4:	4603      	mov	r3, r0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff feed 	bl	8003ccc <__NVIC_SetPendingIRQ>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fefd 	bl	8003d08 <__NVIC_ClearPendingIRQ>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e078      	b.n	800401c <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b3c      	ldr	r3, [pc, #240]	; (8004024 <HAL_DMA_Init+0x10c>)
 8003f32:	4413      	add	r3, r2
 8003f34:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <HAL_DMA_Init+0x110>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	009a      	lsls	r2, r3, #2
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a39      	ldr	r2, [pc, #228]	; (800402c <HAL_DMA_Init+0x114>)
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa6e 	bl	800447c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa8:	d102      	bne.n	8003fb0 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fc6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d010      	beq.n	8003ff2 <HAL_DMA_Init+0xda>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d80c      	bhi.n	8003ff2 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fa7b 	bl	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	e008      	b.n	8004004 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	bffdfff8 	.word	0xbffdfff8
 8004028:	cccccccd 	.word	0xcccccccd
 800402c:	40020000 	.word	0x40020000

08004030 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_DMA_Start_IT+0x20>
 800404c:	2302      	movs	r3, #2
 800404e:	e066      	b.n	800411e <HAL_DMA_Start_IT+0xee>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d155      	bne.n	8004110 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0201 	bic.w	r2, r2, #1
 8004080:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f9b9 	bl	8004400 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 020e 	orr.w	r2, r2, #14
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e00f      	b.n	80040c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0204 	bic.w	r2, r2, #4
 80040b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 020a 	orr.w	r2, r2, #10
 80040c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0201 	orr.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e005      	b.n	800411c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004118:	2302      	movs	r3, #2
 800411a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800411c:	7dfb      	ldrb	r3, [r7, #23]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e04f      	b.n	80041d8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d008      	beq.n	8004156 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2204      	movs	r2, #4
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e040      	b.n	80041d8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 020e 	bic.w	r2, r2, #14
 8004164:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004174:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f003 021c 	and.w	r2, r3, #28
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f202 	lsl.w	r2, r1, r2
 8004198:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00c      	beq.n	80041c6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d005      	beq.n	8004208 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2204      	movs	r2, #4
 8004200:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	e047      	b.n	8004298 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020e 	bic.w	r2, r2, #14
 8004216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	f003 021c 	and.w	r2, r3, #28
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f202 	lsl.w	r2, r1, r2
 800424a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004254:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004276:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
    }
  }
  return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	f003 031c 	and.w	r3, r3, #28
 80042c2:	2204      	movs	r2, #4
 80042c4:	409a      	lsls	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d026      	beq.n	800431c <HAL_DMA_IRQHandler+0x7a>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d021      	beq.n	800431c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0204 	bic.w	r2, r2, #4
 80042f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f003 021c 	and.w	r2, r3, #28
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2104      	movs	r1, #4
 8004304:	fa01 f202 	lsl.w	r2, r1, r2
 8004308:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	2b00      	cmp	r3, #0
 8004310:	d071      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800431a:	e06c      	b.n	80043f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	f003 031c 	and.w	r3, r3, #28
 8004324:	2202      	movs	r2, #2
 8004326:	409a      	lsls	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02e      	beq.n	800438e <HAL_DMA_IRQHandler+0xec>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d029      	beq.n	800438e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 020a 	bic.w	r2, r2, #10
 8004356:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f003 021c 	and.w	r2, r3, #28
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	2102      	movs	r1, #2
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d038      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800438c:	e033      	b.n	80043f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f003 031c 	and.w	r3, r3, #28
 8004396:	2208      	movs	r2, #8
 8004398:	409a      	lsls	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d02a      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x156>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d025      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 020e 	bic.w	r2, r2, #14
 80043ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c0:	f003 021c 	and.w	r2, r3, #28
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	2101      	movs	r1, #1
 80043ca:	fa01 f202 	lsl.w	r2, r1, r2
 80043ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
}
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004416:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004428:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	f003 021c 	and.w	r2, r3, #28
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	2101      	movs	r1, #1
 8004438:	fa01 f202 	lsl.w	r2, r1, r2
 800443c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b10      	cmp	r3, #16
 800444c:	d108      	bne.n	8004460 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800445e:	e007      	b.n	8004470 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	089b      	lsrs	r3, r3, #2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004490:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6493      	str	r3, [r2, #72]	; 0x48
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3b08      	subs	r3, #8
 80044a0:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80044ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	2201      	movs	r2, #1
 80044b8:	409a      	lsls	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044be:	bf00      	nop
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	cccccccd 	.word	0xcccccccd
 80044d0:	40020880 	.word	0x40020880

080044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	461a      	mov	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a09      	ldr	r2, [pc, #36]	; (800451c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80044f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2201      	movs	r2, #1
 8004504:	409a      	lsls	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	1000823f 	.word	0x1000823f
 800451c:	40020940 	.word	0x40020940

08004520 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800452e:	e146      	b.n	80047be <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2101      	movs	r1, #1
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	4013      	ands	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8138 	beq.w	80047b8 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d00b      	beq.n	8004568 <HAL_GPIO_Init+0x48>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d007      	beq.n	8004568 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800455c:	2b11      	cmp	r3, #17
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b12      	cmp	r3, #18
 8004566:	d130      	bne.n	80045ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	2203      	movs	r2, #3
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800459e:	2201      	movs	r2, #1
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	f003 0201 	and.w	r2, r3, #1
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	2203      	movs	r2, #3
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0xea>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b12      	cmp	r3, #18
 8004608:	d123      	bne.n	8004652 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	08da      	lsrs	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3208      	adds	r2, #8
 8004612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004616:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	08da      	lsrs	r2, r3, #3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3208      	adds	r2, #8
 800464c:	6939      	ldr	r1, [r7, #16]
 800464e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	2203      	movs	r2, #3
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 0203 	and.w	r2, r3, #3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8092 	beq.w	80047b8 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004694:	4a51      	ldr	r2, [pc, #324]	; (80047dc <HAL_GPIO_Init+0x2bc>)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	089b      	lsrs	r3, r3, #2
 800469a:	3302      	adds	r3, #2
 800469c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	220f      	movs	r2, #15
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4013      	ands	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046be:	d013      	beq.n	80046e8 <HAL_GPIO_Init+0x1c8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a47      	ldr	r2, [pc, #284]	; (80047e0 <HAL_GPIO_Init+0x2c0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00d      	beq.n	80046e4 <HAL_GPIO_Init+0x1c4>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a46      	ldr	r2, [pc, #280]	; (80047e4 <HAL_GPIO_Init+0x2c4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <HAL_GPIO_Init+0x1c0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a45      	ldr	r2, [pc, #276]	; (80047e8 <HAL_GPIO_Init+0x2c8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d101      	bne.n	80046dc <HAL_GPIO_Init+0x1bc>
 80046d8:	2304      	movs	r3, #4
 80046da:	e006      	b.n	80046ea <HAL_GPIO_Init+0x1ca>
 80046dc:	2307      	movs	r3, #7
 80046de:	e004      	b.n	80046ea <HAL_GPIO_Init+0x1ca>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e002      	b.n	80046ea <HAL_GPIO_Init+0x1ca>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_GPIO_Init+0x1ca>
 80046e8:	2300      	movs	r3, #0
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	f002 0203 	and.w	r2, r2, #3
 80046f0:	0092      	lsls	r2, r2, #2
 80046f2:	4093      	lsls	r3, r2
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046fa:	4938      	ldr	r1, [pc, #224]	; (80047dc <HAL_GPIO_Init+0x2bc>)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	3302      	adds	r3, #2
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004708:	4b38      	ldr	r3, [pc, #224]	; (80047ec <HAL_GPIO_Init+0x2cc>)
 800470a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800470e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	43db      	mvns	r3, r3
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4013      	ands	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800472e:	4a2f      	ldr	r2, [pc, #188]	; (80047ec <HAL_GPIO_Init+0x2cc>)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004736:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <HAL_GPIO_Init+0x2cc>)
 8004738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	43db      	mvns	r3, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800475c:	4a23      	ldr	r2, [pc, #140]	; (80047ec <HAL_GPIO_Init+0x2cc>)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <HAL_GPIO_Init+0x2cc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	43db      	mvns	r3, r3
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0x268>
        {
          temp |= iocurrent;
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004788:	4a18      	ldr	r2, [pc, #96]	; (80047ec <HAL_GPIO_Init+0x2cc>)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <HAL_GPIO_Init+0x2cc>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	43db      	mvns	r3, r3
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4013      	ands	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047b2:	4a0e      	ldr	r2, [pc, #56]	; (80047ec <HAL_GPIO_Init+0x2cc>)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3301      	adds	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f47f aeb1 	bne.w	8004530 <HAL_GPIO_Init+0x10>
  }
}
 80047ce:	bf00      	nop
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	40010000 	.word	0x40010000
 80047e0:	48000400 	.word	0x48000400
 80047e4:	48000800 	.word	0x48000800
 80047e8:	48001000 	.word	0x48001000
 80047ec:	58000800 	.word	0x58000800

080047f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	807b      	strh	r3, [r7, #2]
 80047fc:	4613      	mov	r3, r2
 80047fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004800:	787b      	ldrb	r3, [r7, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004806:	887a      	ldrh	r2, [r7, #2]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800480c:	e002      	b.n	8004814 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800480e:	887a      	ldrh	r2, [r7, #2]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <HAL_HSEM_IRQHandler+0x30>)
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <HAL_HSEM_IRQHandler+0x30>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	43db      	mvns	r3, r3
 8004834:	4906      	ldr	r1, [pc, #24]	; (8004850 <HAL_HSEM_IRQHandler+0x30>)
 8004836:	4013      	ands	r3, r2
 8004838:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800483a:	4a05      	ldr	r2, [pc, #20]	; (8004850 <HAL_HSEM_IRQHandler+0x30>)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f807 	bl	8004854 <HAL_HSEM_FreeCallback>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	58001500 	.word	0x58001500

08004854 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01e      	beq.n	80048b8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_IPCC_Init+0x60>)
 800487c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd fdb8 	bl	8002400 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004890:	68b8      	ldr	r0, [r7, #8]
 8004892:	f000 f85b 	bl	800494c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f82c 	bl	8004900 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80048b6:	e001      	b.n	80048bc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	58000c00 	.word	0x58000c00

080048cc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	4613      	mov	r3, r2
 80048d8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	4613      	mov	r3, r2
 80048f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e00f      	b.n	800492e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	4a0b      	ldr	r2, [pc, #44]	; (8004944 <IPCC_SetDefaultCallbacks+0x44>)
 8004918:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3306      	adds	r3, #6
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	4a08      	ldr	r2, [pc, #32]	; (8004948 <IPCC_SetDefaultCallbacks+0x48>)
 8004926:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b05      	cmp	r3, #5
 8004932:	d9ec      	bls.n	800490e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	080048cd 	.word	0x080048cd
 8004948:	080048e7 	.word	0x080048e7

0800494c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004960:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	223f      	movs	r2, #63	; 0x3f
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800497e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	58000400 	.word	0x58000400

08004994 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a6:	d101      	bne.n	80049ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_RCC_HSE_Enable>:
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ca:	6013      	str	r3, [r2, #0]
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <LL_RCC_HSE_Disable>:
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
}
 80049ea:	bf00      	nop
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_RCC_HSE_IsReady>:
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a06:	d101      	bne.n	8004a0c <LL_RCC_HSE_IsReady+0x18>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <LL_RCC_HSE_IsReady+0x1a>
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_RCC_HSI_Enable>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	6013      	str	r3, [r2, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <LL_RCC_HSI_Disable>:
{
 8004a36:	b480      	push	{r7}
 8004a38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a48:	6013      	str	r3, [r2, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <LL_RCC_HSI_IsReady>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d101      	bne.n	8004a6c <LL_RCC_HSI_IsReady+0x18>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <LL_RCC_HSI_IsReady+0x1a>
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	061b      	lsls	r3, r3, #24
 8004a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_HSI48_Enable>:
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004aba:	bf00      	nop
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_RCC_HSI48_Disable>:
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_HSI48_IsReady>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d101      	bne.n	8004afe <LL_RCC_HSI48_IsReady+0x18>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <LL_RCC_HSI48_IsReady+0x1a>
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <LL_RCC_LSE_Enable>:
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b22:	bf00      	nop
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <LL_RCC_LSE_Disable>:
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_RCC_LSE_EnableBypass>:
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b5e:	f043 0304 	orr.w	r3, r3, #4
 8004b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_RCC_LSE_DisableBypass>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b80:	f023 0304 	bic.w	r3, r3, #4
 8004b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_RCC_LSE_IsReady>:
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d101      	bne.n	8004baa <LL_RCC_LSE_IsReady+0x18>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <LL_RCC_LSE_IsReady+0x1a>
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_LSI1_Enable>:
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bce:	bf00      	nop
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_RCC_LSI1_Disable>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_LSI1_IsReady>:
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d101      	bne.n	8004c12 <LL_RCC_LSI1_IsReady+0x18>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <LL_RCC_LSI1_IsReady+0x1a>
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_RCC_LSI2_Enable>:
{
 8004c1e:	b480      	push	{r7}
 8004c20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c2e:	f043 0304 	orr.w	r3, r3, #4
 8004c32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c36:	bf00      	nop
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_RCC_LSI2_Disable>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c50:	f023 0304 	bic.w	r3, r3, #4
 8004c54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c58:	bf00      	nop
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <LL_RCC_LSI2_IsReady>:
{
 8004c62:	b480      	push	{r7}
 8004c64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d101      	bne.n	8004c7a <LL_RCC_LSI2_IsReady+0x18>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e000      	b.n	8004c7c <LL_RCC_LSI2_IsReady+0x1a>
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <LL_RCC_LSI2_SetTrimming>:
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <LL_RCC_MSI_Enable>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6013      	str	r3, [r2, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_RCC_MSI_Disable>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	6013      	str	r3, [r2, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_MSI_IsReady>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d101      	bne.n	8004d06 <LL_RCC_MSI_IsReady+0x16>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <LL_RCC_MSI_IsReady+0x18>
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <LL_RCC_MSI_SetRange>:
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <LL_RCC_MSI_GetRange>:
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d4a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2bb0      	cmp	r3, #176	; 0xb0
 8004d50:	d901      	bls.n	8004d56 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004d52:	23b0      	movs	r3, #176	; 0xb0
 8004d54:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004d56:	687b      	ldr	r3, [r7, #4]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	604b      	str	r3, [r1, #4]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_RCC_SetSysClkSource>:
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f023 0203 	bic.w	r2, r3, #3
 8004da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	608b      	str	r3, [r1, #8]
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <LL_RCC_GetSysClkSource>:
{
 8004db6:	b480      	push	{r7}
 8004db8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <LL_RCC_SetAHBPrescaler>:
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <LL_RCC_SetAHB4Prescaler>:
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e32:	f023 020f 	bic.w	r2, r3, #15
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_RCC_SetAPB1Prescaler>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <LL_RCC_SetAPB2Prescaler>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	608b      	str	r3, [r1, #8]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_RCC_GetAHBPrescaler>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <LL_RCC_GetAHB4Prescaler>:
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <LL_RCC_GetAPB2Prescaler>:
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <LL_RCC_PLL_Enable>:
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004efe:	6013      	str	r3, [r2, #0]
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <LL_RCC_PLL_Disable>:
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f1c:	6013      	str	r3, [r2, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <LL_RCC_PLL_IsReady>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f3a:	d101      	bne.n	8004f40 <LL_RCC_PLL_IsReady+0x18>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <LL_RCC_PLL_IsReady+0x1a>
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_RCC_PLL_GetN>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	0a1b      	lsrs	r3, r3, #8
 8004f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <LL_RCC_PLL_GetR>:
{
 8004f66:	b480      	push	{r7}
 8004f68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <LL_RCC_PLL_GetDivider>:
{
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <LL_RCC_PLL_GetMainSource>:
{
 8004f96:	b480      	push	{r7}
 8004f98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0303 	and.w	r3, r3, #3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <LL_RCC_IsActiveFlag_HPRE>:
{
 8004fae:	b480      	push	{r7}
 8004fb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc0:	d101      	bne.n	8004fc6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe6:	d101      	bne.n	8004fec <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005000:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500c:	d101      	bne.n	8005012 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005030:	d101      	bne.n	8005036 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005032:	2301      	movs	r3, #1
 8005034:	e000      	b.n	8005038 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005042:	b480      	push	{r7}
 8005044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005050:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005054:	d101      	bne.n	800505a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b08d      	sub	sp, #52	; 0x34
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e373      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 8092 	beq.w	80051ac <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005088:	f7ff fe95 	bl	8004db6 <LL_RCC_GetSysClkSource>
 800508c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800508e:	f7ff ff82 	bl	8004f96 <LL_RCC_PLL_GetMainSource>
 8005092:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_RCC_OscConfig+0x3e>
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	2b0c      	cmp	r3, #12
 800509e:	d14c      	bne.n	800513a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d149      	bne.n	800513a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050a6:	f7ff fe23 	bl	8004cf0 <LL_RCC_MSI_IsReady>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_RCC_OscConfig+0x54>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e352      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80050c0:	f7ff fe3b 	bl	8004d3a <LL_RCC_MSI_GetRange>
 80050c4:	4603      	mov	r3, r0
 80050c6:	429c      	cmp	r4, r3
 80050c8:	d914      	bls.n	80050f4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fd22 	bl	8005b18 <RCC_SetFlashLatencyFromMSIRange>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e341      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fe15 	bl	8004d12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff fe39 	bl	8004d64 <LL_RCC_MSI_SetCalibTrimming>
 80050f2:	e013      	b.n	800511c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fe0a 	bl	8004d12 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff fe2e 	bl	8004d64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fd03 	bl	8005b18 <RCC_SetFlashLatencyFromMSIRange>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e322      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800511c:	f000 fcd2 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8005120:	4603      	mov	r3, r0
 8005122:	4ab3      	ldr	r2, [pc, #716]	; (80053f0 <HAL_RCC_OscConfig+0x388>)
 8005124:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005126:	4bb3      	ldr	r3, [pc, #716]	; (80053f4 <HAL_RCC_OscConfig+0x38c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fd fb54 	bl	80027d8 <HAL_InitTick>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d039      	beq.n	80051aa <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e313      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01e      	beq.n	8005180 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005142:	f7ff fdb7 	bl	8004cb4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005146:	f7fd fb95 	bl	8002874 <HAL_GetTick>
 800514a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800514e:	f7fd fb91 	bl	8002874 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e300      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005160:	f7ff fdc6 	bl	8004cf0 <LL_RCC_MSI_IsReady>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f1      	beq.n	800514e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fdcf 	bl	8004d12 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fdf3 	bl	8004d64 <LL_RCC_MSI_SetCalibTrimming>
 800517e:	e015      	b.n	80051ac <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005180:	f7ff fda7 	bl	8004cd2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005184:	f7fd fb76 	bl	8002874 <HAL_GetTick>
 8005188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800518c:	f7fd fb72 	bl	8002874 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e2e1      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_MSI_IsReady() != 0U)
 800519e:	f7ff fda7 	bl	8004cf0 <LL_RCC_MSI_IsReady>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f1      	bne.n	800518c <HAL_RCC_OscConfig+0x124>
 80051a8:	e000      	b.n	80051ac <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d04e      	beq.n	8005256 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b8:	f7ff fdfd 	bl	8004db6 <LL_RCC_GetSysClkSource>
 80051bc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051be:	f7ff feea 	bl	8004f96 <LL_RCC_PLL_GetMainSource>
 80051c2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d005      	beq.n	80051d6 <HAL_RCC_OscConfig+0x16e>
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	d10d      	bne.n	80051ec <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d10a      	bne.n	80051ec <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d6:	f7ff fc0d 	bl	80049f4 <LL_RCC_HSE_IsReady>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d039      	beq.n	8005254 <HAL_RCC_OscConfig+0x1ec>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d135      	bne.n	8005254 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e2ba      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f4:	d102      	bne.n	80051fc <HAL_RCC_OscConfig+0x194>
 80051f6:	f7ff fbdf 	bl	80049b8 <LL_RCC_HSE_Enable>
 80051fa:	e001      	b.n	8005200 <HAL_RCC_OscConfig+0x198>
 80051fc:	f7ff fbeb 	bl	80049d6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d012      	beq.n	800522e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fd fb34 	bl	8002874 <HAL_GetTick>
 800520c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005210:	f7fd fb30 	bl	8002874 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b64      	cmp	r3, #100	; 0x64
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e29f      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005222:	f7ff fbe7 	bl	80049f4 <LL_RCC_HSE_IsReady>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0f1      	beq.n	8005210 <HAL_RCC_OscConfig+0x1a8>
 800522c:	e013      	b.n	8005256 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fd fb21 	bl	8002874 <HAL_GetTick>
 8005232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005236:	f7fd fb1d 	bl	8002874 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b64      	cmp	r3, #100	; 0x64
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e28c      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005248:	f7ff fbd4 	bl	80049f4 <LL_RCC_HSE_IsReady>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f1      	bne.n	8005236 <HAL_RCC_OscConfig+0x1ce>
 8005252:	e000      	b.n	8005256 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d051      	beq.n	8005306 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005262:	f7ff fda8 	bl	8004db6 <LL_RCC_GetSysClkSource>
 8005266:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005268:	f7ff fe95 	bl	8004f96 <LL_RCC_PLL_GetMainSource>
 800526c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	2b04      	cmp	r3, #4
 8005272:	d005      	beq.n	8005280 <HAL_RCC_OscConfig+0x218>
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d113      	bne.n	80052a2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b02      	cmp	r3, #2
 800527e:	d110      	bne.n	80052a2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005280:	f7ff fbe8 	bl	8004a54 <LL_RCC_HSI_IsReady>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_RCC_OscConfig+0x22e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e265      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fbec 	bl	8004a78 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052a0:	e031      	b.n	8005306 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d019      	beq.n	80052de <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052aa:	f7ff fbb5 	bl	8004a18 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ae:	f7fd fae1 	bl	8002874 <HAL_GetTick>
 80052b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b6:	f7fd fadd 	bl	8002874 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e24c      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_HSI_IsReady() == 0U)
 80052c8:	f7ff fbc4 	bl	8004a54 <LL_RCC_HSI_IsReady>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f1      	beq.n	80052b6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fbce 	bl	8004a78 <LL_RCC_HSI_SetCalibTrimming>
 80052dc:	e013      	b.n	8005306 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052de:	f7ff fbaa 	bl	8004a36 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fd fac7 	bl	8002874 <HAL_GetTick>
 80052e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ea:	f7fd fac3 	bl	8002874 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e232      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_HSI_IsReady() != 0U)
 80052fc:	f7ff fbaa 	bl	8004a54 <LL_RCC_HSI_IsReady>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f1      	bne.n	80052ea <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80a3 	beq.w	8005466 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d076      	beq.n	8005416 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d046      	beq.n	80053c2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005334:	f7ff fc61 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d113      	bne.n	8005366 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800533e:	f7ff fc3a 	bl	8004bb6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005342:	f7fd fa97 	bl	8002874 <HAL_GetTick>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800534a:	f7fd fa93 	bl	8002874 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e202      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800535c:	f7ff fc4d 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f1      	beq.n	800534a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005366:	f7ff fc5a 	bl	8004c1e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536a:	f7fd fa83 	bl	8002874 <HAL_GetTick>
 800536e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005372:	f7fd fa7f 	bl	8002874 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b03      	cmp	r3, #3
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e1ee      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005384:	f7ff fc6d 	bl	8004c62 <LL_RCC_LSI2_IsReady>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f1      	beq.n	8005372 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fc77 	bl	8004c86 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005398:	f7ff fc1e 	bl	8004bd8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7fd fa6a 	bl	8002874 <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053a4:	f7fd fa66 	bl	8002874 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1d5      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80053b6:	f7ff fc20 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1f1      	bne.n	80053a4 <HAL_RCC_OscConfig+0x33c>
 80053c0:	e051      	b.n	8005466 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80053c2:	f7ff fbf8 	bl	8004bb6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fd fa55 	bl	8002874 <HAL_GetTick>
 80053ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053ce:	f7fd fa51 	bl	8002874 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e1c0      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053e0:	f7ff fc0b 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f1      	beq.n	80053ce <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80053ea:	f7ff fc29 	bl	8004c40 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053ee:	e00c      	b.n	800540a <HAL_RCC_OscConfig+0x3a2>
 80053f0:	20000004 	.word	0x20000004
 80053f4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053f8:	f7fd fa3c 	bl	8002874 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b03      	cmp	r3, #3
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e1ab      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800540a:	f7ff fc2a 	bl	8004c62 <LL_RCC_LSI2_IsReady>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f1      	bne.n	80053f8 <HAL_RCC_OscConfig+0x390>
 8005414:	e027      	b.n	8005466 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005416:	f7ff fc13 	bl	8004c40 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541a:	f7fd fa2b 	bl	8002874 <HAL_GetTick>
 800541e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005422:	f7fd fa27 	bl	8002874 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b03      	cmp	r3, #3
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e196      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005434:	f7ff fc15 	bl	8004c62 <LL_RCC_LSI2_IsReady>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1f1      	bne.n	8005422 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800543e:	f7ff fbcb 	bl	8004bd8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005442:	f7fd fa17 	bl	8002874 <HAL_GetTick>
 8005446:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005448:	e008      	b.n	800545c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800544a:	f7fd fa13 	bl	8002874 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e182      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800545c:	f7ff fbcd 	bl	8004bfa <LL_RCC_LSI1_IsReady>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f1      	bne.n	800544a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d05b      	beq.n	800552a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005472:	4bb4      	ldr	r3, [pc, #720]	; (8005744 <HAL_RCC_OscConfig+0x6dc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d114      	bne.n	80054a8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800547e:	f7ff fa79 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005482:	f7fd f9f7 	bl	8002874 <HAL_GetTick>
 8005486:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548a:	f7fd f9f3 	bl	8002874 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e162      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549c:	4ba9      	ldr	r3, [pc, #676]	; (8005744 <HAL_RCC_OscConfig+0x6dc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d102      	bne.n	80054b6 <HAL_RCC_OscConfig+0x44e>
 80054b0:	f7ff fb2b 	bl	8004b0a <LL_RCC_LSE_Enable>
 80054b4:	e00c      	b.n	80054d0 <HAL_RCC_OscConfig+0x468>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	d104      	bne.n	80054c8 <HAL_RCC_OscConfig+0x460>
 80054be:	f7ff fb46 	bl	8004b4e <LL_RCC_LSE_EnableBypass>
 80054c2:	f7ff fb22 	bl	8004b0a <LL_RCC_LSE_Enable>
 80054c6:	e003      	b.n	80054d0 <HAL_RCC_OscConfig+0x468>
 80054c8:	f7ff fb30 	bl	8004b2c <LL_RCC_LSE_Disable>
 80054cc:	f7ff fb50 	bl	8004b70 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d014      	beq.n	8005502 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d8:	f7fd f9cc 	bl	8002874 <HAL_GetTick>
 80054dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fd f9c8 	bl	8002874 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e135      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_LSE_IsReady() == 0U)
 80054f6:	f7ff fb4c 	bl	8004b92 <LL_RCC_LSE_IsReady>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0ef      	beq.n	80054e0 <HAL_RCC_OscConfig+0x478>
 8005500:	e013      	b.n	800552a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005502:	f7fd f9b7 	bl	8002874 <HAL_GetTick>
 8005506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005508:	e00a      	b.n	8005520 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550a:	f7fd f9b3 	bl	8002874 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	f241 3288 	movw	r2, #5000	; 0x1388
 8005518:	4293      	cmp	r3, r2
 800551a:	d901      	bls.n	8005520 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e120      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005520:	f7ff fb37 	bl	8004b92 <LL_RCC_LSE_IsReady>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ef      	bne.n	800550a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d02c      	beq.n	8005590 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	2b00      	cmp	r3, #0
 800553c:	d014      	beq.n	8005568 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800553e:	f7ff fab0 	bl	8004aa2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005542:	f7fd f997 	bl	8002874 <HAL_GetTick>
 8005546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005548:	e008      	b.n	800555c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800554a:	f7fd f993 	bl	8002874 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e102      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800555c:	f7ff fac3 	bl	8004ae6 <LL_RCC_HSI48_IsReady>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f1      	beq.n	800554a <HAL_RCC_OscConfig+0x4e2>
 8005566:	e013      	b.n	8005590 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005568:	f7ff faac 	bl	8004ac4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800556c:	f7fd f982 	bl	8002874 <HAL_GetTick>
 8005570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005574:	f7fd f97e 	bl	8002874 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e0ed      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005586:	f7ff faae 	bl	8004ae6 <LL_RCC_HSI48_IsReady>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f1      	bne.n	8005574 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80e3 	beq.w	8005760 <HAL_RCC_OscConfig+0x6f8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800559a:	f7ff fc0c 	bl	8004db6 <LL_RCC_GetSysClkSource>
 800559e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80055a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	f040 80a6 	bne.w	80056fe <HAL_RCC_OscConfig+0x696>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f003 0203 	and.w	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	429a      	cmp	r2, r3
 80055be:	d123      	bne.n	8005608 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d11c      	bne.n	8005608 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055da:	429a      	cmp	r2, r3
 80055dc:	d114      	bne.n	8005608 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d10d      	bne.n	8005608 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d106      	bne.n	8005608 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005604:	429a      	cmp	r2, r3
 8005606:	d054      	beq.n	80056b2 <HAL_RCC_OscConfig+0x64a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2b0c      	cmp	r3, #12
 800560c:	d04f      	beq.n	80056ae <HAL_RCC_OscConfig+0x646>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800560e:	f7ff fc7c 	bl	8004f0a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005612:	f7fd f92f 	bl	8002874 <HAL_GetTick>
 8005616:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x5c4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561a:	f7fd f92b 	bl	8002874 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x5c4>
              {
                return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e09a      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800562c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ef      	bne.n	800561a <HAL_RCC_OscConfig+0x5b2>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800563a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	4b41      	ldr	r3, [pc, #260]	; (8005748 <HAL_RCC_OscConfig+0x6e0>)
 8005642:	4013      	ands	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800564c:	4311      	orrs	r1, r2
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005652:	0212      	lsls	r2, r2, #8
 8005654:	4311      	orrs	r1, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800565a:	4311      	orrs	r1, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005660:	4311      	orrs	r1, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005666:	430a      	orrs	r2, r1
 8005668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800566c:	4313      	orrs	r3, r2
 800566e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005670:	f7ff fc3c 	bl	8004eec <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800567e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005682:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005684:	f7fd f8f6 	bl	8002874 <HAL_GetTick>
 8005688:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x636>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800568c:	f7fd f8f2 	bl	8002874 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x636>
              {
                return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e061      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800569e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0ef      	beq.n	800568c <HAL_RCC_OscConfig+0x624>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ac:	e058      	b.n	8005760 <HAL_RCC_OscConfig+0x6f8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e057      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d14f      	bne.n	8005760 <HAL_RCC_OscConfig+0x6f8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056c0:	f7ff fc14 	bl	8004eec <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056d4:	f7fd f8ce 	bl	8002874 <HAL_GetTick>
 80056d8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x686>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056dc:	f7fd f8ca 	bl	8002874 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x686>
            {
              return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e039      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ef      	beq.n	80056dc <HAL_RCC_OscConfig+0x674>
 80056fc:	e030      	b.n	8005760 <HAL_RCC_OscConfig+0x6f8>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d02b      	beq.n	800575c <HAL_RCC_OscConfig+0x6f4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005704:	f7ff fc01 	bl	8004f0a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005726:	60d3      	str	r3, [r2, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fd f8a4 	bl	8002874 <HAL_GetTick>
 800572c:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800572e:	e00d      	b.n	800574c <HAL_RCC_OscConfig+0x6e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005730:	f7fd f8a0 	bl	8002874 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d906      	bls.n	800574c <HAL_RCC_OscConfig+0x6e4>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e00f      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
 8005742:	bf00      	nop
 8005744:	58000400 	.word	0x58000400
 8005748:	11c1808c 	.word	0x11c1808c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800574c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1ea      	bne.n	8005730 <HAL_RCC_OscConfig+0x6c8>
 800575a:	e001      	b.n	8005760 <HAL_RCC_OscConfig+0x6f8>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <HAL_RCC_OscConfig+0x6fa>
      }
    }
  }
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3734      	adds	r7, #52	; 0x34
 8005766:	46bd      	mov	sp, r7
 8005768:	bd90      	pop	{r4, r7, pc}
 800576a:	bf00      	nop

0800576c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e12d      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005780:	4b98      	ldr	r3, [pc, #608]	; (80059e4 <HAL_RCC_ClockConfig+0x278>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d91b      	bls.n	80057c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578e:	4b95      	ldr	r3, [pc, #596]	; (80059e4 <HAL_RCC_ClockConfig+0x278>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 0207 	bic.w	r2, r3, #7
 8005796:	4993      	ldr	r1, [pc, #588]	; (80059e4 <HAL_RCC_ClockConfig+0x278>)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	4313      	orrs	r3, r2
 800579c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579e:	f7fd f869 	bl	8002874 <HAL_GetTick>
 80057a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057a6:	f7fd f865 	bl	8002874 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e111      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057b8:	4b8a      	ldr	r3, [pc, #552]	; (80059e4 <HAL_RCC_ClockConfig+0x278>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d1ef      	bne.n	80057a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d016      	beq.n	8005800 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff faf9 	bl	8004dce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057dc:	f7fd f84a 	bl	8002874 <HAL_GetTick>
 80057e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057e4:	f7fd f846 	bl	8002874 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e0f2      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80057f6:	f7ff fbda 	bl	8004fae <LL_RCC_IsActiveFlag_HPRE>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f1      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d016      	beq.n	800583a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff faf0 	bl	8004df6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005816:	f7fd f82d 	bl	8002874 <HAL_GetTick>
 800581a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800581c:	e008      	b.n	8005830 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800581e:	f7fd f829 	bl	8002874 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e0d5      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005830:	f7ff fbcf 	bl	8004fd2 <LL_RCC_IsActiveFlag_C2HPRE>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f1      	beq.n	800581e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d016      	beq.n	8005874 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fae9 	bl	8004e22 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005850:	f7fd f810 	bl	8002874 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005858:	f7fd f80c 	bl	8002874 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d901      	bls.n	800586a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e0b8      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800586a:	f7ff fbc5 	bl	8004ff8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f1      	beq.n	8005858 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d016      	beq.n	80058ae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fae3 	bl	8004e50 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800588a:	f7fc fff3 	bl	8002874 <HAL_GetTick>
 800588e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005890:	e008      	b.n	80058a4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005892:	f7fc ffef 	bl	8002874 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e09b      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80058a4:	f7ff fbbb 	bl	800501e <LL_RCC_IsActiveFlag_PPRE1>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f1      	beq.n	8005892 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d017      	beq.n	80058ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fad9 	bl	8004e78 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058c6:	f7fc ffd5 	bl	8002874 <HAL_GetTick>
 80058ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058ce:	f7fc ffd1 	bl	8002874 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e07d      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058e0:	f7ff fbaf 	bl	8005042 <LL_RCC_IsActiveFlag_PPRE2>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f1      	beq.n	80058ce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d043      	beq.n	800597e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d106      	bne.n	800590c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80058fe:	f7ff f879 	bl	80049f4 <LL_RCC_HSE_IsReady>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d11e      	bne.n	8005946 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e067      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d106      	bne.n	8005922 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005914:	f7ff fb08 	bl	8004f28 <LL_RCC_PLL_IsReady>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d113      	bne.n	8005946 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e05c      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800592a:	f7ff f9e1 	bl	8004cf0 <LL_RCC_MSI_IsReady>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d108      	bne.n	8005946 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e051      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005938:	f7ff f88c 	bl	8004a54 <LL_RCC_HSI_IsReady>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e04a      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff fa1f 	bl	8004d8e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005950:	f7fc ff90 	bl	8002874 <HAL_GetTick>
 8005954:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005956:	e00a      	b.n	800596e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005958:	f7fc ff8c 	bl	8002874 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	f241 3288 	movw	r2, #5000	; 0x1388
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e036      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596e:	f7ff fa22 	bl	8004db6 <LL_RCC_GetSysClkSource>
 8005972:	4602      	mov	r2, r0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	429a      	cmp	r2, r3
 800597c:	d1ec      	bne.n	8005958 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800597e:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <HAL_RCC_ClockConfig+0x278>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d21b      	bcs.n	80059c4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598c:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <HAL_RCC_ClockConfig+0x278>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f023 0207 	bic.w	r2, r3, #7
 8005994:	4913      	ldr	r1, [pc, #76]	; (80059e4 <HAL_RCC_ClockConfig+0x278>)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	4313      	orrs	r3, r2
 800599a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599c:	f7fc ff6a 	bl	8002874 <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059a4:	f7fc ff66 	bl	8002874 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e012      	b.n	80059dc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <HAL_RCC_ClockConfig+0x278>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0307 	and.w	r3, r3, #7
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d1ef      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80059c4:	f000 f87e 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 80059c8:	4603      	mov	r3, r0
 80059ca:	4a07      	ldr	r2, [pc, #28]	; (80059e8 <HAL_RCC_ClockConfig+0x27c>)
 80059cc:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80059ce:	f7fc ff5d 	bl	800288c <HAL_GetTickPrio>
 80059d2:	4603      	mov	r3, r0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7fc feff 	bl	80027d8 <HAL_InitTick>
 80059da:	4603      	mov	r3, r0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	58004000 	.word	0x58004000
 80059e8:	20000004 	.word	0x20000004

080059ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059f2:	f7ff f9e0 	bl	8004db6 <LL_RCC_GetSysClkSource>
 80059f6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80059fe:	f7ff f99c 	bl	8004d3a <LL_RCC_MSI_GetRange>
 8005a02:	4603      	mov	r3, r0
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	4a2b      	ldr	r2, [pc, #172]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e04b      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d102      	bne.n	8005a20 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a1a:	4b28      	ldr	r3, [pc, #160]	; (8005abc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e045      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d10a      	bne.n	8005a3c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a26:	f7fe ffb5 	bl	8004994 <LL_RCC_HSE_IsEnabledDiv2>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d102      	bne.n	8005a36 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005a30:	4b22      	ldr	r3, [pc, #136]	; (8005abc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a32:	60fb      	str	r3, [r7, #12]
 8005a34:	e03a      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e037      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005a3c:	f7ff faab 	bl	8004f96 <LL_RCC_PLL_GetMainSource>
 8005a40:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d003      	beq.n	8005a50 <HAL_RCC_GetSysClockFreq+0x64>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d003      	beq.n	8005a56 <HAL_RCC_GetSysClockFreq+0x6a>
 8005a4e:	e00d      	b.n	8005a6c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005a50:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a52:	60bb      	str	r3, [r7, #8]
        break;
 8005a54:	e015      	b.n	8005a82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a56:	f7fe ff9d 	bl	8004994 <LL_RCC_HSE_IsEnabledDiv2>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005a60:	4b16      	ldr	r3, [pc, #88]	; (8005abc <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a62:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005a64:	e00d      	b.n	8005a82 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005a66:	4b16      	ldr	r3, [pc, #88]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a68:	60bb      	str	r3, [r7, #8]
        break;
 8005a6a:	e00a      	b.n	8005a82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a6c:	f7ff f965 	bl	8004d3a <LL_RCC_MSI_GetRange>
 8005a70:	4603      	mov	r3, r0
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	4a0f      	ldr	r2, [pc, #60]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a7e:	60bb      	str	r3, [r7, #8]
        break;
 8005a80:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005a82:	f7ff fa63 	bl	8004f4c <LL_RCC_PLL_GetN>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	fb03 f402 	mul.w	r4, r3, r2
 8005a8e:	f7ff fa76 	bl	8004f7e <LL_RCC_PLL_GetDivider>
 8005a92:	4603      	mov	r3, r0
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	3301      	adds	r3, #1
 8005a98:	fbb4 f4f3 	udiv	r4, r4, r3
 8005a9c:	f7ff fa63 	bl	8004f66 <LL_RCC_PLL_GetR>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	0f5b      	lsrs	r3, r3, #29
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	fbb4 f3f3 	udiv	r3, r4, r3
 8005aaa:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005aac:	68fb      	ldr	r3, [r7, #12]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd90      	pop	{r4, r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	0800adac 	.word	0x0800adac
 8005abc:	00f42400 	.word	0x00f42400
 8005ac0:	01e84800 	.word	0x01e84800

08005ac4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac4:	b598      	push	{r3, r4, r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005ac8:	f7ff ff90 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 8005acc:	4604      	mov	r4, r0
 8005ace:	f7ff f9e7 	bl	8004ea0 <LL_RCC_GetAHBPrescaler>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	091b      	lsrs	r3, r3, #4
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	4a03      	ldr	r2, [pc, #12]	; (8005ae8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	bd98      	pop	{r3, r4, r7, pc}
 8005ae8:	0800ad4c 	.word	0x0800ad4c

08005aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aec:	b598      	push	{r3, r4, r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005af0:	f7ff ffe8 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8005af4:	4604      	mov	r4, r0
 8005af6:	f7ff f9ed 	bl	8004ed4 <LL_RCC_GetAPB2Prescaler>
 8005afa:	4603      	mov	r3, r0
 8005afc:	0adb      	lsrs	r3, r3, #11
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	4a04      	ldr	r2, [pc, #16]	; (8005b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b08:	f003 031f 	and.w	r3, r3, #31
 8005b0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd98      	pop	{r3, r4, r7, pc}
 8005b14:	0800ad8c 	.word	0x0800ad8c

08005b18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2bb0      	cmp	r3, #176	; 0xb0
 8005b24:	d903      	bls.n	8005b2e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	e007      	b.n	8005b3e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	4a10      	ldr	r2, [pc, #64]	; (8005b78 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005b3e:	f7ff f9bb 	bl	8004eb8 <LL_RCC_GetAHB4Prescaler>
 8005b42:	4603      	mov	r3, r0
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	4a0c      	ldr	r2, [pc, #48]	; (8005b7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b56:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b60:	0c9b      	lsrs	r3, r3, #18
 8005b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f80c 	bl	8005b84 <RCC_SetFlashLatency>
 8005b6c:	4603      	mov	r3, r0
#endif
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	0800adac 	.word	0x0800adac
 8005b7c:	0800ad4c 	.word	0x0800ad4c
 8005b80:	431bde83 	.word	0x431bde83

08005b84 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b08f      	sub	sp, #60	; 0x3c
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005b8e:	4b25      	ldr	r3, [pc, #148]	; (8005c24 <RCC_SetFlashLatency+0xa0>)
 8005b90:	f107 041c 	add.w	r4, r7, #28
 8005b94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005b9a:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <RCC_SetFlashLatency+0xa4>)
 8005b9c:	f107 040c 	add.w	r4, r7, #12
 8005ba0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005baa:	2300      	movs	r3, #0
 8005bac:	633b      	str	r3, [r7, #48]	; 0x30
 8005bae:	e015      	b.n	8005bdc <RCC_SetFlashLatency+0x58>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005bb8:	4413      	add	r3, r2
 8005bba:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d808      	bhi.n	8005bd6 <RCC_SetFlashLatency+0x52>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005bcc:	4413      	add	r3, r2
 8005bce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005bd2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005bd4:	e005      	b.n	8005be2 <RCC_SetFlashLatency+0x5e>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	3301      	adds	r3, #1
 8005bda:	633b      	str	r3, [r7, #48]	; 0x30
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d9e6      	bls.n	8005bb0 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005be2:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <RCC_SetFlashLatency+0xa8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 0207 	bic.w	r2, r3, #7
 8005bea:	4910      	ldr	r1, [pc, #64]	; (8005c2c <RCC_SetFlashLatency+0xa8>)
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bf2:	f7fc fe3f 	bl	8002874 <HAL_GetTick>
 8005bf6:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005bf8:	e008      	b.n	8005c0c <RCC_SetFlashLatency+0x88>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005bfa:	f7fc fe3b 	bl	8002874 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <RCC_SetFlashLatency+0x88>
    {
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e007      	b.n	8005c1c <RCC_SetFlashLatency+0x98>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c0c:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <RCC_SetFlashLatency+0xa8>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d1ef      	bne.n	8005bfa <RCC_SetFlashLatency+0x76>
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	373c      	adds	r7, #60	; 0x3c
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd90      	pop	{r4, r7, pc}
 8005c24:	0800abe4 	.word	0x0800abe4
 8005c28:	0800abf4 	.word	0x0800abf4
 8005c2c:	58004000 	.word	0x58004000

08005c30 <LL_RCC_LSE_IsEnabled>:
{
 8005c30:	b480      	push	{r7}
 8005c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <LL_RCC_LSE_IsEnabled+0x18>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <LL_RCC_LSE_IsEnabled+0x1a>
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <LL_RCC_LSE_IsReady>:
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d101      	bne.n	8005c6c <LL_RCC_LSE_IsReady+0x18>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <LL_RCC_LSE_IsReady+0x1a>
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_RCC_SetRFWKPClockSource>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <LL_RCC_SetUSARTClockSource>:
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb4:	f023 0203 	bic.w	r2, r3, #3
 8005cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <LL_RCC_SetI2CClockSource>:
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	401a      	ands	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <LL_RCC_SetLPTIMClockSource>:
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	0c1b      	lsrs	r3, r3, #16
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <LL_RCC_SetRNGClockSource>:
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <LL_RCC_SetCLK48ClockSource>:
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <LL_RCC_SetADCClockSource>:
{
 8005d96:	b480      	push	{r7}
 8005d98:	b083      	sub	sp, #12
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <LL_RCC_SetRTCClockSource>:
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <LL_RCC_GetRTCClockSource>:
{
 8005dee:	b480      	push	{r7}
 8005df0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <LL_RCC_ForceBackupDomainReset>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005e54:	2300      	movs	r3, #0
 8005e56:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005e58:	2300      	movs	r3, #0
 8005e5a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d046      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005e68:	f7ff ffc1 	bl	8005dee <LL_RCC_GetRTCClockSource>
 8005e6c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d03c      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e78:	f7fe fd7c 	bl	8004974 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d105      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff ff9b 	bl	8005dc2 <LL_RCC_SetRTCClockSource>
 8005e8c:	e02e      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005e98:	f7ff ffb6 	bl	8005e08 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005e9c:	f7ff ffc5 	bl	8005e2a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005eb8:	f7ff feba 	bl	8005c30 <LL_RCC_LSE_IsEnabled>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d114      	bne.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ec2:	f7fc fcd7 	bl	8002874 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ec8:	e00b      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fc fcd3 	bl	8002874 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d902      	bls.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	77fb      	strb	r3, [r7, #31]
              break;
 8005ee0:	e004      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ee2:	f7ff feb7 	bl	8005c54 <LL_RCC_LSE_IsReady>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d1ee      	bne.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005eec:	7ffb      	ldrb	r3, [r7, #31]
 8005eee:	77bb      	strb	r3, [r7, #30]
 8005ef0:	e001      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef2:	7ffb      	ldrb	r3, [r7, #31]
 8005ef4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fecc 	bl	8005ca4 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fef4 	bl	8005d0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fee9 	bl	8005d0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0304 	and.w	r3, r3, #4
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fec1 	bl	8005cd0 <LL_RCC_SetI2CClockSource>
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02b      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f62:	d008      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d105      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff fedf 	bl	8005d3e <LL_RCC_SetRNGClockSource>
 8005f80:	e00a      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	f7ff fed6 	bl	8005d3e <LL_RCC_SetRNGClockSource>
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fee9 	bl	8005d6a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005fa0:	d107      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fb0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d011      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fee7 	bl	8005d96 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fd0:	d107      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe0:	60d3      	str	r3, [r2, #12]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fe40 	bl	8005c78 <LL_RCC_SetRFWKPClockSource>
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif


  return status;
 8005ff8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e090      	b.n	8006136 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d106      	bne.n	800602e <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7fc fa0d 	bl	8002448 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	22ca      	movs	r2, #202	; 0xca
 800603c:	625a      	str	r2, [r3, #36]	; 0x24
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2253      	movs	r2, #83	; 0x53
 8006044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f89f 	bl	800618a <RTC_EnterInitMode>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d009      	beq.n	8006066 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	22ff      	movs	r2, #255	; 0xff
 8006058:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2204      	movs	r2, #4
 800605e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e067      	b.n	8006136 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006078:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6899      	ldr	r1, [r3, #8]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68d2      	ldr	r2, [r2, #12]
 80060a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6919      	ldr	r1, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	041a      	lsls	r2, r3, #16
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68da      	ldr	r2, [r3, #12]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0203 	bic.w	r2, r2, #3
 80060d4:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d113      	bne.n	8006124 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f81e 	bl	800613e <HAL_RTC_WaitForSynchro>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00d      	beq.n	8006124 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	22ff      	movs	r2, #255	; 0xff
 800610e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2204      	movs	r2, #4
 8006114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e008      	b.n	8006136 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	22ff      	movs	r2, #255	; 0xff
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006134:	2300      	movs	r3, #0
  }
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006154:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006156:	f7fc fb8d 	bl	8002874 <HAL_GetTick>
 800615a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800615c:	e009      	b.n	8006172 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800615e:	f7fc fb89 	bl	8002874 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800616c:	d901      	bls.n	8006172 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e007      	b.n	8006182 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ee      	beq.n	800615e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b00      	cmp	r3, #0
 800619e:	d119      	bne.n	80061d4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f04f 32ff 	mov.w	r2, #4294967295
 80061a8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061aa:	f7fc fb63 	bl	8002874 <HAL_GetTick>
 80061ae:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061b0:	e009      	b.n	80061c6 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80061b2:	f7fc fb5f 	bl	8002874 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061c0:	d901      	bls.n	80061c6 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e007      	b.n	80061d6 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0ee      	beq.n	80061b2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e049      	b.n	8006284 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fc f935 	bl	8002474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2202      	movs	r2, #2
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3304      	adds	r3, #4
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f000 fa91 	bl	8006744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d001      	beq.n	80062a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e036      	b.n	8006312 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a17      	ldr	r2, [pc, #92]	; (8006320 <HAL_TIM_Base_Start_IT+0x94>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x44>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ce:	d115      	bne.n	80062fc <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	4b13      	ldr	r3, [pc, #76]	; (8006324 <HAL_TIM_Base_Start_IT+0x98>)
 80062d8:	4013      	ands	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b06      	cmp	r3, #6
 80062e0:	d015      	beq.n	800630e <HAL_TIM_Base_Start_IT+0x82>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e8:	d011      	beq.n	800630e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fa:	e008      	b.n	800630e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	e000      	b.n	8006310 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40012c00 	.word	0x40012c00
 8006324:	00010007 	.word	0x00010007

08006328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b02      	cmp	r3, #2
 800633c:	d122      	bne.n	8006384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b02      	cmp	r3, #2
 800634a:	d11b      	bne.n	8006384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0202 	mvn.w	r2, #2
 8006354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f9cb 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 8006370:	e005      	b.n	800637e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f9bd 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f9ce 	bl	800671a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b04      	cmp	r3, #4
 8006390:	d122      	bne.n	80063d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b04      	cmp	r3, #4
 800639e:	d11b      	bne.n	80063d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0204 	mvn.w	r2, #4
 80063a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2202      	movs	r2, #2
 80063ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f9a1 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 80063c4:	e005      	b.n	80063d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f993 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f9a4 	bl	800671a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d122      	bne.n	800642c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d11b      	bne.n	800642c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0208 	mvn.w	r2, #8
 80063fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2204      	movs	r2, #4
 8006402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f977 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 8006418:	e005      	b.n	8006426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f969 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 f97a 	bl	800671a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b10      	cmp	r3, #16
 8006438:	d122      	bne.n	8006480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0310 	and.w	r3, r3, #16
 8006444:	2b10      	cmp	r3, #16
 8006446:	d11b      	bne.n	8006480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f06f 0210 	mvn.w	r2, #16
 8006450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2208      	movs	r2, #8
 8006456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f94d 	bl	8006706 <HAL_TIM_IC_CaptureCallback>
 800646c:	e005      	b.n	800647a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f93f 	bl	80066f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f950 	bl	800671a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b01      	cmp	r3, #1
 800648c:	d10e      	bne.n	80064ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b01      	cmp	r3, #1
 800649a:	d107      	bne.n	80064ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0201 	mvn.w	r2, #1
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7fb fe94 	bl	80021d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	2b80      	cmp	r3, #128	; 0x80
 80064b8:	d10e      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c4:	2b80      	cmp	r3, #128	; 0x80
 80064c6:	d107      	bne.n	80064d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 faa0 	bl	8006a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e6:	d10e      	bne.n	8006506 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d107      	bne.n	8006506 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fa93 	bl	8006a2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b40      	cmp	r3, #64	; 0x40
 8006512:	d10e      	bne.n	8006532 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d107      	bne.n	8006532 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800652a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f8fe 	bl	800672e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b20      	cmp	r3, #32
 800653e:	d10e      	bne.n	800655e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b20      	cmp	r3, #32
 800654c:	d107      	bne.n	800655e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f06f 0220 	mvn.w	r2, #32
 8006556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fa53 	bl	8006a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_TIM_ConfigClockSource+0x18>
 800657a:	2302      	movs	r3, #2
 800657c:	e0b5      	b.n	80066ea <HAL_TIM_ConfigClockSource+0x184>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800659c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ba:	d03e      	beq.n	800663a <HAL_TIM_ConfigClockSource+0xd4>
 80065bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c0:	f200 8087 	bhi.w	80066d2 <HAL_TIM_ConfigClockSource+0x16c>
 80065c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c8:	f000 8085 	beq.w	80066d6 <HAL_TIM_ConfigClockSource+0x170>
 80065cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d0:	d87f      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x16c>
 80065d2:	2b70      	cmp	r3, #112	; 0x70
 80065d4:	d01a      	beq.n	800660c <HAL_TIM_ConfigClockSource+0xa6>
 80065d6:	2b70      	cmp	r3, #112	; 0x70
 80065d8:	d87b      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x16c>
 80065da:	2b60      	cmp	r3, #96	; 0x60
 80065dc:	d050      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0x11a>
 80065de:	2b60      	cmp	r3, #96	; 0x60
 80065e0:	d877      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x16c>
 80065e2:	2b50      	cmp	r3, #80	; 0x50
 80065e4:	d03c      	beq.n	8006660 <HAL_TIM_ConfigClockSource+0xfa>
 80065e6:	2b50      	cmp	r3, #80	; 0x50
 80065e8:	d873      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x16c>
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d058      	beq.n	80066a0 <HAL_TIM_ConfigClockSource+0x13a>
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d86f      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x16c>
 80065f2:	2b30      	cmp	r3, #48	; 0x30
 80065f4:	d064      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x15a>
 80065f6:	2b30      	cmp	r3, #48	; 0x30
 80065f8:	d86b      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x16c>
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d060      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x15a>
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d867      	bhi.n	80066d2 <HAL_TIM_ConfigClockSource+0x16c>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d05c      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x15a>
 8006606:	2b10      	cmp	r3, #16
 8006608:	d05a      	beq.n	80066c0 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800660a:	e062      	b.n	80066d2 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6899      	ldr	r1, [r3, #8]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f000 f972 	bl	8006904 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800662e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	609a      	str	r2, [r3, #8]
      break;
 8006638:	e04e      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6899      	ldr	r1, [r3, #8]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f000 f95b 	bl	8006904 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800665c:	609a      	str	r2, [r3, #8]
      break;
 800665e:	e03b      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	461a      	mov	r2, r3
 800666e:	f000 f8cd 	bl	800680c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2150      	movs	r1, #80	; 0x50
 8006678:	4618      	mov	r0, r3
 800667a:	f000 f926 	bl	80068ca <TIM_ITRx_SetConfig>
      break;
 800667e:	e02b      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6859      	ldr	r1, [r3, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	461a      	mov	r2, r3
 800668e:	f000 f8ec 	bl	800686a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2160      	movs	r1, #96	; 0x60
 8006698:	4618      	mov	r0, r3
 800669a:	f000 f916 	bl	80068ca <TIM_ITRx_SetConfig>
      break;
 800669e:	e01b      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	6859      	ldr	r1, [r3, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	461a      	mov	r2, r3
 80066ae:	f000 f8ad 	bl	800680c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2140      	movs	r1, #64	; 0x40
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f906 	bl	80068ca <TIM_ITRx_SetConfig>
      break;
 80066be:	e00b      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4619      	mov	r1, r3
 80066ca:	4610      	mov	r0, r2
 80066cc:	f000 f8fd 	bl	80068ca <TIM_ITRx_SetConfig>
        break;
 80066d0:	e002      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80066d2:	bf00      	nop
 80066d4:	e000      	b.n	80066d8 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80066d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <TIM_Base_SetConfig+0xbc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d003      	beq.n	8006764 <TIM_Base_SetConfig+0x20>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006762:	d108      	bne.n	8006776 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a21      	ldr	r2, [pc, #132]	; (8006800 <TIM_Base_SetConfig+0xbc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00b      	beq.n	8006796 <TIM_Base_SetConfig+0x52>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006784:	d007      	beq.n	8006796 <TIM_Base_SetConfig+0x52>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a1e      	ldr	r2, [pc, #120]	; (8006804 <TIM_Base_SetConfig+0xc0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_Base_SetConfig+0x52>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <TIM_Base_SetConfig+0xc4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d108      	bne.n	80067a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <TIM_Base_SetConfig+0xbc>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d007      	beq.n	80067e4 <TIM_Base_SetConfig+0xa0>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a0b      	ldr	r2, [pc, #44]	; (8006804 <TIM_Base_SetConfig+0xc0>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_Base_SetConfig+0xa0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <TIM_Base_SetConfig+0xc4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d103      	bne.n	80067ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	615a      	str	r2, [r3, #20]
}
 80067f2:	bf00      	nop
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	40012c00 	.word	0x40012c00
 8006804:	40014400 	.word	0x40014400
 8006808:	40014800 	.word	0x40014800

0800680c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f023 0201 	bic.w	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f023 030a 	bic.w	r3, r3, #10
 8006848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	621a      	str	r2, [r3, #32]
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686a:	b480      	push	{r7}
 800686c:	b087      	sub	sp, #28
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f023 0210 	bic.w	r2, r3, #16
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	031b      	lsls	r3, r3, #12
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	4313      	orrs	r3, r2
 800689e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80068e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f043 0307 	orr.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	609a      	str	r2, [r3, #8]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800691e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	021a      	lsls	r2, r3, #8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	431a      	orrs	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4313      	orrs	r3, r2
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006958:	2302      	movs	r3, #2
 800695a:	e04a      	b.n	80069f2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1f      	ldr	r2, [pc, #124]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800698c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a12      	ldr	r2, [pc, #72]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c4:	d10c      	bne.n	80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40012c00 	.word	0x40012c00

08006a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <LL_RCC_GetUSARTClockSource>:
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4013      	ands	r3, r2
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e042      	b.n	8006af8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d106      	bne.n	8006a8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fb fd0d 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2224      	movs	r2, #36	; 0x24
 8006a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fb16 	bl	80070d4 <UART_SetConfig>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e022      	b.n	8006af8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fc48 	bl	8007350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fccf 	bl	8007494 <UART_CheckIdleState>
 8006af6:	4603      	mov	r3, r0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	f040 8083 	bne.w	8006c22 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <HAL_UART_Transmit+0x28>
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e07b      	b.n	8006c24 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_UART_Transmit+0x3a>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e074      	b.n	8006c24 <HAL_UART_Transmit+0x124>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2221      	movs	r2, #33	; 0x21
 8006b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b52:	f7fb fe8f 	bl	8002874 <HAL_GetTick>
 8006b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	88fa      	ldrh	r2, [r7, #6]
 8006b5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	88fa      	ldrh	r2, [r7, #6]
 8006b64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b70:	d108      	bne.n	8006b84 <HAL_UART_Transmit+0x84>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	61bb      	str	r3, [r7, #24]
 8006b82:	e003      	b.n	8006b8c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006b94:	e02c      	b.n	8006bf0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2180      	movs	r1, #128	; 0x80
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 fcc2 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e039      	b.n	8006c24 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	3302      	adds	r3, #2
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	e007      	b.n	8006bde <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1cc      	bne.n	8006b96 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2200      	movs	r2, #0
 8006c04:	2140      	movs	r1, #64	; 0x40
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 fc8f 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e006      	b.n	8006c24 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e000      	b.n	8006c24 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006c22:	2302      	movs	r3, #2
  }
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3720      	adds	r7, #32
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c52:	4013      	ands	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d118      	bne.n	8006c8e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d013      	beq.n	8006c8e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d009      	beq.n	8006c8e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 81fb 	beq.w	800707a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
      }
      return;
 8006c8c:	e1f5      	b.n	800707a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80ef 	beq.w	8006e74 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4b73      	ldr	r3, [pc, #460]	; (8006e68 <HAL_UART_IRQHandler+0x23c>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d105      	bne.n	8006cac <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	4b72      	ldr	r3, [pc, #456]	; (8006e6c <HAL_UART_IRQHandler+0x240>)
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 80e4 	beq.w	8006e74 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d010      	beq.n	8006cd8 <HAL_UART_IRQHandler+0xac>
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cce:	f043 0201 	orr.w	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d010      	beq.n	8006d04 <HAL_UART_IRQHandler+0xd8>
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfa:	f043 0204 	orr.w	r2, r3, #4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d010      	beq.n	8006d30 <HAL_UART_IRQHandler+0x104>
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d26:	f043 0202 	orr.w	r2, r3, #2
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d015      	beq.n	8006d66 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f003 0320 	and.w	r3, r3, #32
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4b48      	ldr	r3, [pc, #288]	; (8006e68 <HAL_UART_IRQHandler+0x23c>)
 8006d48:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00b      	beq.n	8006d66 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2208      	movs	r2, #8
 8006d54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5c:	f043 0208 	orr.w	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d011      	beq.n	8006d94 <HAL_UART_IRQHandler+0x168>
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00c      	beq.n	8006d94 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d8a:	f043 0220 	orr.w	r2, r3, #32
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 816f 	beq.w	800707e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d011      	beq.n	8006dce <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dd4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d004      	beq.n	8006dee <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d031      	beq.n	8006e52 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fc1b 	bl	800762a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfe:	2b40      	cmp	r3, #64	; 0x40
 8006e00:	d123      	bne.n	8006e4a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e10:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d013      	beq.n	8006e42 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e1e:	4a14      	ldr	r2, [pc, #80]	; (8006e70 <HAL_UART_IRQHandler+0x244>)
 8006e20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fd f9dc 	bl	80041e4 <HAL_DMA_Abort_IT>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d017      	beq.n	8006e62 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	e00f      	b.n	8006e62 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f930 	bl	80070a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e48:	e00b      	b.n	8006e62 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f92c 	bl	80070a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e50:	e007      	b.n	8006e62 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f928 	bl	80070a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006e60:	e10d      	b.n	800707e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e62:	bf00      	nop
    return;
 8006e64:	e10b      	b.n	800707e <HAL_UART_IRQHandler+0x452>
 8006e66:	bf00      	nop
 8006e68:	10000001 	.word	0x10000001
 8006e6c:	04000120 	.word	0x04000120
 8006e70:	0800768f 	.word	0x0800768f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	f040 80ab 	bne.w	8006fd4 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 80a5 	beq.w	8006fd4 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	f003 0310 	and.w	r3, r3, #16
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 809f 	beq.w	8006fd4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2210      	movs	r2, #16
 8006e9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d155      	bne.n	8006f58 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006eb6:	893b      	ldrh	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 80e2 	beq.w	8007082 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ec4:	893a      	ldrh	r2, [r7, #8]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	f080 80db 	bcs.w	8007082 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	893a      	ldrh	r2, [r7, #8]
 8006ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d12b      	bne.n	8006f3c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ef2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f12:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 0210 	bic.w	r2, r2, #16
 8006f30:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fd f8f5 	bl	8004126 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f8b3 	bl	80070bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006f56:	e094      	b.n	8007082 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8087 	beq.w	8007086 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8006f78:	897b      	ldrh	r3, [r7, #10]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8083 	beq.w	8007086 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f8e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	f023 0301 	bic.w	r3, r3, #1
 8006fa2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0210 	bic.w	r2, r2, #16
 8006fc6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fc8:	897b      	ldrh	r3, [r7, #10]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f875 	bl	80070bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006fd2:	e058      	b.n	8007086 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00d      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3ce>
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ff0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb7b 	bl	80076ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ff8:	e048      	b.n	800708c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007000:	2b00      	cmp	r3, #0
 8007002:	d012      	beq.n	800702a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d008      	beq.n	800702a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800701c:	2b00      	cmp	r3, #0
 800701e:	d034      	beq.n	800708a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
    }
    return;
 8007028:	e02f      	b.n	800708a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <HAL_UART_IRQHandler+0x41a>
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fb3b 	bl	80076ba <UART_EndTransmit_IT>
    return;
 8007044:	e022      	b.n	800708c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d008      	beq.n	8007062 <HAL_UART_IRQHandler+0x436>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fb5b 	bl	8007716 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007060:	e014      	b.n	800708c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00f      	beq.n	800708c <HAL_UART_IRQHandler+0x460>
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	da0c      	bge.n	800708c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fb45 	bl	8007702 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007078:	e008      	b.n	800708c <HAL_UART_IRQHandler+0x460>
      return;
 800707a:	bf00      	nop
 800707c:	e006      	b.n	800708c <HAL_UART_IRQHandler+0x460>
    return;
 800707e:	bf00      	nop
 8007080:	e004      	b.n	800708c <HAL_UART_IRQHandler+0x460>
      return;
 8007082:	bf00      	nop
 8007084:	e002      	b.n	800708c <HAL_UART_IRQHandler+0x460>
      return;
 8007086:	bf00      	nop
 8007088:	e000      	b.n	800708c <HAL_UART_IRQHandler+0x460>
    return;
 800708a:	bf00      	nop
  }
}
 800708c:	3720      	adds	r7, #32
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop

08007094 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b90      	ldr	r3, [pc, #576]	; (8007340 <UART_SetConfig+0x26c>)
 8007100:	4013      	ands	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6812      	ldr	r2, [r2, #0]
 8007106:	6979      	ldr	r1, [r7, #20]
 8007108:	430b      	orrs	r3, r1
 800710a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	617b      	str	r3, [r7, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4313      	orrs	r3, r2
 8007130:	617b      	str	r3, [r7, #20]
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800713c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	6979      	ldr	r1, [r7, #20]
 8007146:	430b      	orrs	r3, r1
 8007148:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	f023 010f 	bic.w	r1, r3, #15
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a77      	ldr	r2, [pc, #476]	; (8007344 <UART_SetConfig+0x270>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d11f      	bne.n	80071aa <UART_SetConfig+0xd6>
 800716a:	2003      	movs	r0, #3
 800716c:	f7ff fc68 	bl	8006a40 <LL_RCC_GetUSARTClockSource>
 8007170:	4603      	mov	r3, r0
 8007172:	2b03      	cmp	r3, #3
 8007174:	d816      	bhi.n	80071a4 <UART_SetConfig+0xd0>
 8007176:	a201      	add	r2, pc, #4	; (adr r2, 800717c <UART_SetConfig+0xa8>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	0800718d 	.word	0x0800718d
 8007180:	08007199 	.word	0x08007199
 8007184:	08007193 	.word	0x08007193
 8007188:	0800719f 	.word	0x0800719f
 800718c:	2301      	movs	r3, #1
 800718e:	77fb      	strb	r3, [r7, #31]
 8007190:	e00d      	b.n	80071ae <UART_SetConfig+0xda>
 8007192:	2302      	movs	r3, #2
 8007194:	77fb      	strb	r3, [r7, #31]
 8007196:	e00a      	b.n	80071ae <UART_SetConfig+0xda>
 8007198:	2304      	movs	r3, #4
 800719a:	77fb      	strb	r3, [r7, #31]
 800719c:	e007      	b.n	80071ae <UART_SetConfig+0xda>
 800719e:	2308      	movs	r3, #8
 80071a0:	77fb      	strb	r3, [r7, #31]
 80071a2:	e004      	b.n	80071ae <UART_SetConfig+0xda>
 80071a4:	2310      	movs	r3, #16
 80071a6:	77fb      	strb	r3, [r7, #31]
 80071a8:	e001      	b.n	80071ae <UART_SetConfig+0xda>
 80071aa:	2310      	movs	r3, #16
 80071ac:	77fb      	strb	r3, [r7, #31]
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b6:	d160      	bne.n	800727a <UART_SetConfig+0x1a6>
#endif /* LPUART1 */
  {
    switch (clocksource)
 80071b8:	7ffb      	ldrb	r3, [r7, #31]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	2b07      	cmp	r3, #7
 80071be:	d822      	bhi.n	8007206 <UART_SetConfig+0x132>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <UART_SetConfig+0xf4>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071e9 	.word	0x080071e9
 80071cc:	080071f1 	.word	0x080071f1
 80071d0:	08007207 	.word	0x08007207
 80071d4:	080071f7 	.word	0x080071f7
 80071d8:	08007207 	.word	0x08007207
 80071dc:	08007207 	.word	0x08007207
 80071e0:	08007207 	.word	0x08007207
 80071e4:	080071ff 	.word	0x080071ff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e8:	f7fe fc80 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 80071ec:	61b8      	str	r0, [r7, #24]
        break;
 80071ee:	e00f      	b.n	8007210 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071f0:	4b55      	ldr	r3, [pc, #340]	; (8007348 <UART_SetConfig+0x274>)
 80071f2:	61bb      	str	r3, [r7, #24]
        break;
 80071f4:	e00c      	b.n	8007210 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f6:	f7fe fbf9 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 80071fa:	61b8      	str	r0, [r7, #24]
        break;
 80071fc:	e008      	b.n	8007210 <UART_SetConfig+0x13c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007202:	61bb      	str	r3, [r7, #24]
        break;
 8007204:	e004      	b.n	8007210 <UART_SetConfig+0x13c>
      default:
        pclk = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	77bb      	strb	r3, [r7, #30]
        break;
 800720e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8080 	beq.w	8007318 <UART_SetConfig+0x244>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	4a4b      	ldr	r2, [pc, #300]	; (800734c <UART_SetConfig+0x278>)
 800721e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007222:	461a      	mov	r2, r3
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	fbb3 f3f2 	udiv	r3, r3, r2
 800722a:	005a      	lsls	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	441a      	add	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	fbb2 f3f3 	udiv	r3, r2, r3
 800723c:	b29b      	uxth	r3, r3
 800723e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2b0f      	cmp	r3, #15
 8007244:	d916      	bls.n	8007274 <UART_SetConfig+0x1a0>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724c:	d212      	bcs.n	8007274 <UART_SetConfig+0x1a0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	b29b      	uxth	r3, r3
 8007252:	f023 030f 	bic.w	r3, r3, #15
 8007256:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	085b      	lsrs	r3, r3, #1
 800725c:	b29b      	uxth	r3, r3
 800725e:	f003 0307 	and.w	r3, r3, #7
 8007262:	b29a      	uxth	r2, r3
 8007264:	89fb      	ldrh	r3, [r7, #14]
 8007266:	4313      	orrs	r3, r2
 8007268:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	89fa      	ldrh	r2, [r7, #14]
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	e051      	b.n	8007318 <UART_SetConfig+0x244>
      }
      else
      {
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	77bb      	strb	r3, [r7, #30]
 8007278:	e04e      	b.n	8007318 <UART_SetConfig+0x244>
      }
    }
  }
  else
  {
    switch (clocksource)
 800727a:	7ffb      	ldrb	r3, [r7, #31]
 800727c:	3b01      	subs	r3, #1
 800727e:	2b07      	cmp	r3, #7
 8007280:	d821      	bhi.n	80072c6 <UART_SetConfig+0x1f2>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <UART_SetConfig+0x1b4>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072a9 	.word	0x080072a9
 800728c:	080072b1 	.word	0x080072b1
 8007290:	080072c7 	.word	0x080072c7
 8007294:	080072b7 	.word	0x080072b7
 8007298:	080072c7 	.word	0x080072c7
 800729c:	080072c7 	.word	0x080072c7
 80072a0:	080072c7 	.word	0x080072c7
 80072a4:	080072bf 	.word	0x080072bf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a8:	f7fe fc20 	bl	8005aec <HAL_RCC_GetPCLK2Freq>
 80072ac:	61b8      	str	r0, [r7, #24]
        break;
 80072ae:	e00f      	b.n	80072d0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b0:	4b25      	ldr	r3, [pc, #148]	; (8007348 <UART_SetConfig+0x274>)
 80072b2:	61bb      	str	r3, [r7, #24]
        break;
 80072b4:	e00c      	b.n	80072d0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b6:	f7fe fb99 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 80072ba:	61b8      	str	r0, [r7, #24]
        break;
 80072bc:	e008      	b.n	80072d0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c2:	61bb      	str	r3, [r7, #24]
        break;
 80072c4:	e004      	b.n	80072d0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	77bb      	strb	r3, [r7, #30]
        break;
 80072ce:	bf00      	nop
    }

    if (pclk != 0U)
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d020      	beq.n	8007318 <UART_SetConfig+0x244>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	4a1c      	ldr	r2, [pc, #112]	; (800734c <UART_SetConfig+0x278>)
 80072dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e0:	461a      	mov	r2, r3
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	441a      	add	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b0f      	cmp	r3, #15
 8007300:	d908      	bls.n	8007314 <UART_SetConfig+0x240>
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007308:	d204      	bcs.n	8007314 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = usartdiv;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	60da      	str	r2, [r3, #12]
 8007312:	e001      	b.n	8007318 <UART_SetConfig+0x244>
      }
      else
      {
        ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007334:	7fbb      	ldrb	r3, [r7, #30]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3720      	adds	r7, #32
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	cfff69f3 	.word	0xcfff69f3
 8007344:	40013800 	.word	0x40013800
 8007348:	00f42400 	.word	0x00f42400
 800734c:	0800adec 	.word	0x0800adec

08007350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	430a      	orrs	r2, r1
 800739a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	430a      	orrs	r2, r1
 80073bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	f003 0308 	and.w	r3, r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e4:	f003 0310 	and.w	r3, r3, #16
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01a      	beq.n	8007466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800744e:	d10a      	bne.n	8007466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	605a      	str	r2, [r3, #4]
  }
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af02      	add	r7, sp, #8
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074a4:	f7fb f9e6 	bl	8002874 <HAL_GetTick>
 80074a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d10e      	bne.n	80074d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074bc:	9300      	str	r3, [sp, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f82f 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e025      	b.n	8007522 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d10e      	bne.n	8007502 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f819 	bl	800752a <UART_WaitOnFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e00f      	b.n	8007522 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	603b      	str	r3, [r7, #0]
 8007536:	4613      	mov	r3, r2
 8007538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800753a:	e062      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d05e      	beq.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007544:	f7fb f996 	bl	8002874 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	429a      	cmp	r2, r3
 8007552:	d302      	bcc.n	800755a <UART_WaitOnFlagUntilTimeout+0x30>
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d11d      	bne.n	8007596 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007568:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0201 	bic.w	r2, r2, #1
 8007578:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e045      	b.n	8007622 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d02e      	beq.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075b2:	d126      	bne.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0201 	bic.w	r2, r2, #1
 80075dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e00f      	b.n	8007622 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69da      	ldr	r2, [r3, #28]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4013      	ands	r3, r2
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	429a      	cmp	r2, r3
 8007610:	bf0c      	ite	eq
 8007612:	2301      	moveq	r3, #1
 8007614:	2300      	movne	r3, #0
 8007616:	b2db      	uxtb	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	429a      	cmp	r2, r3
 800761e:	d08d      	beq.n	800753c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007640:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6812      	ldr	r2, [r2, #0]
 800764c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007650:	f023 0301 	bic.w	r3, r3, #1
 8007654:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800765a:	2b01      	cmp	r3, #1
 800765c:	d107      	bne.n	800766e <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0210 	bic.w	r2, r2, #16
 800766c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7ff fcfb 	bl	80070a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2220      	movs	r2, #32
 80076d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff fcd7 	bl	8007094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076e6:	bf00      	nop
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007716:	b480      	push	{r7}
 8007718:	b083      	sub	sp, #12
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_UARTEx_DisableFifoMode+0x16>
 800773c:	2302      	movs	r3, #2
 800773e:	e027      	b.n	8007790 <HAL_UARTEx_DisableFifoMode+0x66>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2224      	movs	r2, #36	; 0x24
 800774c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0201 	bic.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800776e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d101      	bne.n	80077b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e02d      	b.n	8007810 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2224      	movs	r2, #36	; 0x24
 80077c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 0201 	bic.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f84f 	bl	8007894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800782c:	2302      	movs	r3, #2
 800782e:	e02d      	b.n	800788c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2224      	movs	r2, #36	; 0x24
 800783c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0201 	bic.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f811 	bl	8007894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d108      	bne.n	80078b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078b4:	e031      	b.n	800791a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078b6:	2308      	movs	r3, #8
 80078b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078ba:	2308      	movs	r3, #8
 80078bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	0e5b      	lsrs	r3, r3, #25
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	0f5b      	lsrs	r3, r3, #29
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	f003 0307 	and.w	r3, r3, #7
 80078dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	7b3a      	ldrb	r2, [r7, #12]
 80078e2:	4911      	ldr	r1, [pc, #68]	; (8007928 <UARTEx_SetNbDataToProcess+0x94>)
 80078e4:	5c8a      	ldrb	r2, [r1, r2]
 80078e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ea:	7b3a      	ldrb	r2, [r7, #12]
 80078ec:	490f      	ldr	r1, [pc, #60]	; (800792c <UARTEx_SetNbDataToProcess+0x98>)
 80078ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	7b7a      	ldrb	r2, [r7, #13]
 8007900:	4909      	ldr	r1, [pc, #36]	; (8007928 <UARTEx_SetNbDataToProcess+0x94>)
 8007902:	5c8a      	ldrb	r2, [r1, r2]
 8007904:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007908:	7b7a      	ldrb	r2, [r7, #13]
 800790a:	4908      	ldr	r1, [pc, #32]	; (800792c <UARTEx_SetNbDataToProcess+0x98>)
 800790c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800790e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	0800ae04 	.word	0x0800ae04
 800792c:	0800ae0c 	.word	0x0800ae0c

08007930 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800793a:	f107 0308 	add.w	r3, r7, #8
 800793e:	2218      	movs	r2, #24
 8007940:	2100      	movs	r1, #0
 8007942:	4618      	mov	r0, r3
 8007944:	f000 ff45 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007948:	233f      	movs	r3, #63	; 0x3f
 800794a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800794c:	2381      	movs	r3, #129	; 0x81
 800794e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007950:	1dfb      	adds	r3, r7, #7
 8007952:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007954:	2301      	movs	r3, #1
 8007956:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007958:	f107 0308 	add.w	r3, r7, #8
 800795c:	2100      	movs	r1, #0
 800795e:	4618      	mov	r0, r3
 8007960:	f001 fa1a 	bl	8008d98 <hci_send_req>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	da01      	bge.n	800796e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800796a:	23ff      	movs	r3, #255	; 0xff
 800796c:	e000      	b.n	8007970 <aci_gap_set_non_discoverable+0x40>
  return status;
 800796e:	79fb      	ldrb	r3, [r7, #7]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3720      	adds	r7, #32
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007978:	b5b0      	push	{r4, r5, r7, lr}
 800797a:	b0ce      	sub	sp, #312	; 0x138
 800797c:	af00      	add	r7, sp, #0
 800797e:	4605      	mov	r5, r0
 8007980:	460c      	mov	r4, r1
 8007982:	4610      	mov	r0, r2
 8007984:	4619      	mov	r1, r3
 8007986:	1dfb      	adds	r3, r7, #7
 8007988:	462a      	mov	r2, r5
 800798a:	701a      	strb	r2, [r3, #0]
 800798c:	1d3b      	adds	r3, r7, #4
 800798e:	4622      	mov	r2, r4
 8007990:	801a      	strh	r2, [r3, #0]
 8007992:	1cbb      	adds	r3, r7, #2
 8007994:	4602      	mov	r2, r0
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	1dbb      	adds	r3, r7, #6
 800799a:	460a      	mov	r2, r1
 800799c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800799e:	f107 0310 	add.w	r3, r7, #16
 80079a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80079a6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80079aa:	3308      	adds	r3, #8
 80079ac:	f107 0210 	add.w	r2, r7, #16
 80079b0:	4413      	add	r3, r2
 80079b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80079b6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80079ba:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80079be:	4413      	add	r3, r2
 80079c0:	3309      	adds	r3, #9
 80079c2:	f107 0210 	add.w	r2, r7, #16
 80079c6:	4413      	add	r3, r2
 80079c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079cc:	f107 030f 	add.w	r3, r7, #15
 80079d0:	2200      	movs	r2, #0
 80079d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80079da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079de:	1dfa      	adds	r2, r7, #7
 80079e0:	7812      	ldrb	r2, [r2, #0]
 80079e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079e8:	3301      	adds	r3, #1
 80079ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80079ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079f2:	1d3a      	adds	r2, r7, #4
 80079f4:	8812      	ldrh	r2, [r2, #0]
 80079f6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80079fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079fe:	3302      	adds	r3, #2
 8007a00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007a04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a08:	1cba      	adds	r2, r7, #2
 8007a0a:	8812      	ldrh	r2, [r2, #0]
 8007a0c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a14:	3302      	adds	r3, #2
 8007a16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007a1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a1e:	1dba      	adds	r2, r7, #6
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a28:	3301      	adds	r3, #1
 8007a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a32:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007a36:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007a38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a46:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007a4a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a50:	3301      	adds	r3, #1
 8007a52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007a60:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fea4 	bl	80087b2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007a6a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007a6e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007a72:	4413      	add	r3, r2
 8007a74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a7c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007a80:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007a82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a86:	3301      	adds	r3, #1
 8007a88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007a8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a90:	3301      	adds	r3, #1
 8007a92:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007a96:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fe89 	bl	80087b2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007aa0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007aa4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007ab6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007abc:	3302      	adds	r3, #2
 8007abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007aca:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ad0:	3302      	adds	r3, #2
 8007ad2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ad6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ada:	2218      	movs	r2, #24
 8007adc:	2100      	movs	r1, #0
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fe77 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ae4:	233f      	movs	r3, #63	; 0x3f
 8007ae6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007aea:	2383      	movs	r3, #131	; 0x83
 8007aec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007af0:	f107 0310 	add.w	r3, r7, #16
 8007af4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007af8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007afc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b00:	f107 030f 	add.w	r3, r7, #15
 8007b04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b12:	2100      	movs	r1, #0
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 f93f 	bl	8008d98 <hci_send_req>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	da01      	bge.n	8007b24 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007b20:	23ff      	movs	r3, #255	; 0xff
 8007b22:	e002      	b.n	8007b2a <aci_gap_set_discoverable+0x1b2>
  return status;
 8007b24:	f107 030f 	add.w	r3, r7, #15
 8007b28:	781b      	ldrb	r3, [r3, #0]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bdb0      	pop	{r4, r5, r7, pc}

08007b34 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b0cc      	sub	sp, #304	; 0x130
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	1dfb      	adds	r3, r7, #7
 8007b3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007b40:	f107 0310 	add.w	r3, r7, #16
 8007b44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b48:	f107 030f 	add.w	r3, r7, #15
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007b56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b5a:	1dfa      	adds	r2, r7, #7
 8007b5c:	7812      	ldrb	r2, [r2, #0]
 8007b5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b64:	3301      	adds	r3, #1
 8007b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b6e:	2218      	movs	r2, #24
 8007b70:	2100      	movs	r1, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 fe2d 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b78:	233f      	movs	r3, #63	; 0x3f
 8007b7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007b7e:	2385      	movs	r3, #133	; 0x85
 8007b80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b84:	f107 0310 	add.w	r3, r7, #16
 8007b88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b94:	f107 030f 	add.w	r3, r7, #15
 8007b98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ba2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 f8f5 	bl	8008d98 <hci_send_req>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	da01      	bge.n	8007bb8 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007bb4:	23ff      	movs	r3, #255	; 0xff
 8007bb6:	e002      	b.n	8007bbe <aci_gap_set_io_capability+0x8a>
  return status;
 8007bb8:	f107 030f 	add.w	r3, r7, #15
 8007bbc:	781b      	ldrb	r3, [r3, #0]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007bc8:	b5b0      	push	{r4, r5, r7, lr}
 8007bca:	b0cc      	sub	sp, #304	; 0x130
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4605      	mov	r5, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	1dfb      	adds	r3, r7, #7
 8007bd8:	462a      	mov	r2, r5
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	1dbb      	adds	r3, r7, #6
 8007bde:	4622      	mov	r2, r4
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	1d7b      	adds	r3, r7, #5
 8007be4:	4602      	mov	r2, r0
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	1d3b      	adds	r3, r7, #4
 8007bea:	460a      	mov	r2, r1
 8007bec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007bee:	f107 0310 	add.w	r3, r7, #16
 8007bf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007bf6:	f107 030f 	add.w	r3, r7, #15
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c08:	1dfa      	adds	r2, r7, #7
 8007c0a:	7812      	ldrb	r2, [r2, #0]
 8007c0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c12:	3301      	adds	r3, #1
 8007c14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1c:	1dba      	adds	r2, r7, #6
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c26:	3301      	adds	r3, #1
 8007c28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c30:	1d7a      	adds	r2, r7, #5
 8007c32:	7812      	ldrb	r2, [r2, #0]
 8007c34:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c44:	1d3a      	adds	r2, r7, #4
 8007c46:	7812      	ldrb	r2, [r2, #0]
 8007c48:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007c4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c4e:	3301      	adds	r3, #1
 8007c50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c58:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007c5c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c62:	3301      	adds	r3, #1
 8007c64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007c70:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c76:	3301      	adds	r3, #1
 8007c78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c80:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007c84:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007c86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c94:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007c98:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007caa:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007cae:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007cb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cbe:	2218      	movs	r2, #24
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fd85 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cc8:	233f      	movs	r3, #63	; 0x3f
 8007cca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007cce:	2386      	movs	r3, #134	; 0x86
 8007cd0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007cd4:	f107 0310 	add.w	r3, r7, #16
 8007cd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ce0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ce4:	f107 030f 	add.w	r3, r7, #15
 8007ce8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007cec:	2301      	movs	r3, #1
 8007cee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f001 f84d 	bl	8008d98 <hci_send_req>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da01      	bge.n	8007d08 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007d04:	23ff      	movs	r3, #255	; 0xff
 8007d06:	e002      	b.n	8007d0e <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007d08:	f107 030f 	add.w	r3, r7, #15
 8007d0c:	781b      	ldrb	r3, [r3, #0]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bdb0      	pop	{r4, r5, r7, pc}

08007d18 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b0cd      	sub	sp, #308	; 0x134
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	4611      	mov	r1, r2
 8007d24:	463a      	mov	r2, r7
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	1dfb      	adds	r3, r7, #7
 8007d2a:	4622      	mov	r2, r4
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	1dbb      	adds	r3, r7, #6
 8007d30:	4602      	mov	r2, r0
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	1d7b      	adds	r3, r7, #5
 8007d36:	460a      	mov	r2, r1
 8007d38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007d3a:	f107 0310 	add.w	r3, r7, #16
 8007d3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007d42:	f107 0308 	add.w	r3, r7, #8
 8007d46:	2207      	movs	r2, #7
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 fd41 	bl	80087d2 <Osal_MemSet>
  int index_input = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5a:	1dfa      	adds	r2, r7, #7
 8007d5c:	7812      	ldrb	r2, [r2, #0]
 8007d5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d64:	3301      	adds	r3, #1
 8007d66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d6e:	1dba      	adds	r2, r7, #6
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d78:	3301      	adds	r3, #1
 8007d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d82:	1d7a      	adds	r2, r7, #5
 8007d84:	7812      	ldrb	r2, [r2, #0]
 8007d86:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d96:	2218      	movs	r2, #24
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fd19 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007da0:	233f      	movs	r3, #63	; 0x3f
 8007da2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007da6:	238a      	movs	r3, #138	; 0x8a
 8007da8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007dac:	f107 0310 	add.w	r3, r7, #16
 8007db0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007db8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007dbc:	f107 0308 	add.w	r3, r7, #8
 8007dc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007dc4:	2307      	movs	r3, #7
 8007dc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007dca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007dce:	2100      	movs	r1, #0
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 ffe1 	bl	8008d98 <hci_send_req>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	da01      	bge.n	8007de0 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007ddc:	23ff      	movs	r3, #255	; 0xff
 8007dde:	e021      	b.n	8007e24 <aci_gap_init+0x10c>
  if ( resp.Status )
 8007de0:	f107 0308 	add.w	r3, r7, #8
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <aci_gap_init+0xda>
    return resp.Status;
 8007dea:	f107 0308 	add.w	r3, r7, #8
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	e018      	b.n	8007e24 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8007df2:	f107 0308 	add.w	r3, r7, #8
 8007df6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	463b      	mov	r3, r7
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007e02:	f107 0308 	add.w	r3, r7, #8
 8007e06:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007e10:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007e12:	f107 0308 	add.w	r3, r7, #8
 8007e16:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007e20:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd90      	pop	{r4, r7, pc}

08007e2e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b0cc      	sub	sp, #304	; 0x130
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	4602      	mov	r2, r0
 8007e36:	463b      	mov	r3, r7
 8007e38:	6019      	str	r1, [r3, #0]
 8007e3a:	1dfb      	adds	r3, r7, #7
 8007e3c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007e3e:	f107 0310 	add.w	r3, r7, #16
 8007e42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e46:	f107 030f 	add.w	r3, r7, #15
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e58:	1dfa      	adds	r2, r7, #7
 8007e5a:	7812      	ldrb	r2, [r2, #0]
 8007e5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e62:	3301      	adds	r3, #1
 8007e64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6c:	1c58      	adds	r0, r3, #1
 8007e6e:	1dfb      	adds	r3, r7, #7
 8007e70:	781a      	ldrb	r2, [r3, #0]
 8007e72:	463b      	mov	r3, r7
 8007e74:	6819      	ldr	r1, [r3, #0]
 8007e76:	f000 fc9c 	bl	80087b2 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007e7a:	1dfb      	adds	r3, r7, #7
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007e82:	4413      	add	r3, r2
 8007e84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e8c:	2218      	movs	r2, #24
 8007e8e:	2100      	movs	r1, #0
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 fc9e 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e96:	233f      	movs	r3, #63	; 0x3f
 8007e98:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007e9c:	238e      	movs	r3, #142	; 0x8e
 8007e9e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ea2:	f107 0310 	add.w	r3, r7, #16
 8007ea6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007eaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007eb2:	f107 030f 	add.w	r3, r7, #15
 8007eb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ec0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 ff66 	bl	8008d98 <hci_send_req>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da01      	bge.n	8007ed6 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8007ed2:	23ff      	movs	r3, #255	; 0xff
 8007ed4:	e002      	b.n	8007edc <aci_gap_update_adv_data+0xae>
  return status;
 8007ed6:	f107 030f 	add.w	r3, r7, #15
 8007eda:	781b      	ldrb	r3, [r3, #0]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b088      	sub	sp, #32
 8007eea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ef0:	f107 0308 	add.w	r3, r7, #8
 8007ef4:	2218      	movs	r2, #24
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fc6a 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007efe:	233f      	movs	r3, #63	; 0x3f
 8007f00:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007f02:	2392      	movs	r3, #146	; 0x92
 8007f04:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007f06:	1dfb      	adds	r3, r7, #7
 8007f08:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f0e:	f107 0308 	add.w	r3, r7, #8
 8007f12:	2100      	movs	r1, #0
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 ff3f 	bl	8008d98 <hci_send_req>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	da01      	bge.n	8007f24 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007f20:	23ff      	movs	r3, #255	; 0xff
 8007f22:	e000      	b.n	8007f26 <aci_gap_configure_whitelist+0x40>
  return status;
 8007f24:	79fb      	ldrb	r3, [r7, #7]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3720      	adds	r7, #32
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b088      	sub	sp, #32
 8007f32:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f38:	f107 0308 	add.w	r3, r7, #8
 8007f3c:	2218      	movs	r2, #24
 8007f3e:	2100      	movs	r1, #0
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fc46 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f46:	233f      	movs	r3, #63	; 0x3f
 8007f48:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007f4a:	f240 1301 	movw	r3, #257	; 0x101
 8007f4e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007f50:	1dfb      	adds	r3, r7, #7
 8007f52:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007f54:	2301      	movs	r3, #1
 8007f56:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f58:	f107 0308 	add.w	r3, r7, #8
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 ff1a 	bl	8008d98 <hci_send_req>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	da01      	bge.n	8007f6e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007f6a:	23ff      	movs	r3, #255	; 0xff
 8007f6c:	e000      	b.n	8007f70 <aci_gatt_init+0x42>
  return status;
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3720      	adds	r7, #32
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b0cf      	sub	sp, #316	; 0x13c
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4638      	mov	r0, r7
 8007f82:	6001      	str	r1, [r0, #0]
 8007f84:	4610      	mov	r0, r2
 8007f86:	4619      	mov	r1, r3
 8007f88:	1dfb      	adds	r3, r7, #7
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	1dbb      	adds	r3, r7, #6
 8007f90:	4602      	mov	r2, r0
 8007f92:	701a      	strb	r2, [r3, #0]
 8007f94:	1d7b      	adds	r3, r7, #5
 8007f96:	460a      	mov	r2, r1
 8007f98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007f9a:	f107 0310 	add.w	r3, r7, #16
 8007f9e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007fa2:	1dfb      	adds	r3, r7, #7
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d007      	beq.n	8007fba <aci_gatt_add_service+0x42>
 8007faa:	1dfb      	adds	r3, r7, #7
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d101      	bne.n	8007fb6 <aci_gatt_add_service+0x3e>
 8007fb2:	2311      	movs	r3, #17
 8007fb4:	e002      	b.n	8007fbc <aci_gatt_add_service+0x44>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <aci_gatt_add_service+0x44>
 8007fba:	2303      	movs	r3, #3
 8007fbc:	f107 0210 	add.w	r2, r7, #16
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007fc6:	f107 030c 	add.w	r3, r7, #12
 8007fca:	2203      	movs	r2, #3
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fbff 	bl	80087d2 <Osal_MemSet>
  int index_input = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007fda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fde:	1dfa      	adds	r2, r7, #7
 8007fe0:	7812      	ldrb	r2, [r2, #0]
 8007fe2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fe8:	3301      	adds	r3, #1
 8007fea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007fee:	1dfb      	adds	r3, r7, #7
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d002      	beq.n	8007ffc <aci_gatt_add_service+0x84>
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d004      	beq.n	8008004 <aci_gatt_add_service+0x8c>
 8007ffa:	e007      	b.n	800800c <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008002:	e005      	b.n	8008010 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8008004:	2310      	movs	r3, #16
 8008006:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800800a:	e001      	b.n	8008010 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800800c:	2347      	movs	r3, #71	; 0x47
 800800e:	e05d      	b.n	80080cc <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008010:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008014:	1c58      	adds	r0, r3, #1
 8008016:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800801a:	463b      	mov	r3, r7
 800801c:	6819      	ldr	r1, [r3, #0]
 800801e:	f000 fbc8 	bl	80087b2 <Osal_MemCpy>
    index_input += size;
 8008022:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008026:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800802a:	4413      	add	r3, r2
 800802c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008034:	1dba      	adds	r2, r7, #6
 8008036:	7812      	ldrb	r2, [r2, #0]
 8008038:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800803a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800803e:	3301      	adds	r3, #1
 8008040:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008048:	1d7a      	adds	r2, r7, #5
 800804a:	7812      	ldrb	r2, [r2, #0]
 800804c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800804e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008052:	3301      	adds	r3, #1
 8008054:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008058:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800805c:	2218      	movs	r2, #24
 800805e:	2100      	movs	r1, #0
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fbb6 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008066:	233f      	movs	r3, #63	; 0x3f
 8008068:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800806c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008070:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008074:	f107 0310 	add.w	r3, r7, #16
 8008078:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800807c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008080:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800808c:	2303      	movs	r3, #3
 800808e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008092:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008096:	2100      	movs	r1, #0
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fe7d 	bl	8008d98 <hci_send_req>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	da01      	bge.n	80080a8 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80080a4:	23ff      	movs	r3, #255	; 0xff
 80080a6:	e011      	b.n	80080cc <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80080a8:	f107 030c 	add.w	r3, r7, #12
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <aci_gatt_add_service+0x142>
    return resp.Status;
 80080b2:	f107 030c 	add.w	r3, r7, #12
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	e008      	b.n	80080cc <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80080ba:	f107 030c 	add.w	r3, r7, #12
 80080be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80080c8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd90      	pop	{r4, r7, pc}

080080d6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80080d6:	b590      	push	{r4, r7, lr}
 80080d8:	b0d1      	sub	sp, #324	; 0x144
 80080da:	af00      	add	r7, sp, #0
 80080dc:	4604      	mov	r4, r0
 80080de:	4608      	mov	r0, r1
 80080e0:	f107 0108 	add.w	r1, r7, #8
 80080e4:	600a      	str	r2, [r1, #0]
 80080e6:	4619      	mov	r1, r3
 80080e8:	f107 030e 	add.w	r3, r7, #14
 80080ec:	4622      	mov	r2, r4
 80080ee:	801a      	strh	r2, [r3, #0]
 80080f0:	f107 030d 	add.w	r3, r7, #13
 80080f4:	4602      	mov	r2, r0
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	1dbb      	adds	r3, r7, #6
 80080fa:	460a      	mov	r2, r1
 80080fc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80080fe:	f107 0318 	add.w	r3, r7, #24
 8008102:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008106:	f107 030d 	add.w	r3, r7, #13
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d008      	beq.n	8008122 <aci_gatt_add_char+0x4c>
 8008110:	f107 030d 	add.w	r3, r7, #13
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d101      	bne.n	800811e <aci_gatt_add_char+0x48>
 800811a:	2313      	movs	r3, #19
 800811c:	e002      	b.n	8008124 <aci_gatt_add_char+0x4e>
 800811e:	2303      	movs	r3, #3
 8008120:	e000      	b.n	8008124 <aci_gatt_add_char+0x4e>
 8008122:	2305      	movs	r3, #5
 8008124:	f107 0218 	add.w	r2, r7, #24
 8008128:	4413      	add	r3, r2
 800812a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800812e:	f107 0314 	add.w	r3, r7, #20
 8008132:	2203      	movs	r2, #3
 8008134:	2100      	movs	r1, #0
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fb4b 	bl	80087d2 <Osal_MemSet>
  int index_input = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008142:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008146:	f107 020e 	add.w	r2, r7, #14
 800814a:	8812      	ldrh	r2, [r2, #0]
 800814c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800814e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008152:	3302      	adds	r3, #2
 8008154:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008158:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800815c:	f107 020d 	add.w	r2, r7, #13
 8008160:	7812      	ldrb	r2, [r2, #0]
 8008162:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008164:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008168:	3301      	adds	r3, #1
 800816a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800816e:	f107 030d 	add.w	r3, r7, #13
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d002      	beq.n	800817e <aci_gatt_add_char+0xa8>
 8008178:	2b02      	cmp	r3, #2
 800817a:	d004      	beq.n	8008186 <aci_gatt_add_char+0xb0>
 800817c:	e007      	b.n	800818e <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800817e:	2302      	movs	r3, #2
 8008180:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008184:	e005      	b.n	8008192 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8008186:	2310      	movs	r3, #16
 8008188:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800818c:	e001      	b.n	8008192 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800818e:	2347      	movs	r3, #71	; 0x47
 8008190:	e086      	b.n	80082a0 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008192:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008196:	1cd8      	adds	r0, r3, #3
 8008198:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800819c:	f107 0308 	add.w	r3, r7, #8
 80081a0:	6819      	ldr	r1, [r3, #0]
 80081a2:	f000 fb06 	bl	80087b2 <Osal_MemCpy>
    index_input += size;
 80081a6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80081aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80081ae:	4413      	add	r3, r2
 80081b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80081b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081b8:	1dba      	adds	r2, r7, #6
 80081ba:	8812      	ldrh	r2, [r2, #0]
 80081bc:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80081be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081c2:	3302      	adds	r3, #2
 80081c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80081c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081cc:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80081d0:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80081d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081d6:	3301      	adds	r3, #1
 80081d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80081dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081e0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80081e4:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80081e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081ea:	3301      	adds	r3, #1
 80081ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80081f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081f4:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80081f8:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80081fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80081fe:	3301      	adds	r3, #1
 8008200:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008204:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008208:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800820c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800820e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008212:	3301      	adds	r3, #1
 8008214:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008218:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800821c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008220:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008222:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008226:	3301      	adds	r3, #1
 8008228:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800822c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008230:	2218      	movs	r2, #24
 8008232:	2100      	movs	r1, #0
 8008234:	4618      	mov	r0, r3
 8008236:	f000 facc 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800823a:	233f      	movs	r3, #63	; 0x3f
 800823c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008240:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008244:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008248:	f107 0318 	add.w	r3, r7, #24
 800824c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008250:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008254:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008258:	f107 0314 	add.w	r3, r7, #20
 800825c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008260:	2303      	movs	r3, #3
 8008262:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008266:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800826a:	2100      	movs	r1, #0
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fd93 	bl	8008d98 <hci_send_req>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	da01      	bge.n	800827c <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8008278:	23ff      	movs	r3, #255	; 0xff
 800827a:	e011      	b.n	80082a0 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800827c:	f107 0314 	add.w	r3, r7, #20
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8008286:	f107 0314 	add.w	r3, r7, #20
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	e008      	b.n	80082a0 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800828e:	f107 0314 	add.w	r3, r7, #20
 8008292:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008296:	b29a      	uxth	r2, r3
 8008298:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800829c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd90      	pop	{r4, r7, pc}

080082aa <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80082aa:	b5b0      	push	{r4, r5, r7, lr}
 80082ac:	b0cc      	sub	sp, #304	; 0x130
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	4605      	mov	r5, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	4610      	mov	r0, r2
 80082b6:	4619      	mov	r1, r3
 80082b8:	1dbb      	adds	r3, r7, #6
 80082ba:	462a      	mov	r2, r5
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	4622      	mov	r2, r4
 80082c2:	801a      	strh	r2, [r3, #0]
 80082c4:	1cfb      	adds	r3, r7, #3
 80082c6:	4602      	mov	r2, r0
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	1cbb      	adds	r3, r7, #2
 80082cc:	460a      	mov	r2, r1
 80082ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80082d0:	f107 0310 	add.w	r3, r7, #16
 80082d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80082d8:	f107 030f 	add.w	r3, r7, #15
 80082dc:	2200      	movs	r2, #0
 80082de:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80082e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ea:	1dba      	adds	r2, r7, #6
 80082ec:	8812      	ldrh	r2, [r2, #0]
 80082ee:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80082f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082f4:	3302      	adds	r3, #2
 80082f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80082fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fe:	1d3a      	adds	r2, r7, #4
 8008300:	8812      	ldrh	r2, [r2, #0]
 8008302:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008308:	3302      	adds	r3, #2
 800830a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800830e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008312:	1cfa      	adds	r2, r7, #3
 8008314:	7812      	ldrb	r2, [r2, #0]
 8008316:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800831c:	3301      	adds	r3, #1
 800831e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008326:	1cba      	adds	r2, r7, #2
 8008328:	7812      	ldrb	r2, [r2, #0]
 800832a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800832c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008330:	3301      	adds	r3, #1
 8008332:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833a:	1d98      	adds	r0, r3, #6
 800833c:	1cbb      	adds	r3, r7, #2
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008346:	f000 fa34 	bl	80087b2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800834a:	1cbb      	adds	r3, r7, #2
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008352:	4413      	add	r3, r2
 8008354:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008358:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800835c:	2218      	movs	r2, #24
 800835e:	2100      	movs	r1, #0
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fa36 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008366:	233f      	movs	r3, #63	; 0x3f
 8008368:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800836c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008370:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008374:	f107 0310 	add.w	r3, r7, #16
 8008378:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800837c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008380:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008384:	f107 030f 	add.w	r3, r7, #15
 8008388:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800838c:	2301      	movs	r3, #1
 800838e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008392:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008396:	2100      	movs	r1, #0
 8008398:	4618      	mov	r0, r3
 800839a:	f000 fcfd 	bl	8008d98 <hci_send_req>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	da01      	bge.n	80083a8 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80083a4:	23ff      	movs	r3, #255	; 0xff
 80083a6:	e002      	b.n	80083ae <aci_gatt_update_char_value+0x104>
  return status;
 80083a8:	f107 030f 	add.w	r3, r7, #15
 80083ac:	781b      	ldrb	r3, [r3, #0]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bdb0      	pop	{r4, r5, r7, pc}

080083b8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b0cc      	sub	sp, #304	; 0x130
 80083bc:	af00      	add	r7, sp, #0
 80083be:	463b      	mov	r3, r7
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	1dfb      	adds	r3, r7, #7
 80083c4:	4602      	mov	r2, r0
 80083c6:	701a      	strb	r2, [r3, #0]
 80083c8:	1dbb      	adds	r3, r7, #6
 80083ca:	460a      	mov	r2, r1
 80083cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80083ce:	f107 0310 	add.w	r3, r7, #16
 80083d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083d6:	f107 030f 	add.w	r3, r7, #15
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80083e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083e8:	1dfa      	adds	r2, r7, #7
 80083ea:	7812      	ldrb	r2, [r2, #0]
 80083ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80083ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083f2:	3301      	adds	r3, #1
 80083f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80083f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083fc:	1dba      	adds	r2, r7, #6
 80083fe:	7812      	ldrb	r2, [r2, #0]
 8008400:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008406:	3301      	adds	r3, #1
 8008408:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800840c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008410:	1c98      	adds	r0, r3, #2
 8008412:	1dbb      	adds	r3, r7, #6
 8008414:	781a      	ldrb	r2, [r3, #0]
 8008416:	463b      	mov	r3, r7
 8008418:	6819      	ldr	r1, [r3, #0]
 800841a:	f000 f9ca 	bl	80087b2 <Osal_MemCpy>
  index_input += Length;
 800841e:	1dbb      	adds	r3, r7, #6
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008426:	4413      	add	r3, r2
 8008428:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800842c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008430:	2218      	movs	r2, #24
 8008432:	2100      	movs	r1, #0
 8008434:	4618      	mov	r0, r3
 8008436:	f000 f9cc 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800843a:	233f      	movs	r3, #63	; 0x3f
 800843c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8008440:	230c      	movs	r3, #12
 8008442:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008446:	f107 0310 	add.w	r3, r7, #16
 800844a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800844e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008452:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008456:	f107 030f 	add.w	r3, r7, #15
 800845a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800845e:	2301      	movs	r3, #1
 8008460:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008464:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008468:	2100      	movs	r1, #0
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fc94 	bl	8008d98 <hci_send_req>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	da01      	bge.n	800847a <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008476:	23ff      	movs	r3, #255	; 0xff
 8008478:	e002      	b.n	8008480 <aci_hal_write_config_data+0xc8>
  return status;
 800847a:	f107 030f 	add.w	r3, r7, #15
 800847e:	781b      	ldrb	r3, [r3, #0]
}
 8008480:	4618      	mov	r0, r3
 8008482:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b0cc      	sub	sp, #304	; 0x130
 800848e:	af00      	add	r7, sp, #0
 8008490:	4602      	mov	r2, r0
 8008492:	1dfb      	adds	r3, r7, #7
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	1dbb      	adds	r3, r7, #6
 8008498:	460a      	mov	r2, r1
 800849a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800849c:	f107 0310 	add.w	r3, r7, #16
 80084a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80084a4:	f107 030f 	add.w	r3, r7, #15
 80084a8:	2200      	movs	r2, #0
 80084aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80084b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b6:	1dfa      	adds	r2, r7, #7
 80084b8:	7812      	ldrb	r2, [r2, #0]
 80084ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80084bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084c0:	3301      	adds	r3, #1
 80084c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80084c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084ca:	1dba      	adds	r2, r7, #6
 80084cc:	7812      	ldrb	r2, [r2, #0]
 80084ce:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80084d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084d4:	3301      	adds	r3, #1
 80084d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084de:	2218      	movs	r2, #24
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f975 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80084e8:	233f      	movs	r3, #63	; 0x3f
 80084ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80084ee:	230f      	movs	r3, #15
 80084f0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80084f4:	f107 0310 	add.w	r3, r7, #16
 80084f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80084fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008500:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008504:	f107 030f 	add.w	r3, r7, #15
 8008508:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800850c:	2301      	movs	r3, #1
 800850e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008512:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008516:	2100      	movs	r1, #0
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fc3d 	bl	8008d98 <hci_send_req>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	da01      	bge.n	8008528 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008524:	23ff      	movs	r3, #255	; 0xff
 8008526:	e002      	b.n	800852e <aci_hal_set_tx_power_level+0xa4>
  return status;
 8008528:	f107 030f 	add.w	r3, r7, #15
 800852c:	781b      	ldrb	r3, [r3, #0]
}
 800852e:	4618      	mov	r0, r3
 8008530:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b0cc      	sub	sp, #304	; 0x130
 800853c:	af00      	add	r7, sp, #0
 800853e:	4602      	mov	r2, r0
 8008540:	1dbb      	adds	r3, r7, #6
 8008542:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8008544:	f107 0310 	add.w	r3, r7, #16
 8008548:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800854c:	f107 030f 	add.w	r3, r7, #15
 8008550:	2200      	movs	r2, #0
 8008552:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800855a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800855e:	1dba      	adds	r2, r7, #6
 8008560:	8812      	ldrh	r2, [r2, #0]
 8008562:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008564:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008568:	3302      	adds	r3, #2
 800856a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800856e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008572:	2218      	movs	r2, #24
 8008574:	2100      	movs	r1, #0
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f92b 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800857c:	233f      	movs	r3, #63	; 0x3f
 800857e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008582:	2318      	movs	r3, #24
 8008584:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008588:	f107 0310 	add.w	r3, r7, #16
 800858c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008590:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008594:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008598:	f107 030f 	add.w	r3, r7, #15
 800859c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80085a0:	2301      	movs	r3, #1
 80085a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fbf3 	bl	8008d98 <hci_send_req>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	da01      	bge.n	80085bc <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80085b8:	23ff      	movs	r3, #255	; 0xff
 80085ba:	e002      	b.n	80085c2 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 80085bc:	f107 030f 	add.w	r3, r7, #15
 80085c0:	781b      	ldrb	r3, [r3, #0]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085d6:	f107 0308 	add.w	r3, r7, #8
 80085da:	2218      	movs	r2, #24
 80085dc:	2100      	movs	r1, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f8f7 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x03;
 80085e4:	2303      	movs	r3, #3
 80085e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80085e8:	2303      	movs	r3, #3
 80085ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80085ec:	1dfb      	adds	r3, r7, #7
 80085ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80085f0:	2301      	movs	r3, #1
 80085f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085f4:	f107 0308 	add.w	r3, r7, #8
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fbcc 	bl	8008d98 <hci_send_req>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	da01      	bge.n	800860a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008606:	23ff      	movs	r3, #255	; 0xff
 8008608:	e000      	b.n	800860c <hci_reset+0x40>
  return status;
 800860a:	79fb      	ldrb	r3, [r7, #7]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3720      	adds	r7, #32
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b0ce      	sub	sp, #312	; 0x138
 8008618:	af00      	add	r7, sp, #0
 800861a:	f107 0308 	add.w	r3, r7, #8
 800861e:	6019      	str	r1, [r3, #0]
 8008620:	1d3b      	adds	r3, r7, #4
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	f107 030e 	add.w	r3, r7, #14
 8008628:	4602      	mov	r2, r0
 800862a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800862c:	f107 0318 	add.w	r3, r7, #24
 8008630:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008634:	f107 0310 	add.w	r3, r7, #16
 8008638:	2205      	movs	r2, #5
 800863a:	2100      	movs	r1, #0
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f8c8 	bl	80087d2 <Osal_MemSet>
  int index_input = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008648:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800864c:	f107 020e 	add.w	r2, r7, #14
 8008650:	8812      	ldrh	r2, [r2, #0]
 8008652:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008654:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008658:	3302      	adds	r3, #2
 800865a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800865e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008662:	2218      	movs	r2, #24
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f8b3 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x08;
 800866c:	2308      	movs	r3, #8
 800866e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8008672:	2330      	movs	r3, #48	; 0x30
 8008674:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008678:	f107 0318 	add.w	r3, r7, #24
 800867c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008680:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008684:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008688:	f107 0310 	add.w	r3, r7, #16
 800868c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008690:	2305      	movs	r3, #5
 8008692:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008696:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800869a:	2100      	movs	r1, #0
 800869c:	4618      	mov	r0, r3
 800869e:	f000 fb7b 	bl	8008d98 <hci_send_req>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	da01      	bge.n	80086ac <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 80086a8:	23ff      	movs	r3, #255	; 0xff
 80086aa:	e016      	b.n	80086da <hci_le_read_phy+0xc6>
  if ( resp.Status )
 80086ac:	f107 0310 	add.w	r3, r7, #16
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <hci_le_read_phy+0xaa>
    return resp.Status;
 80086b6:	f107 0310 	add.w	r3, r7, #16
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	e00d      	b.n	80086da <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 80086be:	f107 0310 	add.w	r3, r7, #16
 80086c2:	78da      	ldrb	r2, [r3, #3]
 80086c4:	f107 0308 	add.w	r3, r7, #8
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80086cc:	f107 0310 	add.w	r3, r7, #16
 80086d0:	791a      	ldrb	r2, [r3, #4]
 80086d2:	1d3b      	adds	r3, r7, #4
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80086e4:	b590      	push	{r4, r7, lr}
 80086e6:	b0cd      	sub	sp, #308	; 0x134
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	1dfb      	adds	r3, r7, #7
 80086f2:	4622      	mov	r2, r4
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	1dbb      	adds	r3, r7, #6
 80086f8:	4602      	mov	r2, r0
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	1d7b      	adds	r3, r7, #5
 80086fe:	460a      	mov	r2, r1
 8008700:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008702:	f107 0310 	add.w	r3, r7, #16
 8008706:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800870a:	f107 030f 	add.w	r3, r7, #15
 800870e:	2200      	movs	r2, #0
 8008710:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800871c:	1dfa      	adds	r2, r7, #7
 800871e:	7812      	ldrb	r2, [r2, #0]
 8008720:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008722:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008726:	3301      	adds	r3, #1
 8008728:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800872c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008730:	1dba      	adds	r2, r7, #6
 8008732:	7812      	ldrb	r2, [r2, #0]
 8008734:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800873a:	3301      	adds	r3, #1
 800873c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008744:	1d7a      	adds	r2, r7, #5
 8008746:	7812      	ldrb	r2, [r2, #0]
 8008748:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800874a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800874e:	3301      	adds	r3, #1
 8008750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008754:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008758:	2218      	movs	r2, #24
 800875a:	2100      	movs	r1, #0
 800875c:	4618      	mov	r0, r3
 800875e:	f000 f838 	bl	80087d2 <Osal_MemSet>
  rq.ogf = 0x08;
 8008762:	2308      	movs	r3, #8
 8008764:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008768:	2331      	movs	r3, #49	; 0x31
 800876a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800876e:	f107 0310 	add.w	r3, r7, #16
 8008772:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800877a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800877e:	f107 030f 	add.w	r3, r7, #15
 8008782:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008786:	2301      	movs	r3, #1
 8008788:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800878c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008790:	2100      	movs	r1, #0
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fb00 	bl	8008d98 <hci_send_req>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	da01      	bge.n	80087a2 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800879e:	23ff      	movs	r3, #255	; 0xff
 80087a0:	e002      	b.n	80087a8 <hci_le_set_default_phy+0xc4>
  return status;
 80087a2:	f107 030f 	add.w	r3, r7, #15
 80087a6:	781b      	ldrb	r3, [r3, #0]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd90      	pop	{r4, r7, pc}

080087b2 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f002 f99c 	bl	800ab00 <memcpy>
 80087c8:	4603      	mov	r3, r0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f002 f99a 	bl	800ab1c <memset>
 80087e8:	4603      	mov	r3, r0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b08a      	sub	sp, #40	; 0x28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80087fc:	2300      	movs	r3, #0
 80087fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3301      	adds	r3, #1
 8008806:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2bff      	cmp	r3, #255	; 0xff
 800880e:	d14c      	bne.n	80088aa <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	3302      	adds	r3, #2
 8008814:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	b29b      	uxth	r3, r3
 800881c:	461a      	mov	r2, r3
 800881e:	f640 4301 	movw	r3, #3073	; 0xc01
 8008822:	429a      	cmp	r2, r3
 8008824:	d13d      	bne.n	80088a2 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	3302      	adds	r3, #2
 800882a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	885b      	ldrh	r3, [r3, #2]
 8008830:	b29b      	uxth	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <PeerToPeer_Event_Handler+0xc4>)
 8008836:	889b      	ldrh	r3, [r3, #4]
 8008838:	3302      	adds	r3, #2
 800883a:	429a      	cmp	r2, r3
 800883c:	d118      	bne.n	8008870 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800883e:	2301      	movs	r3, #1
 8008840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	7a1b      	ldrb	r3, [r3, #8]
 8008848:	f003 0301 	and.w	r3, r3, #1
 800884c:	2b00      	cmp	r3, #0
 800884e:	d007      	beq.n	8008860 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008850:	2300      	movs	r3, #0
 8008852:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008854:	f107 0308 	add.w	r3, r7, #8
 8008858:	4618      	mov	r0, r3
 800885a:	f001 fb97 	bl	8009f8c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800885e:	e022      	b.n	80088a6 <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008860:	2301      	movs	r3, #1
 8008862:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008864:	f107 0308 	add.w	r3, r7, #8
 8008868:	4618      	mov	r0, r3
 800886a:	f001 fb8f 	bl	8009f8c <P2PS_STM_App_Notification>
        break;
 800886e:	e01a      	b.n	80088a6 <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	885b      	ldrh	r3, [r3, #2]
 8008874:	b29b      	uxth	r3, r3
 8008876:	461a      	mov	r2, r3
 8008878:	4b0f      	ldr	r3, [pc, #60]	; (80088b8 <PeerToPeer_Event_Handler+0xc4>)
 800887a:	885b      	ldrh	r3, [r3, #2]
 800887c:	3301      	adds	r3, #1
 800887e:	429a      	cmp	r2, r3
 8008880:	d111      	bne.n	80088a6 <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8008882:	2303      	movs	r3, #3
 8008884:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	88db      	ldrh	r3, [r3, #6]
 800888a:	b29b      	uxth	r3, r3
 800888c:	b2db      	uxtb	r3, r3
 800888e:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	3308      	adds	r3, #8
 8008894:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8008896:	f107 0308 	add.w	r3, r7, #8
 800889a:	4618      	mov	r0, r3
 800889c:	f001 fb76 	bl	8009f8c <P2PS_STM_App_Notification>
        break;
 80088a0:	e001      	b.n	80088a6 <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 80088a2:	bf00      	nop
 80088a4:	e002      	b.n	80088ac <PeerToPeer_Event_Handler+0xb8>
        break;
 80088a6:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80088a8:	e000      	b.n	80088ac <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 80088aa:	bf00      	nop
  }

  return(return_value);
 80088ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80088b0:	4618      	mov	r0, r3
 80088b2:	3728      	adds	r7, #40	; 0x28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	200000c4 	.word	0x200000c4

080088bc <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	; 0x28
 80088c0:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80088c2:	484a      	ldr	r0, [pc, #296]	; (80089ec <P2PS_STM_Init+0x130>)
 80088c4:	f000 f962 	bl	8008b8c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80088c8:	238f      	movs	r3, #143	; 0x8f
 80088ca:	703b      	strb	r3, [r7, #0]
 80088cc:	23e5      	movs	r3, #229	; 0xe5
 80088ce:	707b      	strb	r3, [r7, #1]
 80088d0:	23b3      	movs	r3, #179	; 0xb3
 80088d2:	70bb      	strb	r3, [r7, #2]
 80088d4:	23d5      	movs	r3, #213	; 0xd5
 80088d6:	70fb      	strb	r3, [r7, #3]
 80088d8:	232e      	movs	r3, #46	; 0x2e
 80088da:	713b      	strb	r3, [r7, #4]
 80088dc:	237f      	movs	r3, #127	; 0x7f
 80088de:	717b      	strb	r3, [r7, #5]
 80088e0:	234a      	movs	r3, #74	; 0x4a
 80088e2:	71bb      	strb	r3, [r7, #6]
 80088e4:	2398      	movs	r3, #152	; 0x98
 80088e6:	71fb      	strb	r3, [r7, #7]
 80088e8:	232a      	movs	r3, #42	; 0x2a
 80088ea:	723b      	strb	r3, [r7, #8]
 80088ec:	2348      	movs	r3, #72	; 0x48
 80088ee:	727b      	strb	r3, [r7, #9]
 80088f0:	237a      	movs	r3, #122	; 0x7a
 80088f2:	72bb      	strb	r3, [r7, #10]
 80088f4:	23cc      	movs	r3, #204	; 0xcc
 80088f6:	72fb      	strb	r3, [r7, #11]
 80088f8:	2340      	movs	r3, #64	; 0x40
 80088fa:	733b      	strb	r3, [r7, #12]
 80088fc:	23fe      	movs	r3, #254	; 0xfe
 80088fe:	737b      	strb	r3, [r7, #13]
 8008900:	2300      	movs	r3, #0
 8008902:	73bb      	strb	r3, [r7, #14]
 8008904:	2300      	movs	r3, #0
 8008906:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8008908:	4639      	mov	r1, r7
 800890a:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <P2PS_STM_Init+0x134>)
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	2308      	movs	r3, #8
 8008910:	2201      	movs	r2, #1
 8008912:	2002      	movs	r0, #2
 8008914:	f7ff fb30 	bl	8007f78 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8008918:	2319      	movs	r3, #25
 800891a:	703b      	strb	r3, [r7, #0]
 800891c:	23ed      	movs	r3, #237	; 0xed
 800891e:	707b      	strb	r3, [r7, #1]
 8008920:	2382      	movs	r3, #130	; 0x82
 8008922:	70bb      	strb	r3, [r7, #2]
 8008924:	23ae      	movs	r3, #174	; 0xae
 8008926:	70fb      	strb	r3, [r7, #3]
 8008928:	23ed      	movs	r3, #237	; 0xed
 800892a:	713b      	strb	r3, [r7, #4]
 800892c:	2321      	movs	r3, #33	; 0x21
 800892e:	717b      	strb	r3, [r7, #5]
 8008930:	234c      	movs	r3, #76	; 0x4c
 8008932:	71bb      	strb	r3, [r7, #6]
 8008934:	239d      	movs	r3, #157	; 0x9d
 8008936:	71fb      	strb	r3, [r7, #7]
 8008938:	2341      	movs	r3, #65	; 0x41
 800893a:	723b      	strb	r3, [r7, #8]
 800893c:	2345      	movs	r3, #69	; 0x45
 800893e:	727b      	strb	r3, [r7, #9]
 8008940:	2322      	movs	r3, #34	; 0x22
 8008942:	72bb      	strb	r3, [r7, #10]
 8008944:	238e      	movs	r3, #142	; 0x8e
 8008946:	72fb      	strb	r3, [r7, #11]
 8008948:	2341      	movs	r3, #65	; 0x41
 800894a:	733b      	strb	r3, [r7, #12]
 800894c:	23fe      	movs	r3, #254	; 0xfe
 800894e:	737b      	strb	r3, [r7, #13]
 8008950:	2300      	movs	r3, #0
 8008952:	73bb      	strb	r3, [r7, #14]
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008958:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <P2PS_STM_Init+0x134>)
 800895a:	8818      	ldrh	r0, [r3, #0]
 800895c:	463a      	mov	r2, r7
 800895e:	4b25      	ldr	r3, [pc, #148]	; (80089f4 <P2PS_STM_Init+0x138>)
 8008960:	9305      	str	r3, [sp, #20]
 8008962:	2301      	movs	r3, #1
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	230a      	movs	r3, #10
 8008968:	9303      	str	r3, [sp, #12]
 800896a:	2301      	movs	r3, #1
 800896c:	9302      	str	r3, [sp, #8]
 800896e:	2300      	movs	r3, #0
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	2306      	movs	r3, #6
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	2302      	movs	r3, #2
 8008978:	2102      	movs	r1, #2
 800897a:	f7ff fbac 	bl	80080d6 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800897e:	2319      	movs	r3, #25
 8008980:	703b      	strb	r3, [r7, #0]
 8008982:	23ed      	movs	r3, #237	; 0xed
 8008984:	707b      	strb	r3, [r7, #1]
 8008986:	2382      	movs	r3, #130	; 0x82
 8008988:	70bb      	strb	r3, [r7, #2]
 800898a:	23ae      	movs	r3, #174	; 0xae
 800898c:	70fb      	strb	r3, [r7, #3]
 800898e:	23ed      	movs	r3, #237	; 0xed
 8008990:	713b      	strb	r3, [r7, #4]
 8008992:	2321      	movs	r3, #33	; 0x21
 8008994:	717b      	strb	r3, [r7, #5]
 8008996:	234c      	movs	r3, #76	; 0x4c
 8008998:	71bb      	strb	r3, [r7, #6]
 800899a:	239d      	movs	r3, #157	; 0x9d
 800899c:	71fb      	strb	r3, [r7, #7]
 800899e:	2341      	movs	r3, #65	; 0x41
 80089a0:	723b      	strb	r3, [r7, #8]
 80089a2:	2345      	movs	r3, #69	; 0x45
 80089a4:	727b      	strb	r3, [r7, #9]
 80089a6:	2322      	movs	r3, #34	; 0x22
 80089a8:	72bb      	strb	r3, [r7, #10]
 80089aa:	238e      	movs	r3, #142	; 0x8e
 80089ac:	72fb      	strb	r3, [r7, #11]
 80089ae:	2342      	movs	r3, #66	; 0x42
 80089b0:	733b      	strb	r3, [r7, #12]
 80089b2:	23fe      	movs	r3, #254	; 0xfe
 80089b4:	737b      	strb	r3, [r7, #13]
 80089b6:	2300      	movs	r3, #0
 80089b8:	73bb      	strb	r3, [r7, #14]
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80089be:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <P2PS_STM_Init+0x134>)
 80089c0:	8818      	ldrh	r0, [r3, #0]
 80089c2:	463a      	mov	r2, r7
 80089c4:	4b0c      	ldr	r3, [pc, #48]	; (80089f8 <P2PS_STM_Init+0x13c>)
 80089c6:	9305      	str	r3, [sp, #20]
 80089c8:	2301      	movs	r3, #1
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	230a      	movs	r3, #10
 80089ce:	9303      	str	r3, [sp, #12]
 80089d0:	2301      	movs	r3, #1
 80089d2:	9302      	str	r3, [sp, #8]
 80089d4:	2300      	movs	r3, #0
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	2310      	movs	r3, #16
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	2348      	movs	r3, #72	; 0x48
 80089de:	2102      	movs	r1, #2
 80089e0:	f7ff fb79 	bl	80080d6 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80089e4:	bf00      	nop
}
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	080087f5 	.word	0x080087f5
 80089f0:	200000c4 	.word	0x200000c4
 80089f4:	200000c6 	.word	0x200000c6
 80089f8:	200000c8 	.word	0x200000c8

080089fc <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	4603      	mov	r3, r0
 8008a04:	6039      	str	r1, [r7, #0]
 8008a06:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8008a08:	2342      	movs	r3, #66	; 0x42
 8008a0a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d10c      	bne.n	8008a30 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008a16:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <P2PS_STM_App_Update_Char+0x40>)
 8008a18:	8818      	ldrh	r0, [r3, #0]
 8008a1a:	4b08      	ldr	r3, [pc, #32]	; (8008a3c <P2PS_STM_App_Update_Char+0x40>)
 8008a1c:	8899      	ldrh	r1, [r3, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	2348      	movs	r3, #72	; 0x48
 8008a24:	2200      	movs	r2, #0
 8008a26:	f7ff fc40 	bl	80082aa <aci_gatt_update_char_value>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             72, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8008a2e:	e000      	b.n	8008a32 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8008a30:	bf00      	nop
  }

  return result;
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	200000c4 	.word	0x200000c4

08008a40 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
  return;
 8008a44:	bf00      	nop
}
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <BLS_Init>:

__weak void BLS_Init( void )
{
 8008a4e:	b480      	push	{r7}
 8008a50:	af00      	add	r7, sp, #0
  return;
 8008a52:	bf00      	nop
}
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
  return;
 8008a60:	bf00      	nop
}
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <DIS_Init>:
__weak void DIS_Init( void )
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	af00      	add	r7, sp, #0
  return;
 8008a6e:	bf00      	nop
}
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
  return;
 8008a7c:	bf00      	nop
}
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8008a86:	b480      	push	{r7}
 8008a88:	af00      	add	r7, sp, #0
  return;
 8008a8a:	bf00      	nop
}
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HRS_Init>:
__weak void HRS_Init( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
  return;
 8008a98:	bf00      	nop
}
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <HTS_Init>:
__weak void HTS_Init( void )
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	af00      	add	r7, sp, #0
  return;
 8008aa6:	bf00      	nop
}
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <IAS_Init>:
__weak void IAS_Init( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  return;
 8008ab4:	bf00      	nop
}
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <LLS_Init>:
__weak void LLS_Init( void )
{
 8008abe:	b480      	push	{r7}
 8008ac0:	af00      	add	r7, sp, #0
  return;
 8008ac2:	bf00      	nop
}
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <TPS_Init>:
__weak void TPS_Init( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
  return;
 8008ad0:	bf00      	nop
}
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8008ada:	b480      	push	{r7}
 8008adc:	af00      	add	r7, sp, #0
  return;
 8008ade:	bf00      	nop
}
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
  return;
 8008aec:	bf00      	nop
}
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <MESH_Init>:
__weak void MESH_Init( void )
{
 8008af6:	b480      	push	{r7}
 8008af8:	af00      	add	r7, sp, #0
  return;
 8008afa:	bf00      	nop
}
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  return;
 8008b08:	bf00      	nop
}
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8008b12:	b480      	push	{r7}
 8008b14:	af00      	add	r7, sp, #0
  return;
 8008b16:	bf00      	nop
}
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008b24:	4b04      	ldr	r3, [pc, #16]	; (8008b38 <SVCCTL_Init+0x18>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008b2a:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <SVCCTL_Init+0x1c>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008b30:	f000 f806 	bl	8008b40 <SVCCTL_SvcInit>

  return;
 8008b34:	bf00      	nop
}
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	200000cc 	.word	0x200000cc
 8008b3c:	200000ec 	.word	0x200000ec

08008b40 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
  BAS_Init();
 8008b44:	f7ff ff7c 	bl	8008a40 <BAS_Init>

  BLS_Init();
 8008b48:	f7ff ff81 	bl	8008a4e <BLS_Init>

  CRS_STM_Init();
 8008b4c:	f7ff ff86 	bl	8008a5c <CRS_STM_Init>

  DIS_Init();
 8008b50:	f7ff ff8b 	bl	8008a6a <DIS_Init>

  EDS_STM_Init();
 8008b54:	f7ff ff90 	bl	8008a78 <EDS_STM_Init>

  HIDS_Init();
 8008b58:	f7ff ff95 	bl	8008a86 <HIDS_Init>

  HRS_Init();
 8008b5c:	f7ff ff9a 	bl	8008a94 <HRS_Init>

  HTS_Init();
 8008b60:	f7ff ff9f 	bl	8008aa2 <HTS_Init>

  IAS_Init();
 8008b64:	f7ff ffa4 	bl	8008ab0 <IAS_Init>

  LLS_Init();
 8008b68:	f7ff ffa9 	bl	8008abe <LLS_Init>

  TPS_Init();
 8008b6c:	f7ff ffae 	bl	8008acc <TPS_Init>

  MOTENV_STM_Init();
 8008b70:	f7ff ffb3 	bl	8008ada <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008b74:	f7ff fea2 	bl	80088bc <P2PS_STM_Init>

  OTAS_STM_Init();
 8008b78:	f7ff ffb6 	bl	8008ae8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008b7c:	f7ff ffc2 	bl	8008b04 <BVOPUS_STM_Init>

  MESH_Init();
 8008b80:	f7ff ffb9 	bl	8008af6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008b84:	f7ff ffc5 	bl	8008b12 <SVCCTL_InitCustomSvc>
  
  return;
 8008b88:	bf00      	nop
}
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008b94:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <SVCCTL_RegisterSvcHandler+0x30>)
 8008b96:	7f1b      	ldrb	r3, [r3, #28]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4a08      	ldr	r2, [pc, #32]	; (8008bbc <SVCCTL_RegisterSvcHandler+0x30>)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008ba2:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <SVCCTL_RegisterSvcHandler+0x30>)
 8008ba4:	7f1b      	ldrb	r3, [r3, #28]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	4b04      	ldr	r3, [pc, #16]	; (8008bbc <SVCCTL_RegisterSvcHandler+0x30>)
 8008bac:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008bae:	bf00      	nop
}
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	200000cc 	.word	0x200000cc

08008bc0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2bff      	cmp	r3, #255	; 0xff
 8008bd8:	d125      	bne.n	8008c26 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	3302      	adds	r3, #2
 8008bde:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008bea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bee:	d118      	bne.n	8008c22 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	757b      	strb	r3, [r7, #21]
 8008bf4:	e00d      	b.n	8008c12 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008bf6:	7d7b      	ldrb	r3, [r7, #21]
 8008bf8:	4a1a      	ldr	r2, [pc, #104]	; (8008c64 <SVCCTL_UserEvtRx+0xa4>)
 8008bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d108      	bne.n	8008c1e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008c0c:	7d7b      	ldrb	r3, [r7, #21]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	757b      	strb	r3, [r7, #21]
 8008c12:	4b14      	ldr	r3, [pc, #80]	; (8008c64 <SVCCTL_UserEvtRx+0xa4>)
 8008c14:	7f1b      	ldrb	r3, [r3, #28]
 8008c16:	7d7a      	ldrb	r2, [r7, #21]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d3ec      	bcc.n	8008bf6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008c1c:	e002      	b.n	8008c24 <SVCCTL_UserEvtRx+0x64>
              break;
 8008c1e:	bf00      	nop
          break;
 8008c20:	e000      	b.n	8008c24 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008c22:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008c24:	e000      	b.n	8008c28 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008c26:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d00f      	beq.n	8008c4e <SVCCTL_UserEvtRx+0x8e>
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	dc10      	bgt.n	8008c54 <SVCCTL_UserEvtRx+0x94>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <SVCCTL_UserEvtRx+0x7c>
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d006      	beq.n	8008c48 <SVCCTL_UserEvtRx+0x88>
 8008c3a:	e00b      	b.n	8008c54 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fec9 	bl	80099d4 <SVCCTL_App_Notification>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75bb      	strb	r3, [r7, #22]
      break;
 8008c46:	e008      	b.n	8008c5a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	75bb      	strb	r3, [r7, #22]
      break;
 8008c4c:	e005      	b.n	8008c5a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	75bb      	strb	r3, [r7, #22]
      break;
 8008c52:	e002      	b.n	8008c5a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008c54:	2301      	movs	r3, #1
 8008c56:	75bb      	strb	r3, [r7, #22]
      break;
 8008c58:	bf00      	nop
  }

  return (return_status);
 8008c5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	200000cc 	.word	0x200000cc

08008c68 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008c70:	f107 030c 	add.w	r3, r7, #12
 8008c74:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	2124      	movs	r1, #36	; 0x24
 8008c80:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008c84:	f000 fa1e 	bl	80090c4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	330b      	adds	r3, #11
 8008c8c:	78db      	ldrb	r3, [r3, #3]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3720      	adds	r7, #32
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b088      	sub	sp, #32
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008c9e:	f107 030c 	add.w	r3, r7, #12
 8008ca2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	210f      	movs	r1, #15
 8008cae:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008cb2:	f000 fa07 	bl	80090c4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	330b      	adds	r3, #11
 8008cba:	78db      	ldrb	r3, [r3, #3]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3720      	adds	r7, #32
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	4a08      	ldr	r2, [pc, #32]	; (8008cf4 <hci_init+0x30>)
 8008cd4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008cd6:	4a08      	ldr	r2, [pc, #32]	; (8008cf8 <hci_init+0x34>)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008cdc:	4806      	ldr	r0, [pc, #24]	; (8008cf8 <hci_init+0x34>)
 8008cde:	f000 f973 	bl	8008fc8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 f8d4 	bl	8008e94 <TlInit>

  return;
 8008cec:	bf00      	nop
}
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000254 	.word	0x20000254
 8008cf8:	2000022c 	.word	0x2000022c

08008cfc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008d02:	4822      	ldr	r0, [pc, #136]	; (8008d8c <hci_user_evt_proc+0x90>)
 8008d04:	f000 fd28 	bl	8009758 <LST_is_empty>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d12b      	bne.n	8008d66 <hci_user_evt_proc+0x6a>
 8008d0e:	4b20      	ldr	r3, [pc, #128]	; (8008d90 <hci_user_evt_proc+0x94>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d027      	beq.n	8008d66 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008d16:	f107 030c 	add.w	r3, r7, #12
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	481b      	ldr	r0, [pc, #108]	; (8008d8c <hci_user_evt_proc+0x90>)
 8008d1e:	f000 fdaa 	bl	8009876 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008d22:	4b1c      	ldr	r3, [pc, #112]	; (8008d94 <hci_user_evt_proc+0x98>)
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00c      	beq.n	8008d44 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008d32:	4b18      	ldr	r3, [pc, #96]	; (8008d94 <hci_user_evt_proc+0x98>)
 8008d34:	69db      	ldr	r3, [r3, #28]
 8008d36:	1d3a      	adds	r2, r7, #4
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008d3c:	793a      	ldrb	r2, [r7, #4]
 8008d3e:	4b14      	ldr	r3, [pc, #80]	; (8008d90 <hci_user_evt_proc+0x94>)
 8008d40:	701a      	strb	r2, [r3, #0]
 8008d42:	e002      	b.n	8008d4a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008d44:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <hci_user_evt_proc+0x94>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008d4a:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <hci_user_evt_proc+0x94>)
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d004      	beq.n	8008d5c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fc03 	bl	8009560 <TL_MM_EvtDone>
 8008d5a:	e004      	b.n	8008d66 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	480a      	ldr	r0, [pc, #40]	; (8008d8c <hci_user_evt_proc+0x90>)
 8008d62:	f000 fd1b 	bl	800979c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008d66:	4809      	ldr	r0, [pc, #36]	; (8008d8c <hci_user_evt_proc+0x90>)
 8008d68:	f000 fcf6 	bl	8009758 <LST_is_empty>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d107      	bne.n	8008d82 <hci_user_evt_proc+0x86>
 8008d72:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <hci_user_evt_proc+0x94>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008d7a:	4804      	ldr	r0, [pc, #16]	; (8008d8c <hci_user_evt_proc+0x90>)
 8008d7c:	f001 f8ac 	bl	8009ed8 <hci_notify_asynch_evt>
  }


  return;
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
}
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	200000f4 	.word	0x200000f4
 8008d90:	20000100 	.word	0x20000100
 8008d94:	2000022c 	.word	0x2000022c

08008d98 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008da4:	2000      	movs	r0, #0
 8008da6:	f000 f8cb 	bl	8008f40 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008daa:	2300      	movs	r3, #0
 8008dac:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	885b      	ldrh	r3, [r3, #2]
 8008db2:	b21b      	sxth	r3, r3
 8008db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008db8:	b21a      	sxth	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	029b      	lsls	r3, r3, #10
 8008dc0:	b21b      	sxth	r3, r3
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	b21b      	sxth	r3, r3
 8008dc6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	b2d9      	uxtb	r1, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	8bbb      	ldrh	r3, [r7, #28]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 f88d 	bl	8008ef4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008dda:	e04e      	b.n	8008e7a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008ddc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008de0:	f001 f891 	bl	8009f06 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008de4:	e043      	b.n	8008e6e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008de6:	f107 030c 	add.w	r3, r7, #12
 8008dea:	4619      	mov	r1, r3
 8008dec:	4828      	ldr	r0, [pc, #160]	; (8008e90 <hci_send_req+0xf8>)
 8008dee:	f000 fd42 	bl	8009876 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	7a5b      	ldrb	r3, [r3, #9]
 8008df6:	2b0f      	cmp	r3, #15
 8008df8:	d114      	bne.n	8008e24 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	330b      	adds	r3, #11
 8008dfe:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	885b      	ldrh	r3, [r3, #2]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	8bba      	ldrh	r2, [r7, #28]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d104      	bne.n	8008e16 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	7812      	ldrb	r2, [r2, #0]
 8008e14:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	785b      	ldrb	r3, [r3, #1]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d027      	beq.n	8008e6e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	77fb      	strb	r3, [r7, #31]
 8008e22:	e024      	b.n	8008e6e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	330b      	adds	r3, #11
 8008e28:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	8bba      	ldrh	r2, [r7, #28]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d114      	bne.n	8008e62 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	7a9b      	ldrb	r3, [r3, #10]
 8008e3c:	3b03      	subs	r3, #3
 8008e3e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	695a      	ldr	r2, [r3, #20]
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	bfa8      	it	ge
 8008e4a:	461a      	movge	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6918      	ldr	r0, [r3, #16]
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	1cd9      	adds	r1, r3, #3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f001 fe4f 	bl	800ab00 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008e6e:	4808      	ldr	r0, [pc, #32]	; (8008e90 <hci_send_req+0xf8>)
 8008e70:	f000 fc72 	bl	8009758 <LST_is_empty>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0b5      	beq.n	8008de6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008e7a:	7ffb      	ldrb	r3, [r7, #31]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d0ad      	beq.n	8008ddc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008e80:	2001      	movs	r0, #1
 8008e82:	f000 f85d 	bl	8008f40 <NotifyCmdStatus>

  return 0;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3720      	adds	r7, #32
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	2000024c 	.word	0x2000024c

08008e94 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008e9c:	480f      	ldr	r0, [pc, #60]	; (8008edc <TlInit+0x48>)
 8008e9e:	f000 fc4b 	bl	8009738 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008ea2:	4a0f      	ldr	r2, [pc, #60]	; (8008ee0 <TlInit+0x4c>)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008ea8:	480e      	ldr	r0, [pc, #56]	; (8008ee4 <TlInit+0x50>)
 8008eaa:	f000 fc45 	bl	8009738 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008eae:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <TlInit+0x54>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008eb4:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <TlInit+0x58>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008ec0:	4b0b      	ldr	r3, [pc, #44]	; (8008ef0 <TlInit+0x5c>)
 8008ec2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008ec4:	4b09      	ldr	r3, [pc, #36]	; (8008eec <TlInit+0x58>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f107 0208 	add.w	r2, r7, #8
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4798      	blx	r3
  }

  return;
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop
}
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	2000024c 	.word	0x2000024c
 8008ee0:	200000fc 	.word	0x200000fc
 8008ee4:	200000f4 	.word	0x200000f4
 8008ee8:	20000100 	.word	0x20000100
 8008eec:	2000022c 	.word	0x2000022c
 8008ef0:	08008f81 	.word	0x08008f81

08008ef4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	603a      	str	r2, [r7, #0]
 8008efe:	80fb      	strh	r3, [r7, #6]
 8008f00:	460b      	mov	r3, r1
 8008f02:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008f04:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <SendCmd+0x44>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	88fa      	ldrh	r2, [r7, #6]
 8008f0a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008f0e:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <SendCmd+0x44>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	797a      	ldrb	r2, [r7, #5]
 8008f14:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008f16:	4b08      	ldr	r3, [pc, #32]	; (8008f38 <SendCmd+0x44>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	330c      	adds	r3, #12
 8008f1c:	797a      	ldrb	r2, [r7, #5]
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 fded 	bl	800ab00 <memcpy>

  hciContext.io.Send(0,0);
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <SendCmd+0x48>)
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	4798      	blx	r3

  return;
 8008f30:	bf00      	nop
}
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	200000fc 	.word	0x200000fc
 8008f3c:	2000022c 	.word	0x2000022c

08008f40 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d108      	bne.n	8008f62 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008f50:	4b0a      	ldr	r3, [pc, #40]	; (8008f7c <NotifyCmdStatus+0x3c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00d      	beq.n	8008f74 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008f58:	4b08      	ldr	r3, [pc, #32]	; (8008f7c <NotifyCmdStatus+0x3c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008f60:	e008      	b.n	8008f74 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008f62:	4b06      	ldr	r3, [pc, #24]	; (8008f7c <NotifyCmdStatus+0x3c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008f6a:	4b04      	ldr	r3, [pc, #16]	; (8008f7c <NotifyCmdStatus+0x3c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2001      	movs	r0, #1
 8008f70:	4798      	blx	r3
  return;
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
}
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000254 	.word	0x20000254

08008f80 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	7a5b      	ldrb	r3, [r3, #9]
 8008f8c:	2b0f      	cmp	r3, #15
 8008f8e:	d003      	beq.n	8008f98 <TlEvtReceived+0x18>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7a5b      	ldrb	r3, [r3, #9]
 8008f94:	2b0e      	cmp	r3, #14
 8008f96:	d107      	bne.n	8008fa8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	4809      	ldr	r0, [pc, #36]	; (8008fc0 <TlEvtReceived+0x40>)
 8008f9c:	f000 fc24 	bl	80097e8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	f000 ffa5 	bl	8009ef0 <hci_cmd_resp_release>
 8008fa6:	e006      	b.n	8008fb6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4806      	ldr	r0, [pc, #24]	; (8008fc4 <TlEvtReceived+0x44>)
 8008fac:	f000 fc1c 	bl	80097e8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008fb0:	4804      	ldr	r0, [pc, #16]	; (8008fc4 <TlEvtReceived+0x44>)
 8008fb2:	f000 ff91 	bl	8009ed8 <hci_notify_asynch_evt>
  }

  return;
 8008fb6:	bf00      	nop
}
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	2000024c 	.word	0x2000024c
 8008fc4:	200000f4 	.word	0x200000f4

08008fc8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a05      	ldr	r2, [pc, #20]	; (8008fe8 <hci_register_io_bus+0x20>)
 8008fd4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a04      	ldr	r2, [pc, #16]	; (8008fec <hci_register_io_bus+0x24>)
 8008fda:	611a      	str	r2, [r3, #16]

  return;
 8008fdc:	bf00      	nop
}
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	080092d9 	.word	0x080092d9
 8008fec:	08009341 	.word	0x08009341

08008ff0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	4a08      	ldr	r2, [pc, #32]	; (8009020 <shci_init+0x30>)
 8009000:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009002:	4a08      	ldr	r2, [pc, #32]	; (8009024 <shci_init+0x34>)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009008:	4806      	ldr	r0, [pc, #24]	; (8009024 <shci_init+0x34>)
 800900a:	f000 f911 	bl	8009230 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 f894 	bl	8009140 <TlInit>

  return;
 8009018:	bf00      	nop
}
 800901a:	3708      	adds	r7, #8
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20000278 	.word	0x20000278
 8009024:	20000258 	.word	0x20000258

08009028 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800902e:	4822      	ldr	r0, [pc, #136]	; (80090b8 <shci_user_evt_proc+0x90>)
 8009030:	f000 fb92 	bl	8009758 <LST_is_empty>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d12b      	bne.n	8009092 <shci_user_evt_proc+0x6a>
 800903a:	4b20      	ldr	r3, [pc, #128]	; (80090bc <shci_user_evt_proc+0x94>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d027      	beq.n	8009092 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009042:	f107 030c 	add.w	r3, r7, #12
 8009046:	4619      	mov	r1, r3
 8009048:	481b      	ldr	r0, [pc, #108]	; (80090b8 <shci_user_evt_proc+0x90>)
 800904a:	f000 fc14 	bl	8009876 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800904e:	4b1c      	ldr	r3, [pc, #112]	; (80090c0 <shci_user_evt_proc+0x98>)
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00c      	beq.n	8009070 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800905a:	2301      	movs	r3, #1
 800905c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800905e:	4b18      	ldr	r3, [pc, #96]	; (80090c0 <shci_user_evt_proc+0x98>)
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	1d3a      	adds	r2, r7, #4
 8009064:	4610      	mov	r0, r2
 8009066:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009068:	793a      	ldrb	r2, [r7, #4]
 800906a:	4b14      	ldr	r3, [pc, #80]	; (80090bc <shci_user_evt_proc+0x94>)
 800906c:	701a      	strb	r2, [r3, #0]
 800906e:	e002      	b.n	8009076 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009070:	4b12      	ldr	r3, [pc, #72]	; (80090bc <shci_user_evt_proc+0x94>)
 8009072:	2201      	movs	r2, #1
 8009074:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009076:	4b11      	ldr	r3, [pc, #68]	; (80090bc <shci_user_evt_proc+0x94>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d004      	beq.n	8009088 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4618      	mov	r0, r3
 8009082:	f000 fa6d 	bl	8009560 <TL_MM_EvtDone>
 8009086:	e004      	b.n	8009092 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4619      	mov	r1, r3
 800908c:	480a      	ldr	r0, [pc, #40]	; (80090b8 <shci_user_evt_proc+0x90>)
 800908e:	f000 fb85 	bl	800979c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009092:	4809      	ldr	r0, [pc, #36]	; (80090b8 <shci_user_evt_proc+0x90>)
 8009094:	f000 fb60 	bl	8009758 <LST_is_empty>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d107      	bne.n	80090ae <shci_user_evt_proc+0x86>
 800909e:	4b07      	ldr	r3, [pc, #28]	; (80090bc <shci_user_evt_proc+0x94>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80090a6:	4804      	ldr	r0, [pc, #16]	; (80090b8 <shci_user_evt_proc+0x90>)
 80090a8:	f7f7 fa55 	bl	8000556 <shci_notify_asynch_evt>
  }


  return;
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
}
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20000104 	.word	0x20000104
 80090bc:	20000114 	.word	0x20000114
 80090c0:	20000258 	.word	0x20000258

080090c4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60ba      	str	r2, [r7, #8]
 80090cc:	607b      	str	r3, [r7, #4]
 80090ce:	4603      	mov	r3, r0
 80090d0:	81fb      	strh	r3, [r7, #14]
 80090d2:	460b      	mov	r3, r1
 80090d4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80090d6:	2000      	movs	r0, #0
 80090d8:	f000 f864 	bl	80091a4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80090dc:	4b16      	ldr	r3, [pc, #88]	; (8009138 <shci_send+0x74>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	89fa      	ldrh	r2, [r7, #14]
 80090e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <shci_send+0x74>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	7b7a      	ldrb	r2, [r7, #13]
 80090ec:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80090ee:	4b12      	ldr	r3, [pc, #72]	; (8009138 <shci_send+0x74>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	330c      	adds	r3, #12
 80090f4:	7b7a      	ldrb	r2, [r7, #13]
 80090f6:	68b9      	ldr	r1, [r7, #8]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 fd01 	bl	800ab00 <memcpy>

  shciContext.io.Send(0,0);
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <shci_send+0x78>)
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	2100      	movs	r1, #0
 8009104:	2000      	movs	r0, #0
 8009106:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009108:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800910c:	f7f7 fa3a 	bl	8000584 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f103 0008 	add.w	r0, r3, #8
 8009116:	4b08      	ldr	r3, [pc, #32]	; (8009138 <shci_send+0x74>)
 8009118:	6819      	ldr	r1, [r3, #0]
 800911a:	4b07      	ldr	r3, [pc, #28]	; (8009138 <shci_send+0x74>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	789b      	ldrb	r3, [r3, #2]
 8009120:	3303      	adds	r3, #3
 8009122:	461a      	mov	r2, r3
 8009124:	f001 fcec 	bl	800ab00 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009128:	2001      	movs	r0, #1
 800912a:	f000 f83b 	bl	80091a4 <Cmd_SetStatus>

  return;
 800912e:	bf00      	nop
}
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20000110 	.word	0x20000110
 800913c:	20000258 	.word	0x20000258

08009140 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009148:	4a10      	ldr	r2, [pc, #64]	; (800918c <TlInit+0x4c>)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800914e:	4810      	ldr	r0, [pc, #64]	; (8009190 <TlInit+0x50>)
 8009150:	f000 faf2 	bl	8009738 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009154:	2001      	movs	r0, #1
 8009156:	f000 f825 	bl	80091a4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800915a:	4b0e      	ldr	r3, [pc, #56]	; (8009194 <TlInit+0x54>)
 800915c:	2201      	movs	r2, #1
 800915e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009160:	4b0d      	ldr	r3, [pc, #52]	; (8009198 <TlInit+0x58>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00c      	beq.n	8009182 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800916c:	4b0b      	ldr	r3, [pc, #44]	; (800919c <TlInit+0x5c>)
 800916e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <TlInit+0x60>)
 8009172:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009174:	4b08      	ldr	r3, [pc, #32]	; (8009198 <TlInit+0x58>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f107 020c 	add.w	r2, r7, #12
 800917c:	4610      	mov	r0, r2
 800917e:	4798      	blx	r3
  }

  return;
 8009180:	bf00      	nop
 8009182:	bf00      	nop
}
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000110 	.word	0x20000110
 8009190:	20000104 	.word	0x20000104
 8009194:	20000114 	.word	0x20000114
 8009198:	20000258 	.word	0x20000258
 800919c:	080091f5 	.word	0x080091f5
 80091a0:	0800920d 	.word	0x0800920d

080091a4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10b      	bne.n	80091cc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80091b4:	4b0d      	ldr	r3, [pc, #52]	; (80091ec <Cmd_SetStatus+0x48>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80091bc:	4b0b      	ldr	r3, [pc, #44]	; (80091ec <Cmd_SetStatus+0x48>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2000      	movs	r0, #0
 80091c2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80091c4:	4b0a      	ldr	r3, [pc, #40]	; (80091f0 <Cmd_SetStatus+0x4c>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80091ca:	e00b      	b.n	80091e4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80091cc:	4b08      	ldr	r3, [pc, #32]	; (80091f0 <Cmd_SetStatus+0x4c>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80091d2:	4b06      	ldr	r3, [pc, #24]	; (80091ec <Cmd_SetStatus+0x48>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d004      	beq.n	80091e4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80091da:	4b04      	ldr	r3, [pc, #16]	; (80091ec <Cmd_SetStatus+0x48>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2001      	movs	r0, #1
 80091e0:	4798      	blx	r3
  return;
 80091e2:	bf00      	nop
 80091e4:	bf00      	nop
}
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000278 	.word	0x20000278
 80091f0:	2000010c 	.word	0x2000010c

080091f4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80091fc:	2000      	movs	r0, #0
 80091fe:	f7f7 f9b6 	bl	800056e <shci_cmd_resp_release>

  return;
 8009202:	bf00      	nop
}
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009214:	6879      	ldr	r1, [r7, #4]
 8009216:	4805      	ldr	r0, [pc, #20]	; (800922c <TlUserEvtReceived+0x20>)
 8009218:	f000 fae6 	bl	80097e8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800921c:	4803      	ldr	r0, [pc, #12]	; (800922c <TlUserEvtReceived+0x20>)
 800921e:	f7f7 f99a 	bl	8000556 <shci_notify_asynch_evt>

  return;
 8009222:	bf00      	nop
}
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000104 	.word	0x20000104

08009230 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a05      	ldr	r2, [pc, #20]	; (8009250 <shci_register_io_bus+0x20>)
 800923c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a04      	ldr	r2, [pc, #16]	; (8009254 <shci_register_io_bus+0x24>)
 8009242:	611a      	str	r2, [r3, #16]

  return;
 8009244:	bf00      	nop
}
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	080093ed 	.word	0x080093ed
 8009254:	08009441 	.word	0x08009441

08009258 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800925c:	f001 f8e2 	bl	800a424 <HW_IPCC_Enable>

  return;
 8009260:	bf00      	nop
}
 8009262:	bd80      	pop	{r7, pc}

08009264 <TL_Init>:


void TL_Init( void )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009268:	4b10      	ldr	r3, [pc, #64]	; (80092ac <TL_Init+0x48>)
 800926a:	4a11      	ldr	r2, [pc, #68]	; (80092b0 <TL_Init+0x4c>)
 800926c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800926e:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <TL_Init+0x48>)
 8009270:	4a10      	ldr	r2, [pc, #64]	; (80092b4 <TL_Init+0x50>)
 8009272:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009274:	4b0d      	ldr	r3, [pc, #52]	; (80092ac <TL_Init+0x48>)
 8009276:	4a10      	ldr	r2, [pc, #64]	; (80092b8 <TL_Init+0x54>)
 8009278:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800927a:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <TL_Init+0x48>)
 800927c:	4a0f      	ldr	r2, [pc, #60]	; (80092bc <TL_Init+0x58>)
 800927e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009280:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <TL_Init+0x48>)
 8009282:	4a0f      	ldr	r2, [pc, #60]	; (80092c0 <TL_Init+0x5c>)
 8009284:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009286:	4b09      	ldr	r3, [pc, #36]	; (80092ac <TL_Init+0x48>)
 8009288:	4a0e      	ldr	r2, [pc, #56]	; (80092c4 <TL_Init+0x60>)
 800928a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800928c:	4b07      	ldr	r3, [pc, #28]	; (80092ac <TL_Init+0x48>)
 800928e:	4a0e      	ldr	r2, [pc, #56]	; (80092c8 <TL_Init+0x64>)
 8009290:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009292:	4b06      	ldr	r3, [pc, #24]	; (80092ac <TL_Init+0x48>)
 8009294:	4a0d      	ldr	r2, [pc, #52]	; (80092cc <TL_Init+0x68>)
 8009296:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009298:	4b04      	ldr	r3, [pc, #16]	; (80092ac <TL_Init+0x48>)
 800929a:	4a0d      	ldr	r2, [pc, #52]	; (80092d0 <TL_Init+0x6c>)
 800929c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800929e:	4b03      	ldr	r3, [pc, #12]	; (80092ac <TL_Init+0x48>)
 80092a0:	4a0c      	ldr	r2, [pc, #48]	; (80092d4 <TL_Init+0x70>)
 80092a2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80092a4:	f001 f8d2 	bl	800a44c <HW_IPCC_Init>

  return;
 80092a8:	bf00      	nop
}
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	20030000 	.word	0x20030000
 80092b0:	20030028 	.word	0x20030028
 80092b4:	20030048 	.word	0x20030048
 80092b8:	20030058 	.word	0x20030058
 80092bc:	20030064 	.word	0x20030064
 80092c0:	2003006c 	.word	0x2003006c
 80092c4:	20030074 	.word	0x20030074
 80092c8:	2003007c 	.word	0x2003007c
 80092cc:	20030098 	.word	0x20030098
 80092d0:	2003009c 	.word	0x2003009c
 80092d4:	200300a8 	.word	0x200300a8

080092d8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80092e4:	4811      	ldr	r0, [pc, #68]	; (800932c <TL_BLE_Init+0x54>)
 80092e6:	f000 fa27 	bl	8009738 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80092ea:	4b11      	ldr	r3, [pc, #68]	; (8009330 <TL_BLE_Init+0x58>)
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689a      	ldr	r2, [r3, #8]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	4a0c      	ldr	r2, [pc, #48]	; (8009334 <TL_BLE_Init+0x5c>)
 8009304:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	4a08      	ldr	r2, [pc, #32]	; (800932c <TL_BLE_Init+0x54>)
 800930a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800930c:	f001 f8b4 	bl	800a478 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a08      	ldr	r2, [pc, #32]	; (8009338 <TL_BLE_Init+0x60>)
 8009316:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	4a07      	ldr	r2, [pc, #28]	; (800933c <TL_BLE_Init+0x64>)
 800931e:	6013      	str	r3, [r2, #0]

  return 0;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	200300c4 	.word	0x200300c4
 8009330:	20030000 	.word	0x20030000
 8009334:	20030a48 	.word	0x20030a48
 8009338:	20000284 	.word	0x20000284
 800933c:	20000288 	.word	0x20000288

08009340 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800934c:	4b09      	ldr	r3, [pc, #36]	; (8009374 <TL_BLE_SendCmd+0x34>)
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2201      	movs	r2, #1
 8009354:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009356:	4b07      	ldr	r3, [pc, #28]	; (8009374 <TL_BLE_SendCmd+0x34>)
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4619      	mov	r1, r3
 800935e:	2001      	movs	r0, #1
 8009360:	f000 f96c 	bl	800963c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009364:	f001 f892 	bl	800a48c <HW_IPCC_BLE_SendCmd>

  return 0;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20030000 	.word	0x20030000

08009378 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800937e:	e01c      	b.n	80093ba <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009380:	1d3b      	adds	r3, r7, #4
 8009382:	4619      	mov	r1, r3
 8009384:	4812      	ldr	r0, [pc, #72]	; (80093d0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009386:	f000 fa76 	bl	8009876 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	7a5b      	ldrb	r3, [r3, #9]
 800938e:	2b0f      	cmp	r3, #15
 8009390:	d003      	beq.n	800939a <HW_IPCC_BLE_RxEvtNot+0x22>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	7a5b      	ldrb	r3, [r3, #9]
 8009396:	2b0e      	cmp	r3, #14
 8009398:	d105      	bne.n	80093a6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4619      	mov	r1, r3
 800939e:	2002      	movs	r0, #2
 80093a0:	f000 f94c 	bl	800963c <OutputDbgTrace>
 80093a4:	e004      	b.n	80093b0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4619      	mov	r1, r3
 80093aa:	2003      	movs	r0, #3
 80093ac:	f000 f946 	bl	800963c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80093b0:	4b08      	ldr	r3, [pc, #32]	; (80093d4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	4610      	mov	r0, r2
 80093b8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80093ba:	4805      	ldr	r0, [pc, #20]	; (80093d0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80093bc:	f000 f9cc 	bl	8009758 <LST_is_empty>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0dc      	beq.n	8009380 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80093c6:	bf00      	nop
}
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	200300c4 	.word	0x200300c4
 80093d4:	20000284 	.word	0x20000284

080093d8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80093dc:	4b02      	ldr	r3, [pc, #8]	; (80093e8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4798      	blx	r3

  return;
 80093e2:	bf00      	nop
}
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000288 	.word	0x20000288

080093ec <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80093f8:	480d      	ldr	r0, [pc, #52]	; (8009430 <TL_SYS_Init+0x44>)
 80093fa:	f000 f99d 	bl	8009738 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80093fe:	4b0d      	ldr	r3, [pc, #52]	; (8009434 <TL_SYS_Init+0x48>)
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4a08      	ldr	r2, [pc, #32]	; (8009430 <TL_SYS_Init+0x44>)
 8009410:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009412:	f001 f85d 	bl	800a4d0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a07      	ldr	r2, [pc, #28]	; (8009438 <TL_SYS_Init+0x4c>)
 800941c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	4a06      	ldr	r2, [pc, #24]	; (800943c <TL_SYS_Init+0x50>)
 8009424:	6013      	str	r3, [r2, #0]

  return 0;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	200300cc 	.word	0x200300cc
 8009434:	20030000 	.word	0x20030000
 8009438:	2000028c 	.word	0x2000028c
 800943c:	20000290 	.word	0x20000290

08009440 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	460b      	mov	r3, r1
 800944a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800944c:	4b09      	ldr	r3, [pc, #36]	; (8009474 <TL_SYS_SendCmd+0x34>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2210      	movs	r2, #16
 8009454:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009456:	4b07      	ldr	r3, [pc, #28]	; (8009474 <TL_SYS_SendCmd+0x34>)
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4619      	mov	r1, r3
 800945e:	2004      	movs	r0, #4
 8009460:	f000 f8ec 	bl	800963c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009464:	f001 f83e 	bl	800a4e4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	20030000 	.word	0x20030000

08009478 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800947c:	4b07      	ldr	r3, [pc, #28]	; (800949c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4619      	mov	r1, r3
 8009484:	2005      	movs	r0, #5
 8009486:	f000 f8d9 	bl	800963c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800948a:	4b05      	ldr	r3, [pc, #20]	; (80094a0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a03      	ldr	r2, [pc, #12]	; (800949c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009490:	68d2      	ldr	r2, [r2, #12]
 8009492:	6812      	ldr	r2, [r2, #0]
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3

  return;
 8009498:	bf00      	nop
}
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20030000 	.word	0x20030000
 80094a0:	2000028c 	.word	0x2000028c

080094a4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80094aa:	e00e      	b.n	80094ca <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80094ac:	1d3b      	adds	r3, r7, #4
 80094ae:	4619      	mov	r1, r3
 80094b0:	480b      	ldr	r0, [pc, #44]	; (80094e0 <HW_IPCC_SYS_EvtNot+0x3c>)
 80094b2:	f000 f9e0 	bl	8009876 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4619      	mov	r1, r3
 80094ba:	2006      	movs	r0, #6
 80094bc:	f000 f8be 	bl	800963c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80094c0:	4b08      	ldr	r3, [pc, #32]	; (80094e4 <HW_IPCC_SYS_EvtNot+0x40>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	4610      	mov	r0, r2
 80094c8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80094ca:	4805      	ldr	r0, [pc, #20]	; (80094e0 <HW_IPCC_SYS_EvtNot+0x3c>)
 80094cc:	f000 f944 	bl	8009758 <LST_is_empty>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0ea      	beq.n	80094ac <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80094d6:	bf00      	nop
}
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	200300cc 	.word	0x200300cc
 80094e4:	20000290 	.word	0x20000290

080094e8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80094f0:	4817      	ldr	r0, [pc, #92]	; (8009550 <TL_MM_Init+0x68>)
 80094f2:	f000 f921 	bl	8009738 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80094f6:	4817      	ldr	r0, [pc, #92]	; (8009554 <TL_MM_Init+0x6c>)
 80094f8:	f000 f91e 	bl	8009738 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80094fc:	4b16      	ldr	r3, [pc, #88]	; (8009558 <TL_MM_Init+0x70>)
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	4a16      	ldr	r2, [pc, #88]	; (800955c <TL_MM_Init+0x74>)
 8009502:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009504:	4b15      	ldr	r3, [pc, #84]	; (800955c <TL_MM_Init+0x74>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	6892      	ldr	r2, [r2, #8]
 800950c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800950e:	4b13      	ldr	r3, [pc, #76]	; (800955c <TL_MM_Init+0x74>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	68d2      	ldr	r2, [r2, #12]
 8009516:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009518:	4b10      	ldr	r3, [pc, #64]	; (800955c <TL_MM_Init+0x74>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a0c      	ldr	r2, [pc, #48]	; (8009550 <TL_MM_Init+0x68>)
 800951e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009520:	4b0e      	ldr	r3, [pc, #56]	; (800955c <TL_MM_Init+0x74>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6812      	ldr	r2, [r2, #0]
 8009528:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <TL_MM_Init+0x74>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6852      	ldr	r2, [r2, #4]
 8009532:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009534:	4b09      	ldr	r3, [pc, #36]	; (800955c <TL_MM_Init+0x74>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	6912      	ldr	r2, [r2, #16]
 800953c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800953e:	4b07      	ldr	r3, [pc, #28]	; (800955c <TL_MM_Init+0x74>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	6952      	ldr	r2, [r2, #20]
 8009546:	619a      	str	r2, [r3, #24]

  return;
 8009548:	bf00      	nop
}
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	200300b4 	.word	0x200300b4
 8009554:	2000027c 	.word	0x2000027c
 8009558:	20030000 	.word	0x20030000
 800955c:	20000294 	.word	0x20000294

08009560 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4807      	ldr	r0, [pc, #28]	; (8009588 <TL_MM_EvtDone+0x28>)
 800956c:	f000 f93c 	bl	80097e8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009570:	6879      	ldr	r1, [r7, #4]
 8009572:	2000      	movs	r0, #0
 8009574:	f000 f862 	bl	800963c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009578:	4804      	ldr	r0, [pc, #16]	; (800958c <TL_MM_EvtDone+0x2c>)
 800957a:	f000 ffd9 	bl	800a530 <HW_IPCC_MM_SendFreeBuf>

  return;
 800957e:	bf00      	nop
}
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	2000027c 	.word	0x2000027c
 800958c:	08009591 	.word	0x08009591

08009590 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009596:	e00c      	b.n	80095b2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009598:	1d3b      	adds	r3, r7, #4
 800959a:	4619      	mov	r1, r3
 800959c:	480a      	ldr	r0, [pc, #40]	; (80095c8 <SendFreeBuf+0x38>)
 800959e:	f000 f96a 	bl	8009876 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80095a2:	4b0a      	ldr	r3, [pc, #40]	; (80095cc <SendFreeBuf+0x3c>)
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	4611      	mov	r1, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 f91b 	bl	80097e8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80095b2:	4805      	ldr	r0, [pc, #20]	; (80095c8 <SendFreeBuf+0x38>)
 80095b4:	f000 f8d0 	bl	8009758 <LST_is_empty>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d0ec      	beq.n	8009598 <SendFreeBuf+0x8>
  }

  return;
 80095be:	bf00      	nop
}
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	2000027c 	.word	0x2000027c
 80095cc:	20030000 	.word	0x20030000

080095d0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80095d4:	4805      	ldr	r0, [pc, #20]	; (80095ec <TL_TRACES_Init+0x1c>)
 80095d6:	f000 f8af 	bl	8009738 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <TL_TRACES_Init+0x20>)
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	4a03      	ldr	r2, [pc, #12]	; (80095ec <TL_TRACES_Init+0x1c>)
 80095e0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80095e2:	f000 ffdb 	bl	800a59c <HW_IPCC_TRACES_Init>

  return;
 80095e6:	bf00      	nop
}
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	200300bc 	.word	0x200300bc
 80095f0:	20030000 	.word	0x20030000

080095f4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80095fa:	e008      	b.n	800960e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80095fc:	1d3b      	adds	r3, r7, #4
 80095fe:	4619      	mov	r1, r3
 8009600:	4808      	ldr	r0, [pc, #32]	; (8009624 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009602:	f000 f938 	bl	8009876 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4618      	mov	r0, r3
 800960a:	f000 f80d 	bl	8009628 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800960e:	4805      	ldr	r0, [pc, #20]	; (8009624 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009610:	f000 f8a2 	bl	8009758 <LST_is_empty>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0f0      	beq.n	80095fc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800961a:	bf00      	nop
}
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200300bc 	.word	0x200300bc

08009628 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b06      	cmp	r3, #6
 800964c:	d845      	bhi.n	80096da <OutputDbgTrace+0x9e>
 800964e:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <OutputDbgTrace+0x18>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	08009671 	.word	0x08009671
 8009658:	08009695 	.word	0x08009695
 800965c:	0800969b 	.word	0x0800969b
 8009660:	080096af 	.word	0x080096af
 8009664:	080096bb 	.word	0x080096bb
 8009668:	080096c1 	.word	0x080096c1
 800966c:	080096cf 	.word	0x080096cf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	7a5b      	ldrb	r3, [r3, #9]
 8009678:	2bff      	cmp	r3, #255	; 0xff
 800967a:	d005      	beq.n	8009688 <OutputDbgTrace+0x4c>
 800967c:	2bff      	cmp	r3, #255	; 0xff
 800967e:	dc05      	bgt.n	800968c <OutputDbgTrace+0x50>
 8009680:	2b0e      	cmp	r3, #14
 8009682:	d005      	beq.n	8009690 <OutputDbgTrace+0x54>
 8009684:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009686:	e001      	b.n	800968c <OutputDbgTrace+0x50>
          break;
 8009688:	bf00      	nop
 800968a:	e027      	b.n	80096dc <OutputDbgTrace+0xa0>
          break;
 800968c:	bf00      	nop
 800968e:	e025      	b.n	80096dc <OutputDbgTrace+0xa0>
          break;
 8009690:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009692:	e023      	b.n	80096dc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009698:	e020      	b.n	80096dc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	7a5b      	ldrb	r3, [r3, #9]
 80096a2:	2b0e      	cmp	r3, #14
 80096a4:	d001      	beq.n	80096aa <OutputDbgTrace+0x6e>
 80096a6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80096a8:	e000      	b.n	80096ac <OutputDbgTrace+0x70>
          break;
 80096aa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80096ac:	e016      	b.n	80096dc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	7a5b      	ldrb	r3, [r3, #9]
 80096b6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80096b8:	e010      	b.n	80096dc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80096be:	e00d      	b.n	80096dc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	7a5b      	ldrb	r3, [r3, #9]
 80096c8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80096ca:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80096cc:	e006      	b.n	80096dc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	7a5b      	ldrb	r3, [r3, #9]
 80096d6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80096d8:	e000      	b.n	80096dc <OutputDbgTrace+0xa0>

    default:
      break;
 80096da:	bf00      	nop
  }

  return;
 80096dc:	bf00      	nop
}
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80096f2:	4b0f      	ldr	r3, [pc, #60]	; (8009730 <OTP_Read+0x48>)
 80096f4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80096f6:	e002      	b.n	80096fe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3b08      	subs	r3, #8
 80096fc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3307      	adds	r3, #7
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	79fa      	ldrb	r2, [r7, #7]
 8009706:	429a      	cmp	r2, r3
 8009708:	d003      	beq.n	8009712 <OTP_Read+0x2a>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	4a09      	ldr	r2, [pc, #36]	; (8009734 <OTP_Read+0x4c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d1f2      	bne.n	80096f8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3307      	adds	r3, #7
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	79fa      	ldrb	r2, [r7, #7]
 800971a:	429a      	cmp	r2, r3
 800971c:	d001      	beq.n	8009722 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009722:	68fb      	ldr	r3, [r7, #12]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr
 8009730:	1fff73f8 	.word	0x1fff73f8
 8009734:	1fff7000 	.word	0x1fff7000

08009738 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	605a      	str	r2, [r3, #4]
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009760:	f3ef 8310 	mrs	r3, PRIMASK
 8009764:	60fb      	str	r3, [r7, #12]
  return(result);
 8009766:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009768:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800976a:	b672      	cpsid	i
}
 800976c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	429a      	cmp	r2, r3
 8009776:	d102      	bne.n	800977e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009778:	2301      	movs	r3, #1
 800977a:	75fb      	strb	r3, [r7, #23]
 800977c:	e001      	b.n	8009782 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800977e:	2300      	movs	r3, #0
 8009780:	75fb      	strb	r3, [r7, #23]
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f383 8810 	msr	PRIMASK, r3
}
 800978c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800978e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009790:	4618      	mov	r0, r3
 8009792:	371c      	adds	r7, #28
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a6:	f3ef 8310 	mrs	r3, PRIMASK
 80097aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80097ac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097b0:	b672      	cpsid	i
}
 80097b2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	683a      	ldr	r2, [r7, #0]
 80097c6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	605a      	str	r2, [r3, #4]
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f383 8810 	msr	PRIMASK, r3
}
 80097da:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80097dc:	bf00      	nop
 80097de:	371c      	adds	r7, #28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097f2:	f3ef 8310 	mrs	r3, PRIMASK
 80097f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80097f8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097fc:	b672      	cpsid	i
}
 80097fe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685a      	ldr	r2, [r3, #4]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f383 8810 	msr	PRIMASK, r3
}
 8009826:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009828:	bf00      	nop
 800982a:	371c      	adds	r7, #28
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800983c:	f3ef 8310 	mrs	r3, PRIMASK
 8009840:	60fb      	str	r3, [r7, #12]
  return(result);
 8009842:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009844:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009846:	b672      	cpsid	i
}
 8009848:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	6812      	ldr	r2, [r2, #0]
 8009852:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6852      	ldr	r2, [r2, #4]
 800985c:	605a      	str	r2, [r3, #4]
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f383 8810 	msr	PRIMASK, r3
}
 8009868:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800986a:	bf00      	nop
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b086      	sub	sp, #24
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009880:	f3ef 8310 	mrs	r3, PRIMASK
 8009884:	60fb      	str	r3, [r7, #12]
  return(result);
 8009886:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009888:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800988a:	b672      	cpsid	i
}
 800988c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff ffca 	bl	8009834 <LST_remove_node>
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f383 8810 	msr	PRIMASK, r3
}
 80098aa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80098ac:	bf00      	nop
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80098b4:	b480      	push	{r7}
 80098b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80098b8:	4b03      	ldr	r3, [pc, #12]	; (80098c8 <LL_FLASH_GetUDN+0x14>)
 80098ba:	681b      	ldr	r3, [r3, #0]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	1fff7580 	.word	0x1fff7580

080098cc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80098d0:	4b03      	ldr	r3, [pc, #12]	; (80098e0 <LL_FLASH_GetDeviceID+0x14>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	b2db      	uxtb	r3, r3
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	1fff7584 	.word	0x1fff7584

080098e4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80098e8:	4b03      	ldr	r3, [pc, #12]	; (80098f8 <LL_FLASH_GetSTCompanyID+0x14>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	0a1b      	lsrs	r3, r3, #8
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	1fff7584 	.word	0x1fff7584

080098fc <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80098fc:	b5b0      	push	{r4, r5, r7, lr}
 80098fe:	b08c      	sub	sp, #48	; 0x30
 8009900:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8009902:	4b2a      	ldr	r3, [pc, #168]	; (80099ac <APP_BLE_Init+0xb0>)
 8009904:	463c      	mov	r4, r7
 8009906:	461d      	mov	r5, r3
 8009908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800990a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800990c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800990e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009910:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8009918:	f000 f91e 	bl	8009b58 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800991c:	2101      	movs	r1, #1
 800991e:	2002      	movs	r0, #2
 8009920:	f000 fe64 	bl	800a5ec <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8009924:	4a22      	ldr	r2, [pc, #136]	; (80099b0 <APP_BLE_Init+0xb4>)
 8009926:	2100      	movs	r1, #0
 8009928:	2004      	movs	r0, #4
 800992a:	f000 ff73 	bl	800a814 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800992e:	463b      	mov	r3, r7
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff f999 	bl	8008c68 <SHCI_C2_BLE_Init>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 800993c:	f7f8 fc7c 	bl	8002238 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8009940:	f000 f920 	bl	8009b84 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8009944:	f7ff f8ec 	bl	8008b20 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009948:	4b1a      	ldr	r3, [pc, #104]	; (80099b4 <APP_BLE_Init+0xb8>)
 800994a:	2200      	movs	r2, #0
 800994c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8009950:	4b18      	ldr	r3, [pc, #96]	; (80099b4 <APP_BLE_Init+0xb8>)
 8009952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009956:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009958:	4a17      	ldr	r2, [pc, #92]	; (80099b8 <APP_BLE_Init+0xbc>)
 800995a:	2100      	movs	r1, #0
 800995c:	2001      	movs	r0, #1
 800995e:	f000 ff59 	bl	800a814 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8009962:	2006      	movs	r0, #6
 8009964:	f7fe fde8 	bl	8008538 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8009968:	f000 fb92 	bl	800a090 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800996c:	4b13      	ldr	r3, [pc, #76]	; (80099bc <APP_BLE_Init+0xc0>)
 800996e:	2200      	movs	r2, #0
 8009970:	4913      	ldr	r1, [pc, #76]	; (80099c0 <APP_BLE_Init+0xc4>)
 8009972:	2000      	movs	r0, #0
 8009974:	f7f7 fb22 	bl	8000fbc <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8009978:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <APP_BLE_Init+0xc8>)
 800997a:	2200      	movs	r2, #0
 800997c:	4912      	ldr	r1, [pc, #72]	; (80099c8 <APP_BLE_Init+0xcc>)
 800997e:	2000      	movs	r0, #0
 8009980:	f7f7 fb1c 	bl	8000fbc <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8009984:	4b0b      	ldr	r3, [pc, #44]	; (80099b4 <APP_BLE_Init+0xb8>)
 8009986:	2200      	movs	r2, #0
 8009988:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800998a:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <APP_BLE_Init+0xb8>)
 800998c:	2200      	movs	r2, #0
 800998e:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8009990:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <APP_BLE_Init+0xd0>)
 8009992:	2280      	movs	r2, #128	; 0x80
 8009994:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8009996:	4b0e      	ldr	r3, [pc, #56]	; (80099d0 <APP_BLE_Init+0xd4>)
 8009998:	22a0      	movs	r2, #160	; 0xa0
 800999a:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800999c:	2001      	movs	r0, #1
 800999e:	f000 f9b3 	bl	8009d08 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80099a2:	bf00      	nop
}
 80099a4:	3730      	adds	r7, #48	; 0x30
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bdb0      	pop	{r4, r5, r7, pc}
 80099aa:	bf00      	nop
 80099ac:	0800ac04 	.word	0x0800ac04
 80099b0:	08008cfd 	.word	0x08008cfd
 80099b4:	20000118 	.word	0x20000118
 80099b8:	08009e71 	.word	0x08009e71
 80099bc:	08009eb1 	.word	0x08009eb1
 80099c0:	20000199 	.word	0x20000199
 80099c4:	08009ec1 	.word	0x08009ec1
 80099c8:	2000019a 	.word	0x2000019a
 80099cc:	2000019c 	.word	0x2000019c
 80099d0:	2000019e 	.word	0x2000019e

080099d4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80099dc:	2342      	movs	r3, #66	; 0x42
 80099de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	3301      	adds	r3, #1
 80099e6:	623b      	str	r3, [r7, #32]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2bff      	cmp	r3, #255	; 0xff
 80099ee:	f000 8081 	beq.w	8009af4 <SVCCTL_App_Notification+0x120>
 80099f2:	2bff      	cmp	r3, #255	; 0xff
 80099f4:	f300 80a2 	bgt.w	8009b3c <SVCCTL_App_Notification+0x168>
 80099f8:	2b05      	cmp	r3, #5
 80099fa:	d002      	beq.n	8009a02 <SVCCTL_App_Notification+0x2e>
 80099fc:	2b3e      	cmp	r3, #62	; 0x3e
 80099fe:	d020      	beq.n	8009a42 <SVCCTL_App_Notification+0x6e>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009a00:	e09c      	b.n	8009b3c <SVCCTL_App_Notification+0x168>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	3302      	adds	r3, #2
 8009a06:	60fb      	str	r3, [r7, #12]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	4b4e      	ldr	r3, [pc, #312]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009a12:	8adb      	ldrh	r3, [r3, #22]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d106      	bne.n	8009a26 <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8009a18:	4b4c      	ldr	r3, [pc, #304]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009a1e:	4b4b      	ldr	r3, [pc, #300]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8009a26:	2001      	movs	r0, #1
 8009a28:	f000 f96e 	bl	8009d08 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8009a2c:	4b48      	ldr	r3, [pc, #288]	; (8009b50 <SVCCTL_App_Notification+0x17c>)
 8009a2e:	2201      	movs	r2, #1
 8009a30:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009a32:	4b46      	ldr	r3, [pc, #280]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009a34:	8ada      	ldrh	r2, [r3, #22]
 8009a36:	4b46      	ldr	r3, [pc, #280]	; (8009b50 <SVCCTL_App_Notification+0x17c>)
 8009a38:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8009a3a:	4845      	ldr	r0, [pc, #276]	; (8009b50 <SVCCTL_App_Notification+0x17c>)
 8009a3c:	f000 fb14 	bl	800a068 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8009a40:	e07f      	b.n	8009b42 <SVCCTL_App_Notification+0x16e>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	3302      	adds	r3, #2
 8009a46:	61bb      	str	r3, [r7, #24]
      switch (meta_evt->subevent)
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b0c      	cmp	r3, #12
 8009a4e:	d005      	beq.n	8009a5c <SVCCTL_App_Notification+0x88>
 8009a50:	2b0c      	cmp	r3, #12
 8009a52:	dc4b      	bgt.n	8009aec <SVCCTL_App_Notification+0x118>
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d017      	beq.n	8009a88 <SVCCTL_App_Notification+0xb4>
 8009a58:	2b03      	cmp	r3, #3
          break;
 8009a5a:	e047      	b.n	8009aec <SVCCTL_App_Notification+0x118>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8009a62:	4b3a      	ldr	r3, [pc, #232]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009a64:	8adb      	ldrh	r3, [r3, #22]
 8009a66:	f107 020a 	add.w	r2, r7, #10
 8009a6a:	f107 010b 	add.w	r1, r7, #11
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fe fdd0 	bl	8008614 <hci_le_read_phy>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret == BLE_STATUS_SUCCESS)
 8009a7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d136      	bne.n	8009af0 <SVCCTL_App_Notification+0x11c>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8009a82:	7afb      	ldrb	r3, [r7, #11]
 8009a84:	2b02      	cmp	r3, #2
          break;
 8009a86:	e033      	b.n	8009af0 <SVCCTL_App_Notification+0x11c>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8009a8e:	4b2f      	ldr	r3, [pc, #188]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009a90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7f7 fb0b 	bl	80010b0 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8009a9a:	4b2c      	ldr	r3, [pc, #176]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009a9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d104      	bne.n	8009aae <SVCCTL_App_Notification+0xda>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8009aa4:	4b29      	ldr	r3, [pc, #164]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009aa6:	2206      	movs	r2, #6
 8009aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8009aac:	e003      	b.n	8009ab6 <SVCCTL_App_Notification+0xe2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009aae:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	4b23      	ldr	r3, [pc, #140]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009ac0:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8009ac2:	4b23      	ldr	r3, [pc, #140]	; (8009b50 <SVCCTL_App_Notification+0x17c>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009ac8:	4b20      	ldr	r3, [pc, #128]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009aca:	8ada      	ldrh	r2, [r3, #22]
 8009acc:	4b20      	ldr	r3, [pc, #128]	; (8009b50 <SVCCTL_App_Notification+0x17c>)
 8009ace:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8009ad0:	481f      	ldr	r0, [pc, #124]	; (8009b50 <SVCCTL_App_Notification+0x17c>)
 8009ad2:	f000 fac9 	bl	800a068 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8009ad6:	4b1e      	ldr	r3, [pc, #120]	; (8009b50 <SVCCTL_App_Notification+0x17c>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8009adc:	4b1b      	ldr	r3, [pc, #108]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009ade:	8ada      	ldrh	r2, [r3, #22]
 8009ae0:	4b1b      	ldr	r3, [pc, #108]	; (8009b50 <SVCCTL_App_Notification+0x17c>)
 8009ae2:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8009ae4:	481a      	ldr	r0, [pc, #104]	; (8009b50 <SVCCTL_App_Notification+0x17c>)
 8009ae6:	f000 fabf 	bl	800a068 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009aea:	e002      	b.n	8009af2 <SVCCTL_App_Notification+0x11e>
          break;
 8009aec:	bf00      	nop
 8009aee:	e028      	b.n	8009b42 <SVCCTL_App_Notification+0x16e>
          break;
 8009af0:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8009af2:	e026      	b.n	8009b42 <SVCCTL_App_Notification+0x16e>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	3302      	adds	r3, #2
 8009af8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b04:	d016      	beq.n	8009b34 <SVCCTL_App_Notification+0x160>
 8009b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b0a:	dc19      	bgt.n	8009b40 <SVCCTL_App_Notification+0x16c>
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d004      	beq.n	8009b1a <SVCCTL_App_Notification+0x146>
 8009b10:	f240 4207 	movw	r2, #1031	; 0x407
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d00f      	beq.n	8009b38 <SVCCTL_App_Notification+0x164>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009b18:	e012      	b.n	8009b40 <SVCCTL_App_Notification+0x16c>
        	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1); // Turn on LED1
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	480d      	ldr	r0, [pc, #52]	; (8009b54 <SVCCTL_App_Notification+0x180>)
 8009b20:	f7fa fe66 	bl	80047f0 <HAL_GPIO_WritePin>
			HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8009b24:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <SVCCTL_App_Notification+0x178>)
 8009b26:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009b2a:	210a      	movs	r1, #10
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7f7 fb4b 	bl	80011c8 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8009b32:	e002      	b.n	8009b3a <SVCCTL_App_Notification+0x166>
      break;
 8009b34:	bf00      	nop
 8009b36:	e003      	b.n	8009b40 <SVCCTL_App_Notification+0x16c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009b38:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009b3a:	e001      	b.n	8009b40 <SVCCTL_App_Notification+0x16c>
      break;
 8009b3c:	bf00      	nop
 8009b3e:	e000      	b.n	8009b42 <SVCCTL_App_Notification+0x16e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009b40:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009b42:	2301      	movs	r3, #1
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3728      	adds	r7, #40	; 0x28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	20000118 	.word	0x20000118
 8009b50:	200005b0 	.word	0x200005b0
 8009b54:	48000400 	.word	0x48000400

08009b58 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009b5e:	4b06      	ldr	r3, [pc, #24]	; (8009b78 <Ble_Tl_Init+0x20>)
 8009b60:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009b62:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <Ble_Tl_Init+0x24>)
 8009b64:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8009b66:	463b      	mov	r3, r7
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4805      	ldr	r0, [pc, #20]	; (8009b80 <Ble_Tl_Init+0x28>)
 8009b6c:	f7ff f8aa 	bl	8008cc4 <hci_init>

  return;
 8009b70:	bf00      	nop
}
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	200300d4 	.word	0x200300d4
 8009b7c:	08009f55 	.word	0x08009f55
 8009b80:	08009f1d 	.word	0x08009f1d

08009b84 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8009b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b86:	b08f      	sub	sp, #60	; 0x3c
 8009b88:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8009b8e:	f7fe fd1d 	bl	80085cc <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8009b92:	f000 f929 	bl	8009de8 <BleGetBdAddress>
 8009b96:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	2106      	movs	r1, #6
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	f7fe fc0b 	bl	80083b8 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	795a      	ldrb	r2, [r3, #5]
 8009ba6:	4b52      	ldr	r3, [pc, #328]	; (8009cf0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009ba8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	791a      	ldrb	r2, [r3, #4]
 8009bae:	4b50      	ldr	r3, [pc, #320]	; (8009cf0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009bb0:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	78da      	ldrb	r2, [r3, #3]
 8009bb6:	4b4e      	ldr	r3, [pc, #312]	; (8009cf0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009bb8:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	789a      	ldrb	r2, [r3, #2]
 8009bbe:	4b4c      	ldr	r3, [pc, #304]	; (8009cf0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009bc0:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	785a      	ldrb	r2, [r3, #1]
 8009bc6:	4b4a      	ldr	r3, [pc, #296]	; (8009cf0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009bc8:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	781a      	ldrb	r2, [r3, #0]
 8009bce:	4b48      	ldr	r3, [pc, #288]	; (8009cf0 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8009bd0:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8009bd2:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8009bd6:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8009bd8:	f7ff fe6c 	bl	80098b4 <LL_FLASH_GetUDN>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8009be0:	1d3b      	adds	r3, r7, #4
 8009be2:	461a      	mov	r2, r3
 8009be4:	2106      	movs	r1, #6
 8009be6:	202e      	movs	r0, #46	; 0x2e
 8009be8:	f7fe fbe6 	bl	80083b8 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8009bec:	4a41      	ldr	r2, [pc, #260]	; (8009cf4 <Ble_Hci_Gap_Gatt_Init+0x170>)
 8009bee:	2110      	movs	r1, #16
 8009bf0:	2018      	movs	r0, #24
 8009bf2:	f7fe fbe1 	bl	80083b8 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8009bf6:	4a40      	ldr	r2, [pc, #256]	; (8009cf8 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8009bf8:	2110      	movs	r1, #16
 8009bfa:	2008      	movs	r0, #8
 8009bfc:	f7fe fbdc 	bl	80083b8 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8009c00:	2118      	movs	r1, #24
 8009c02:	2001      	movs	r0, #1
 8009c04:	f7fe fc41 	bl	800848a <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8009c08:	f7fe f991 	bl	8007f2e <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009c10:	7efb      	ldrb	r3, [r7, #27]
 8009c12:	f043 0301 	orr.w	r3, r3, #1
 8009c16:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8009c18:	7efb      	ldrb	r3, [r7, #27]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01e      	beq.n	8009c5c <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "PWRON1";
 8009c1e:	4b37      	ldr	r3, [pc, #220]	; (8009cfc <Ble_Hci_Gap_Gatt_Init+0x178>)
 8009c20:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8009c22:	f107 0212 	add.w	r2, r7, #18
 8009c26:	7ef8      	ldrb	r0, [r7, #27]
 8009c28:	f107 030e 	add.w	r3, r7, #14
 8009c2c:	9301      	str	r3, [sp, #4]
 8009c2e:	f107 0310 	add.w	r3, r7, #16
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	4613      	mov	r3, r2
 8009c36:	2207      	movs	r2, #7
 8009c38:	2100      	movs	r1, #0
 8009c3a:	f7fe f86d 	bl	8007d18 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8009c3e:	8a7c      	ldrh	r4, [r7, #18]
 8009c40:	8a3d      	ldrh	r5, [r7, #16]
 8009c42:	6978      	ldr	r0, [r7, #20]
 8009c44:	f7f6 fa9a 	bl	800017c <strlen>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	4613      	mov	r3, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	4629      	mov	r1, r5
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7fe fb27 	bl	80082aa <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8009c5c:	8a78      	ldrh	r0, [r7, #18]
 8009c5e:	89f9      	ldrh	r1, [r7, #14]
 8009c60:	463b      	mov	r3, r7
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	2302      	movs	r3, #2
 8009c66:	2200      	movs	r2, #0
 8009c68:	f7fe fb1f 	bl	80082aa <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	2102      	movs	r1, #2
 8009c70:	2000      	movs	r0, #0
 8009c72:	f7fe fd37 	bl	80086e4 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009c76:	4b22      	ldr	r3, [pc, #136]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c78:	2201      	movs	r2, #1
 8009c7a:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009c7c:	4b20      	ldr	r3, [pc, #128]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fd ff57 	bl	8007b34 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009c86:	4b1e      	ldr	r3, [pc, #120]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c88:	2201      	movs	r2, #1
 8009c8a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009c8c:	4b1c      	ldr	r3, [pc, #112]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c8e:	2208      	movs	r2, #8
 8009c90:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009c92:	4b1b      	ldr	r3, [pc, #108]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c94:	2210      	movs	r2, #16
 8009c96:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009c98:	4b19      	ldr	r3, [pc, #100]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8009c9e:	4b18      	ldr	r3, [pc, #96]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009ca0:	4a18      	ldr	r2, [pc, #96]	; (8009d04 <Ble_Hci_Gap_Gatt_Init+0x180>)
 8009ca2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009ca4:	4b16      	ldr	r3, [pc, #88]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009caa:	4b15      	ldr	r3, [pc, #84]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009cac:	789c      	ldrb	r4, [r3, #2]
 8009cae:	4b14      	ldr	r3, [pc, #80]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009cb0:	785d      	ldrb	r5, [r3, #1]
 8009cb2:	4b13      	ldr	r3, [pc, #76]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009cb4:	791b      	ldrb	r3, [r3, #4]
 8009cb6:	4a12      	ldr	r2, [pc, #72]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009cb8:	7952      	ldrb	r2, [r2, #5]
 8009cba:	4911      	ldr	r1, [pc, #68]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009cbc:	78c9      	ldrb	r1, [r1, #3]
 8009cbe:	4810      	ldr	r0, [pc, #64]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009cc0:	6880      	ldr	r0, [r0, #8]
 8009cc2:	2600      	movs	r6, #0
 8009cc4:	9604      	str	r6, [sp, #16]
 8009cc6:	9003      	str	r0, [sp, #12]
 8009cc8:	9102      	str	r1, [sp, #8]
 8009cca:	9201      	str	r2, [sp, #4]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f7fd ff77 	bl	8007bc8 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8009cdc:	789b      	ldrb	r3, [r3, #2]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 8009ce2:	f7fe f900 	bl	8007ee6 <aci_gap_configure_whitelist>
   }
}
 8009ce6:	bf00      	nop
 8009ce8:	3724      	adds	r7, #36	; 0x24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	20000010 	.word	0x20000010
 8009cf4:	0800ae1c 	.word	0x0800ae1c
 8009cf8:	0800ae2c 	.word	0x0800ae2c
 8009cfc:	0800ac34 	.word	0x0800ac34
 8009d00:	20000118 	.word	0x20000118
 8009d04:	0001b207 	.word	0x0001b207

08009d08 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08c      	sub	sp, #48	; 0x30
 8009d0c:	af08      	add	r7, sp, #32
 8009d0e:	4603      	mov	r3, r0
 8009d10:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009d12:	2342      	movs	r3, #66	; 0x42
 8009d14:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d106      	bne.n	8009d2a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8009d1c:	4b2b      	ldr	r3, [pc, #172]	; (8009dcc <Adv_Request+0xc4>)
 8009d1e:	881b      	ldrh	r3, [r3, #0]
 8009d20:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8009d22:	4b2b      	ldr	r3, [pc, #172]	; (8009dd0 <Adv_Request+0xc8>)
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	81bb      	strh	r3, [r7, #12]
 8009d28:	e005      	b.n	8009d36 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8009d2a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8009d2e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8009d30:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8009d34:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8009d36:	4b27      	ldr	r3, [pc, #156]	; (8009dd4 <Adv_Request+0xcc>)
 8009d38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7f7 f9b7 	bl	80010b0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d10d      	bne.n	8009d64 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8009d48:	4b22      	ldr	r3, [pc, #136]	; (8009dd4 <Adv_Request+0xcc>)
 8009d4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d004      	beq.n	8009d5c <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8009d52:	4b20      	ldr	r3, [pc, #128]	; (8009dd4 <Adv_Request+0xcc>)
 8009d54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d103      	bne.n	8009d64 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8009d5c:	f7fd fde8 	bl	8007930 <aci_gap_set_non_discoverable>
 8009d60:	4603      	mov	r3, r0
 8009d62:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8009d64:	4a1b      	ldr	r2, [pc, #108]	; (8009dd4 <Adv_Request+0xcc>)
 8009d66:	79fb      	ldrb	r3, [r7, #7]
 8009d68:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8009d6c:	4b19      	ldr	r3, [pc, #100]	; (8009dd4 <Adv_Request+0xcc>)
 8009d6e:	7e1b      	ldrb	r3, [r3, #24]
 8009d70:	89ba      	ldrh	r2, [r7, #12]
 8009d72:	89f9      	ldrh	r1, [r7, #14]
 8009d74:	2000      	movs	r0, #0
 8009d76:	9006      	str	r0, [sp, #24]
 8009d78:	2000      	movs	r0, #0
 8009d7a:	9005      	str	r0, [sp, #20]
 8009d7c:	4816      	ldr	r0, [pc, #88]	; (8009dd8 <Adv_Request+0xd0>)
 8009d7e:	9004      	str	r0, [sp, #16]
 8009d80:	9303      	str	r3, [sp, #12]
 8009d82:	4b16      	ldr	r3, [pc, #88]	; (8009ddc <Adv_Request+0xd4>)
 8009d84:	9302      	str	r3, [sp, #8]
 8009d86:	2307      	movs	r3, #7
 8009d88:	9301      	str	r3, [sp, #4]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	2300      	movs	r3, #0
 8009d90:	2000      	movs	r0, #0
 8009d92:	f7fd fdf1 	bl	8007978 <aci_gap_set_discoverable>
 8009d96:	4603      	mov	r3, r0
 8009d98:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8009d9a:	4911      	ldr	r1, [pc, #68]	; (8009de0 <Adv_Request+0xd8>)
 8009d9c:	200e      	movs	r0, #14
 8009d9e:	f7fe f846 	bl	8007e2e <aci_gap_update_adv_data>
 8009da2:	4603      	mov	r3, r0
 8009da4:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8009da6:	7afb      	ldrb	r3, [r7, #11]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10a      	bne.n	8009dc2 <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8009dac:	79fb      	ldrb	r3, [r7, #7]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d107      	bne.n	8009dc2 <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <Adv_Request+0xcc>)
 8009db4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009db8:	490a      	ldr	r1, [pc, #40]	; (8009de4 <Adv_Request+0xdc>)
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7f7 fa04 	bl	80011c8 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
}
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	2000019c 	.word	0x2000019c
 8009dd0:	2000019e 	.word	0x2000019e
 8009dd4:	20000118 	.word	0x20000118
 8009dd8:	20000131 	.word	0x20000131
 8009ddc:	0800ae3c 	.word	0x0800ae3c
 8009de0:	20000010 	.word	0x20000010
 8009de4:	0001e046 	.word	0x0001e046

08009de8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8009dee:	f7ff fd61 	bl	80098b4 <LL_FLASH_GetUDN>
 8009df2:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfa:	d023      	beq.n	8009e44 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009dfc:	f7ff fd72 	bl	80098e4 <LL_FLASH_GetSTCompanyID>
 8009e00:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009e02:	f7ff fd63 	bl	80098cc <LL_FLASH_GetDeviceID>
 8009e06:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	4b16      	ldr	r3, [pc, #88]	; (8009e68 <BleGetBdAddress+0x80>)
 8009e0e:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <BleGetBdAddress+0x80>)
 8009e18:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	4b12      	ldr	r3, [pc, #72]	; (8009e68 <BleGetBdAddress+0x80>)
 8009e20:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	b2da      	uxtb	r2, r3
 8009e26:	4b10      	ldr	r3, [pc, #64]	; (8009e68 <BleGetBdAddress+0x80>)
 8009e28:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	0a1b      	lsrs	r3, r3, #8
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	4b0d      	ldr	r3, [pc, #52]	; (8009e68 <BleGetBdAddress+0x80>)
 8009e32:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	0c1b      	lsrs	r3, r3, #16
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <BleGetBdAddress+0x80>)
 8009e3c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8009e3e:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <BleGetBdAddress+0x80>)
 8009e40:	617b      	str	r3, [r7, #20]
 8009e42:	e00b      	b.n	8009e5c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8009e44:	2000      	movs	r0, #0
 8009e46:	f7ff fc4f 	bl	80096e8 <OTP_Read>
 8009e4a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	617b      	str	r3, [r7, #20]
 8009e56:	e001      	b.n	8009e5c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8009e58:	4b04      	ldr	r3, [pc, #16]	; (8009e6c <BleGetBdAddress+0x84>)
 8009e5a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8009e5c:	697b      	ldr	r3, [r7, #20]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20000298 	.word	0x20000298
 8009e6c:	0800ae14 	.word	0x0800ae14

08009e70 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);// Turn off LED1
 8009e76:	2200      	movs	r2, #0
 8009e78:	2101      	movs	r1, #1
 8009e7a:	480b      	ldr	r0, [pc, #44]	; (8009ea8 <Adv_Cancel+0x38>)
 8009e7c:	f7fa fcb8 	bl	80047f0 <HAL_GPIO_WritePin>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8009e80:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <Adv_Cancel+0x3c>)
 8009e82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e86:	2b05      	cmp	r3, #5
 8009e88:	d00a      	beq.n	8009ea0 <Adv_Cancel+0x30>

  {

    tBleStatus result = 0x00;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8009e8e:	f7fd fd4f 	bl	8007930 <aci_gap_set_non_discoverable>
 8009e92:	4603      	mov	r3, r0
 8009e94:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009e96:	4b05      	ldr	r3, [pc, #20]	; (8009eac <Adv_Cancel+0x3c>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8009e9e:	bf00      	nop
 8009ea0:	bf00      	nop
}
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	48000400 	.word	0x48000400
 8009eac:	20000118 	.word	0x20000118

08009eb0 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	f000 fcce 	bl	800a858 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8009ebc:	bf00      	nop
}
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);// Turn off LED1
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	4802      	ldr	r0, [pc, #8]	; (8009ed4 <Switch_OFF_GPIO+0x14>)
 8009eca:	f7fa fc91 	bl	80047f0 <HAL_GPIO_WritePin>
/* USER CODE END Switch_OFF_GPIO */
}
 8009ece:	bf00      	nop
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	48000400 	.word	0x48000400

08009ed8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	2004      	movs	r0, #4
 8009ee4:	f000 fcb8 	bl	800a858 <UTIL_SEQ_SetTask>
  return;
 8009ee8:	bf00      	nop
}
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009ef8:	2001      	movs	r0, #1
 8009efa:	f000 fd19 	bl	800a930 <UTIL_SEQ_SetEvt>
  return;
 8009efe:	bf00      	nop
}
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009f0e:	2001      	movs	r0, #1
 8009f10:	f000 fd2e 	bl	800a970 <UTIL_SEQ_WaitEvt>
  return;
 8009f14:	bf00      	nop
}
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fe46 	bl	8008bc0 <SVCCTL_UserEvtRx>
 8009f34:	4603      	mov	r3, r0
 8009f36:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2201      	movs	r2, #1
 8009f42:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8009f44:	e002      	b.n	8009f4c <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	701a      	strb	r2, [r3, #0]
}
 8009f4c:	bf00      	nop
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <BLE_StatusNot+0x16>
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d006      	beq.n	8009f76 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8009f68:	e00b      	b.n	8009f82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009f6a:	2307      	movs	r3, #7
 8009f6c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 fc9e 	bl	800a8b0 <UTIL_SEQ_PauseTask>
      break;
 8009f74:	e005      	b.n	8009f82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009f76:	2307      	movs	r3, #7
 8009f78:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fcb8 	bl	800a8f0 <UTIL_SEQ_ResumeTask>
      break;
 8009f80:	bf00      	nop
  }
  return;
 8009f82:	bf00      	nop
}
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
	...

08009f8c <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d014      	beq.n	8009fc6 <P2PS_STM_App_Notification+0x3a>
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	dc55      	bgt.n	800a04c <P2PS_STM_App_Notification+0xc0>
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <P2PS_STM_App_Notification+0x1e>
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d007      	beq.n	8009fb8 <P2PS_STM_App_Notification+0x2c>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8009fa8:	e050      	b.n	800a04c <P2PS_STM_App_Notification+0xc0>
      P2P_Server_App_Context.Notification_Status = 1;
 8009faa:	4b2c      	ldr	r3, [pc, #176]	; (800a05c <P2PS_STM_App_Notification+0xd0>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	701a      	strb	r2, [r3, #0]
      Custom_Notification = 1;
 8009fb0:	4b2b      	ldr	r3, [pc, #172]	; (800a060 <P2PS_STM_App_Notification+0xd4>)
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	701a      	strb	r2, [r3, #0]
      break;
 8009fb6:	e04c      	b.n	800a052 <P2PS_STM_App_Notification+0xc6>
      P2P_Server_App_Context.Notification_Status = 0;
 8009fb8:	4b28      	ldr	r3, [pc, #160]	; (800a05c <P2PS_STM_App_Notification+0xd0>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	701a      	strb	r2, [r3, #0]
      Custom_Notification = 0;
 8009fbe:	4b28      	ldr	r3, [pc, #160]	; (800a060 <P2PS_STM_App_Notification+0xd4>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	701a      	strb	r2, [r3, #0]
      break;
 8009fc4:	e045      	b.n	800a052 <P2PS_STM_App_Notification+0xc6>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d11b      	bne.n	800a008 <P2PS_STM_App_Notification+0x7c>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d107      	bne.n	8009fec <P2PS_STM_App_Notification+0x60>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1); // Turn on LED2
 8009fdc:	2201      	movs	r2, #1
 8009fde:	2102      	movs	r1, #2
 8009fe0:	4820      	ldr	r0, [pc, #128]	; (800a064 <P2PS_STM_App_Notification+0xd8>)
 8009fe2:	f7fa fc05 	bl	80047f0 <HAL_GPIO_WritePin>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8009fe6:	4b1d      	ldr	r3, [pc, #116]	; (800a05c <P2PS_STM_App_Notification+0xd0>)
 8009fe8:	2201      	movs	r2, #1
 8009fea:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d107      	bne.n	800a008 <P2PS_STM_App_Notification+0x7c>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0); // Turn off LED2
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	2102      	movs	r1, #2
 8009ffc:	4819      	ldr	r0, [pc, #100]	; (800a064 <P2PS_STM_App_Notification+0xd8>)
 8009ffe:	f7fa fbf7 	bl	80047f0 <HAL_GPIO_WritePin>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800a002:	4b16      	ldr	r3, [pc, #88]	; (800a05c <P2PS_STM_App_Notification+0xd0>)
 800a004:	2200      	movs	r2, #0
 800a006:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d11e      	bne.n	800a050 <P2PS_STM_App_Notification+0xc4>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	3301      	adds	r3, #1
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d107      	bne.n	800a02e <P2PS_STM_App_Notification+0xa2>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1); // Turn on LED2
 800a01e:	2201      	movs	r2, #1
 800a020:	2102      	movs	r1, #2
 800a022:	4810      	ldr	r0, [pc, #64]	; (800a064 <P2PS_STM_App_Notification+0xd8>)
 800a024:	f7fa fbe4 	bl	80047f0 <HAL_GPIO_WritePin>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800a028:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <P2PS_STM_App_Notification+0xd0>)
 800a02a:	2201      	movs	r2, #1
 800a02c:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	3301      	adds	r3, #1
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10a      	bne.n	800a050 <P2PS_STM_App_Notification+0xc4>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0); // Turn off LED2
 800a03a:	2200      	movs	r2, #0
 800a03c:	2102      	movs	r1, #2
 800a03e:	4809      	ldr	r0, [pc, #36]	; (800a064 <P2PS_STM_App_Notification+0xd8>)
 800a040:	f7fa fbd6 	bl	80047f0 <HAL_GPIO_WritePin>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <P2PS_STM_App_Notification+0xd0>)
 800a046:	2200      	movs	r2, #0
 800a048:	709a      	strb	r2, [r3, #2]
      break;
 800a04a:	e001      	b.n	800a050 <P2PS_STM_App_Notification+0xc4>
      break;
 800a04c:	bf00      	nop
 800a04e:	e000      	b.n	800a052 <P2PS_STM_App_Notification+0xc6>
      break;
 800a050:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800a052:	bf00      	nop
}
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	200001a0 	.word	0x200001a0
 800a060:	20000218 	.word	0x20000218
 800a064:	48000400 	.word	0x48000400

0800a068 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d005      	beq.n	800a084 <P2PS_APP_Notification+0x1c>
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d000      	beq.n	800a07e <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800a07c:	e003      	b.n	800a086 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();
 800a07e:	f000 f819 	bl	800a0b4 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 800a082:	e000      	b.n	800a086 <P2PS_APP_Notification+0x1e>
    break;
 800a084:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800a086:	bf00      	nop
}
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 800a094:	4a05      	ldr	r2, [pc, #20]	; (800a0ac <P2PS_APP_Init+0x1c>)
 800a096:	2100      	movs	r1, #0
 800a098:	2002      	movs	r0, #2
 800a09a:	f000 fbbb 	bl	800a814 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800a09e:	4b04      	ldr	r3, [pc, #16]	; (800a0b0 <P2PS_APP_Init+0x20>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 800a0a4:	f000 f806 	bl	800a0b4 <P2PS_APP_LED_BUTTON_context_Init>

/* USER CODE END P2PS_APP_Init */
  return;
 800a0a8:	bf00      	nop
}
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	0800a0e9 	.word	0x0800a0e9
 800a0b0:	200001a0 	.word	0x200001a0

0800a0b4 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0); // Turn off LED2
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2102      	movs	r1, #2
 800a0bc:	4808      	ldr	r0, [pc, #32]	; (800a0e0 <P2PS_APP_LED_BUTTON_context_Init+0x2c>)
 800a0be:	f7fa fb97 	bl	80047f0 <HAL_GPIO_WritePin>
  
#if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 800a0c2:	4b08      	ldr	r3, [pc, #32]	; (800a0e4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 800a0c8:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 800a0ce:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800a0d4:	4b03      	ldr	r3, [pc, #12]	; (800a0e4 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 800a0da:	bf00      	nop
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	48000400 	.word	0x48000400
 800a0e4:	200001a0 	.word	0x200001a0

0800a0e8 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
  }
 */

   if(P2P_Server_App_Context.Notification_Status){ 
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <P2PS_Send_Notification+0x1c>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d005      	beq.n	800a100 <P2PS_Send_Notification+0x18>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(0xfe42, (uint8_t *)&BTdata);
 800a0f4:	4904      	ldr	r1, [pc, #16]	; (800a108 <P2PS_Send_Notification+0x20>)
 800a0f6:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800a0fa:	f7fe fc7f 	bl	80089fc <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 800a0fe:	bf00      	nop
 800a100:	bf00      	nop
}
 800a102:	bd80      	pop	{r7, pc}
 800a104:	200001a0 	.word	0x200001a0
 800a108:	200001d0 	.word	0x200001d0

0800a10c <LL_PWR_EnableBootC2>:
{
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800a110:	4b05      	ldr	r3, [pc, #20]	; (800a128 <LL_PWR_EnableBootC2+0x1c>)
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	4a04      	ldr	r2, [pc, #16]	; (800a128 <LL_PWR_EnableBootC2+0x1c>)
 800a116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a11a:	60d3      	str	r3, [r2, #12]
}
 800a11c:	bf00      	nop
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	58000400 	.word	0x58000400

0800a12c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a136:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a13a:	4905      	ldr	r1, [pc, #20]	; (800a150 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4313      	orrs	r3, r2
 800a140:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr
 800a150:	58000800 	.word	0x58000800

0800a154 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a15c:	4b05      	ldr	r3, [pc, #20]	; (800a174 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a15e:	6a1a      	ldr	r2, [r3, #32]
 800a160:	4904      	ldr	r1, [pc, #16]	; (800a174 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4313      	orrs	r3, r2
 800a166:	620b      	str	r3, [r1, #32]
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	58000800 	.word	0x58000800

0800a178 <LL_AHB3_GRP1_EnableClock>:
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4013      	ands	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a19c:	68fb      	ldr	r3, [r7, #12]
}
 800a19e:	bf00      	nop
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b085      	sub	sp, #20
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a1b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a1ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a1c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
}
 800a1d6:	bf00      	nop
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <LL_C1_IPCC_EnableIT_TXF>:
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	601a      	str	r2, [r3, #0]
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <LL_C1_IPCC_EnableIT_RXO>:
{
 800a202:	b480      	push	{r7}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f043 0201 	orr.w	r2, r3, #1
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	601a      	str	r2, [r3, #0]
}
 800a216:	bf00      	nop
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800a222:	b480      	push	{r7}
 800a224:	b083      	sub	sp, #12
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	041b      	lsls	r3, r3, #16
 800a234:	43db      	mvns	r3, r3
 800a236:	401a      	ands	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	041b      	lsls	r3, r3, #16
 800a25a:	431a      	orrs	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	605a      	str	r2, [r3, #4]
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	43db      	mvns	r3, r3
 800a27e:	401a      	ands	r2, r3
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	605a      	str	r2, [r3, #4]
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	609a      	str	r2, [r3, #8]
}
 800a2a0:	bf00      	nop
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <LL_C1_IPCC_SetFlag_CHx>:
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	041a      	lsls	r2, r3, #16
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	609a      	str	r2, [r3, #8]
}
 800a2be:	bf00      	nop
 800a2c0:	370c      	adds	r7, #12
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d101      	bne.n	800a2e6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e000      	b.n	800a2e8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	69da      	ldr	r2, [r3, #28]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	4013      	ands	r3, r2
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d101      	bne.n	800a310 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a30c:	2301      	movs	r3, #1
 800a30e:	e000      	b.n	800a312 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
	...

0800a320 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a324:	2102      	movs	r1, #2
 800a326:	4819      	ldr	r0, [pc, #100]	; (800a38c <HW_IPCC_Rx_Handler+0x6c>)
 800a328:	f7ff ffe4 	bl	800a2f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d009      	beq.n	800a346 <HW_IPCC_Rx_Handler+0x26>
 800a332:	4b16      	ldr	r3, [pc, #88]	; (800a38c <HW_IPCC_Rx_Handler+0x6c>)
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	43db      	mvns	r3, r3
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800a340:	f000 f8ea 	bl	800a518 <HW_IPCC_SYS_EvtHandler>
 800a344:	e01f      	b.n	800a386 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a346:	2101      	movs	r1, #1
 800a348:	4810      	ldr	r0, [pc, #64]	; (800a38c <HW_IPCC_Rx_Handler+0x6c>)
 800a34a:	f7ff ffd3 	bl	800a2f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d008      	beq.n	800a366 <HW_IPCC_Rx_Handler+0x46>
 800a354:	4b0d      	ldr	r3, [pc, #52]	; (800a38c <HW_IPCC_Rx_Handler+0x6c>)
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d102      	bne.n	800a366 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800a360:	f000 f89e 	bl	800a4a0 <HW_IPCC_BLE_EvtHandler>
 800a364:	e00f      	b.n	800a386 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a366:	2108      	movs	r1, #8
 800a368:	4808      	ldr	r0, [pc, #32]	; (800a38c <HW_IPCC_Rx_Handler+0x6c>)
 800a36a:	f7ff ffc3 	bl	800a2f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d009      	beq.n	800a388 <HW_IPCC_Rx_Handler+0x68>
 800a374:	4b05      	ldr	r3, [pc, #20]	; (800a38c <HW_IPCC_Rx_Handler+0x6c>)
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	43db      	mvns	r3, r3
 800a37a:	f003 0308 	and.w	r3, r3, #8
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a382:	f000 f915 	bl	800a5b0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a386:	bf00      	nop
 800a388:	bf00      	nop
}
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	58000c00 	.word	0x58000c00

0800a390 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a394:	2102      	movs	r1, #2
 800a396:	4822      	ldr	r0, [pc, #136]	; (800a420 <HW_IPCC_Tx_Handler+0x90>)
 800a398:	f7ff ff97 	bl	800a2ca <LL_C1_IPCC_IsActiveFlag_CHx>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d109      	bne.n	800a3b6 <HW_IPCC_Tx_Handler+0x26>
 800a3a2:	4b1f      	ldr	r3, [pc, #124]	; (800a420 <HW_IPCC_Tx_Handler+0x90>)
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	43db      	mvns	r3, r3
 800a3a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a3b0:	f000 f8a6 	bl	800a500 <HW_IPCC_SYS_CmdEvtHandler>
 800a3b4:	e031      	b.n	800a41a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a3b6:	2102      	movs	r1, #2
 800a3b8:	4819      	ldr	r0, [pc, #100]	; (800a420 <HW_IPCC_Tx_Handler+0x90>)
 800a3ba:	f7ff ff86 	bl	800a2ca <LL_C1_IPCC_IsActiveFlag_CHx>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d109      	bne.n	800a3d8 <HW_IPCC_Tx_Handler+0x48>
 800a3c4:	4b16      	ldr	r3, [pc, #88]	; (800a420 <HW_IPCC_Tx_Handler+0x90>)
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a3d2:	f000 f895 	bl	800a500 <HW_IPCC_SYS_CmdEvtHandler>
 800a3d6:	e020      	b.n	800a41a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a3d8:	2108      	movs	r1, #8
 800a3da:	4811      	ldr	r0, [pc, #68]	; (800a420 <HW_IPCC_Tx_Handler+0x90>)
 800a3dc:	f7ff ff75 	bl	800a2ca <LL_C1_IPCC_IsActiveFlag_CHx>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d109      	bne.n	800a3fa <HW_IPCC_Tx_Handler+0x6a>
 800a3e6:	4b0e      	ldr	r3, [pc, #56]	; (800a420 <HW_IPCC_Tx_Handler+0x90>)
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	43db      	mvns	r3, r3
 800a3ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a3f4:	f000 f8be 	bl	800a574 <HW_IPCC_MM_FreeBufHandler>
 800a3f8:	e00f      	b.n	800a41a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a3fa:	2120      	movs	r1, #32
 800a3fc:	4808      	ldr	r0, [pc, #32]	; (800a420 <HW_IPCC_Tx_Handler+0x90>)
 800a3fe:	f7ff ff64 	bl	800a2ca <LL_C1_IPCC_IsActiveFlag_CHx>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d109      	bne.n	800a41c <HW_IPCC_Tx_Handler+0x8c>
 800a408:	4b05      	ldr	r3, [pc, #20]	; (800a420 <HW_IPCC_Tx_Handler+0x90>)
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	43db      	mvns	r3, r3
 800a40e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a416:	f000 f84f 	bl	800a4b8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a41a:	bf00      	nop
 800a41c:	bf00      	nop
}
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	58000c00 	.word	0x58000c00

0800a424 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a428:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a42c:	f7ff febd 	bl	800a1aa <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a430:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a434:	f7ff fe7a 	bl	800a12c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a438:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a43c:	f7ff fe8a 	bl	800a154 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a440:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a442:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a444:	f7ff fe62 	bl	800a10c <LL_PWR_EnableBootC2>

  return;
 800a448:	bf00      	nop
}
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a450:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a454:	f7ff fe90 	bl	800a178 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a458:	4806      	ldr	r0, [pc, #24]	; (800a474 <HW_IPCC_Init+0x28>)
 800a45a:	f7ff fed2 	bl	800a202 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a45e:	4805      	ldr	r0, [pc, #20]	; (800a474 <HW_IPCC_Init+0x28>)
 800a460:	f7ff febf 	bl	800a1e2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a464:	202c      	movs	r0, #44	; 0x2c
 800a466:	f7f9 fd12 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a46a:	202d      	movs	r0, #45	; 0x2d
 800a46c:	f7f9 fd0f 	bl	8003e8e <HAL_NVIC_EnableIRQ>

  return;
 800a470:	bf00      	nop
}
 800a472:	bd80      	pop	{r7, pc}
 800a474:	58000c00 	.word	0x58000c00

0800a478 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a47c:	2101      	movs	r1, #1
 800a47e:	4802      	ldr	r0, [pc, #8]	; (800a488 <HW_IPCC_BLE_Init+0x10>)
 800a480:	f7ff fef4 	bl	800a26c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a484:	bf00      	nop
}
 800a486:	bd80      	pop	{r7, pc}
 800a488:	58000c00 	.word	0x58000c00

0800a48c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a490:	2101      	movs	r1, #1
 800a492:	4802      	ldr	r0, [pc, #8]	; (800a49c <HW_IPCC_BLE_SendCmd+0x10>)
 800a494:	f7ff ff0a 	bl	800a2ac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a498:	bf00      	nop
}
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	58000c00 	.word	0x58000c00

0800a4a0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a4a4:	f7fe ff68 	bl	8009378 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a4a8:	2101      	movs	r1, #1
 800a4aa:	4802      	ldr	r0, [pc, #8]	; (800a4b4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800a4ac:	f7ff fef0 	bl	800a290 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a4b0:	bf00      	nop
}
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	58000c00 	.word	0x58000c00

0800a4b8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a4bc:	2120      	movs	r1, #32
 800a4be:	4803      	ldr	r0, [pc, #12]	; (800a4cc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800a4c0:	f7ff fec2 	bl	800a248 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800a4c4:	f7fe ff88 	bl	80093d8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a4c8:	bf00      	nop
}
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	58000c00 	.word	0x58000c00

0800a4d0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a4d4:	2102      	movs	r1, #2
 800a4d6:	4802      	ldr	r0, [pc, #8]	; (800a4e0 <HW_IPCC_SYS_Init+0x10>)
 800a4d8:	f7ff fec8 	bl	800a26c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a4dc:	bf00      	nop
}
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	58000c00 	.word	0x58000c00

0800a4e4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a4e8:	2102      	movs	r1, #2
 800a4ea:	4804      	ldr	r0, [pc, #16]	; (800a4fc <HW_IPCC_SYS_SendCmd+0x18>)
 800a4ec:	f7ff fede 	bl	800a2ac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a4f0:	2102      	movs	r1, #2
 800a4f2:	4802      	ldr	r0, [pc, #8]	; (800a4fc <HW_IPCC_SYS_SendCmd+0x18>)
 800a4f4:	f7ff fe95 	bl	800a222 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a4f8:	bf00      	nop
}
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	58000c00 	.word	0x58000c00

0800a500 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a504:	2102      	movs	r1, #2
 800a506:	4803      	ldr	r0, [pc, #12]	; (800a514 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a508:	f7ff fe9e 	bl	800a248 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a50c:	f7fe ffb4 	bl	8009478 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a510:	bf00      	nop
}
 800a512:	bd80      	pop	{r7, pc}
 800a514:	58000c00 	.word	0x58000c00

0800a518 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a51c:	f7fe ffc2 	bl	80094a4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a520:	2102      	movs	r1, #2
 800a522:	4802      	ldr	r0, [pc, #8]	; (800a52c <HW_IPCC_SYS_EvtHandler+0x14>)
 800a524:	f7ff feb4 	bl	800a290 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a528:	bf00      	nop
}
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	58000c00 	.word	0x58000c00

0800a530 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a538:	2108      	movs	r1, #8
 800a53a:	480c      	ldr	r0, [pc, #48]	; (800a56c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a53c:	f7ff fec5 	bl	800a2ca <LL_C1_IPCC_IsActiveFlag_CHx>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d007      	beq.n	800a556 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a546:	4a0a      	ldr	r2, [pc, #40]	; (800a570 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a54c:	2108      	movs	r1, #8
 800a54e:	4807      	ldr	r0, [pc, #28]	; (800a56c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a550:	f7ff fe67 	bl	800a222 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a554:	e006      	b.n	800a564 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a55a:	2108      	movs	r1, #8
 800a55c:	4803      	ldr	r0, [pc, #12]	; (800a56c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a55e:	f7ff fea5 	bl	800a2ac <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a562:	bf00      	nop
}
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	58000c00 	.word	0x58000c00
 800a570:	200002a0 	.word	0x200002a0

0800a574 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a578:	2108      	movs	r1, #8
 800a57a:	4806      	ldr	r0, [pc, #24]	; (800a594 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a57c:	f7ff fe64 	bl	800a248 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a580:	4b05      	ldr	r3, [pc, #20]	; (800a598 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a586:	2108      	movs	r1, #8
 800a588:	4802      	ldr	r0, [pc, #8]	; (800a594 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a58a:	f7ff fe8f 	bl	800a2ac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a58e:	bf00      	nop
}
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	58000c00 	.word	0x58000c00
 800a598:	200002a0 	.word	0x200002a0

0800a59c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a5a0:	2108      	movs	r1, #8
 800a5a2:	4802      	ldr	r0, [pc, #8]	; (800a5ac <HW_IPCC_TRACES_Init+0x10>)
 800a5a4:	f7ff fe62 	bl	800a26c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a5a8:	bf00      	nop
}
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	58000c00 	.word	0x58000c00

0800a5b0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a5b4:	f7ff f81e 	bl	80095f4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a5b8:	2108      	movs	r1, #8
 800a5ba:	4802      	ldr	r0, [pc, #8]	; (800a5c4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a5bc:	f7ff fe68 	bl	800a290 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a5c0:	bf00      	nop
}
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	58000c00 	.word	0x58000c00

0800a5c8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5cc:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <UTIL_LPM_Init+0x1c>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <UTIL_LPM_Init+0x20>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a5d8:	bf00      	nop
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	200002a4 	.word	0x200002a4
 800a5e8:	200002a8 	.word	0x200002a8

0800a5ec <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b087      	sub	sp, #28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a5fc:	613b      	str	r3, [r7, #16]
  return(result);
 800a5fe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a600:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a602:	b672      	cpsid	i
}
 800a604:	bf00      	nop
  
  switch(state)
 800a606:	78fb      	ldrb	r3, [r7, #3]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d008      	beq.n	800a61e <UTIL_LPM_SetOffMode+0x32>
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d10e      	bne.n	800a62e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a610:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <UTIL_LPM_SetOffMode+0x5c>)
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4313      	orrs	r3, r2
 800a618:	4a0b      	ldr	r2, [pc, #44]	; (800a648 <UTIL_LPM_SetOffMode+0x5c>)
 800a61a:	6013      	str	r3, [r2, #0]
      break;
 800a61c:	e008      	b.n	800a630 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	43da      	mvns	r2, r3
 800a622:	4b09      	ldr	r3, [pc, #36]	; (800a648 <UTIL_LPM_SetOffMode+0x5c>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4013      	ands	r3, r2
 800a628:	4a07      	ldr	r2, [pc, #28]	; (800a648 <UTIL_LPM_SetOffMode+0x5c>)
 800a62a:	6013      	str	r3, [r2, #0]
      break;
 800a62c:	e000      	b.n	800a630 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a62e:	bf00      	nop
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f383 8810 	msr	PRIMASK, r3
}
 800a63a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a63c:	bf00      	nop
 800a63e:	371c      	adds	r7, #28
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	200002a8 	.word	0x200002a8

0800a64c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08c      	sub	sp, #48	; 0x30
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a654:	4b67      	ldr	r3, [pc, #412]	; (800a7f4 <UTIL_SEQ_Run+0x1a8>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a65a:	4b66      	ldr	r3, [pc, #408]	; (800a7f4 <UTIL_SEQ_Run+0x1a8>)
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4013      	ands	r3, r2
 800a662:	4a64      	ldr	r2, [pc, #400]	; (800a7f4 <UTIL_SEQ_Run+0x1a8>)
 800a664:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a666:	e083      	b.n	800a770 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a66c:	e002      	b.n	800a674 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	3301      	adds	r3, #1
 800a672:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a674:	4a60      	ldr	r2, [pc, #384]	; (800a7f8 <UTIL_SEQ_Run+0x1ac>)
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a67c:	4b5f      	ldr	r3, [pc, #380]	; (800a7fc <UTIL_SEQ_Run+0x1b0>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	401a      	ands	r2, r3
 800a682:	4b5c      	ldr	r3, [pc, #368]	; (800a7f4 <UTIL_SEQ_Run+0x1a8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4013      	ands	r3, r2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d0f0      	beq.n	800a66e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800a68c:	4a5a      	ldr	r2, [pc, #360]	; (800a7f8 <UTIL_SEQ_Run+0x1ac>)
 800a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a690:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a694:	4b59      	ldr	r3, [pc, #356]	; (800a7fc <UTIL_SEQ_Run+0x1b0>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	401a      	ands	r2, r3
 800a69a:	4b56      	ldr	r3, [pc, #344]	; (800a7f4 <UTIL_SEQ_Run+0x1a8>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4013      	ands	r3, r2
 800a6a0:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a6a2:	4a55      	ldr	r2, [pc, #340]	; (800a7f8 <UTIL_SEQ_Run+0x1ac>)
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	4413      	add	r3, r2
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d106      	bne.n	800a6c2 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a6b4:	4a50      	ldr	r2, [pc, #320]	; (800a7f8 <UTIL_SEQ_Run+0x1ac>)
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	00db      	lsls	r3, r3, #3
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c0:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a6c2:	4a4d      	ldr	r2, [pc, #308]	; (800a7f8 <UTIL_SEQ_Run+0x1ac>)
 800a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	4413      	add	r3, r2
 800a6ca:	685a      	ldr	r2, [r3, #4]
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 f99d 	bl	800aa10 <SEQ_BitPosition>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4b49      	ldr	r3, [pc, #292]	; (800a800 <UTIL_SEQ_Run+0x1b4>)
 800a6dc:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a6de:	4a46      	ldr	r2, [pc, #280]	; (800a7f8 <UTIL_SEQ_Run+0x1ac>)
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	00db      	lsls	r3, r3, #3
 800a6e4:	4413      	add	r3, r2
 800a6e6:	685a      	ldr	r2, [r3, #4]
 800a6e8:	4b45      	ldr	r3, [pc, #276]	; (800a800 <UTIL_SEQ_Run+0x1b4>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f2:	43db      	mvns	r3, r3
 800a6f4:	401a      	ands	r2, r3
 800a6f6:	4940      	ldr	r1, [pc, #256]	; (800a7f8 <UTIL_SEQ_Run+0x1ac>)
 800a6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fa:	00db      	lsls	r3, r3, #3
 800a6fc:	440b      	add	r3, r1
 800a6fe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a700:	f3ef 8310 	mrs	r3, PRIMASK
 800a704:	61bb      	str	r3, [r7, #24]
  return(result);
 800a706:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a708:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a70a:	b672      	cpsid	i
}
 800a70c:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a70e:	4b3c      	ldr	r3, [pc, #240]	; (800a800 <UTIL_SEQ_Run+0x1b4>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2201      	movs	r2, #1
 800a714:	fa02 f303 	lsl.w	r3, r2, r3
 800a718:	43da      	mvns	r2, r3
 800a71a:	4b3a      	ldr	r3, [pc, #232]	; (800a804 <UTIL_SEQ_Run+0x1b8>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4013      	ands	r3, r2
 800a720:	4a38      	ldr	r2, [pc, #224]	; (800a804 <UTIL_SEQ_Run+0x1b8>)
 800a722:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a724:	2302      	movs	r3, #2
 800a726:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a728:	e013      	b.n	800a752 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72c:	3b01      	subs	r3, #1
 800a72e:	4a32      	ldr	r2, [pc, #200]	; (800a7f8 <UTIL_SEQ_Run+0x1ac>)
 800a730:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a734:	4b32      	ldr	r3, [pc, #200]	; (800a800 <UTIL_SEQ_Run+0x1b4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2201      	movs	r2, #1
 800a73a:	fa02 f303 	lsl.w	r3, r2, r3
 800a73e:	43da      	mvns	r2, r3
 800a740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a742:	3b01      	subs	r3, #1
 800a744:	400a      	ands	r2, r1
 800a746:	492c      	ldr	r1, [pc, #176]	; (800a7f8 <UTIL_SEQ_Run+0x1ac>)
 800a748:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	3b01      	subs	r3, #1
 800a750:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1e8      	bne.n	800a72a <UTIL_SEQ_Run+0xde>
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	f383 8810 	msr	PRIMASK, r3
}
 800a762:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a764:	4b26      	ldr	r3, [pc, #152]	; (800a800 <UTIL_SEQ_Run+0x1b4>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a27      	ldr	r2, [pc, #156]	; (800a808 <UTIL_SEQ_Run+0x1bc>)
 800a76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a76e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a770:	4b24      	ldr	r3, [pc, #144]	; (800a804 <UTIL_SEQ_Run+0x1b8>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	4b21      	ldr	r3, [pc, #132]	; (800a7fc <UTIL_SEQ_Run+0x1b0>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	401a      	ands	r2, r3
 800a77a:	4b1e      	ldr	r3, [pc, #120]	; (800a7f4 <UTIL_SEQ_Run+0x1a8>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4013      	ands	r3, r2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d007      	beq.n	800a794 <UTIL_SEQ_Run+0x148>
 800a784:	4b21      	ldr	r3, [pc, #132]	; (800a80c <UTIL_SEQ_Run+0x1c0>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	4b21      	ldr	r3, [pc, #132]	; (800a810 <UTIL_SEQ_Run+0x1c4>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4013      	ands	r3, r2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f43f af6a 	beq.w	800a668 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a794:	4b1a      	ldr	r3, [pc, #104]	; (800a800 <UTIL_SEQ_Run+0x1b4>)
 800a796:	f04f 32ff 	mov.w	r2, #4294967295
 800a79a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a79c:	f000 f92a 	bl	800a9f4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7a4:	613b      	str	r3, [r7, #16]
  return(result);
 800a7a6:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a7a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7aa:	b672      	cpsid	i
}
 800a7ac:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a7ae:	4b15      	ldr	r3, [pc, #84]	; (800a804 <UTIL_SEQ_Run+0x1b8>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	4b12      	ldr	r3, [pc, #72]	; (800a7fc <UTIL_SEQ_Run+0x1b0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	401a      	ands	r2, r3
 800a7b8:	4b0e      	ldr	r3, [pc, #56]	; (800a7f4 <UTIL_SEQ_Run+0x1a8>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d108      	bne.n	800a7d4 <UTIL_SEQ_Run+0x188>
 800a7c2:	4b12      	ldr	r3, [pc, #72]	; (800a80c <UTIL_SEQ_Run+0x1c0>)
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	4b12      	ldr	r3, [pc, #72]	; (800a810 <UTIL_SEQ_Run+0x1c4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800a7d0:	f7f5 fead 	bl	800052e <UTIL_SEQ_Idle>
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f383 8810 	msr	PRIMASK, r3
}
 800a7de:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a7e0:	f000 f90f 	bl	800aa02 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a7e4:	4a03      	ldr	r2, [pc, #12]	; (800a7f4 <UTIL_SEQ_Run+0x1a8>)
 800a7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e8:	6013      	str	r3, [r2, #0]

  return;
 800a7ea:	bf00      	nop
}
 800a7ec:	3730      	adds	r7, #48	; 0x30
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000024 	.word	0x20000024
 800a7f8:	2000033c 	.word	0x2000033c
 800a7fc:	20000020 	.word	0x20000020
 800a800:	200002b8 	.word	0x200002b8
 800a804:	200002ac 	.word	0x200002ac
 800a808:	200002bc 	.word	0x200002bc
 800a80c:	200002b0 	.word	0x200002b0
 800a810:	200002b4 	.word	0x200002b4

0800a814 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b088      	sub	sp, #32
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a820:	f3ef 8310 	mrs	r3, PRIMASK
 800a824:	617b      	str	r3, [r7, #20]
  return(result);
 800a826:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a82a:	b672      	cpsid	i
}
 800a82c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f000 f8ee 	bl	800aa10 <SEQ_BitPosition>
 800a834:	4603      	mov	r3, r0
 800a836:	4619      	mov	r1, r3
 800a838:	4a06      	ldr	r2, [pc, #24]	; (800a854 <UTIL_SEQ_RegTask+0x40>)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	f383 8810 	msr	PRIMASK, r3
}
 800a84a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a84c:	bf00      	nop
}
 800a84e:	3720      	adds	r7, #32
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	200002bc 	.word	0x200002bc

0800a858 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a862:	f3ef 8310 	mrs	r3, PRIMASK
 800a866:	60fb      	str	r3, [r7, #12]
  return(result);
 800a868:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a86a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a86c:	b672      	cpsid	i
}
 800a86e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a870:	4b0d      	ldr	r3, [pc, #52]	; (800a8a8 <UTIL_SEQ_SetTask+0x50>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4313      	orrs	r3, r2
 800a878:	4a0b      	ldr	r2, [pc, #44]	; (800a8a8 <UTIL_SEQ_SetTask+0x50>)
 800a87a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a87c:	4a0b      	ldr	r2, [pc, #44]	; (800a8ac <UTIL_SEQ_SetTask+0x54>)
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	431a      	orrs	r2, r3
 800a888:	4908      	ldr	r1, [pc, #32]	; (800a8ac <UTIL_SEQ_SetTask+0x54>)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f383 8810 	msr	PRIMASK, r3
}
 800a89a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a89c:	bf00      	nop
}
 800a89e:	371c      	adds	r7, #28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	200002ac 	.word	0x200002ac
 800a8ac:	2000033c 	.word	0x2000033c

0800a8b0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8c2:	b672      	cpsid	i
}
 800a8c4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	43da      	mvns	r2, r3
 800a8ca:	4b08      	ldr	r3, [pc, #32]	; (800a8ec <UTIL_SEQ_PauseTask+0x3c>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	4a06      	ldr	r2, [pc, #24]	; (800a8ec <UTIL_SEQ_PauseTask+0x3c>)
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	f383 8810 	msr	PRIMASK, r3
}
 800a8de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a8e0:	bf00      	nop
}
 800a8e2:	371c      	adds	r7, #28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	20000020 	.word	0x20000020

0800a8f0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8f8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a900:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a902:	b672      	cpsid	i
}
 800a904:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <UTIL_SEQ_ResumeTask+0x3c>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	4a07      	ldr	r2, [pc, #28]	; (800a92c <UTIL_SEQ_ResumeTask+0x3c>)
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f383 8810 	msr	PRIMASK, r3
}
 800a91c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a91e:	bf00      	nop
}
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	20000020 	.word	0x20000020

0800a930 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a938:	f3ef 8310 	mrs	r3, PRIMASK
 800a93c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a93e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a940:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a942:	b672      	cpsid	i
}
 800a944:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a946:	4b09      	ldr	r3, [pc, #36]	; (800a96c <UTIL_SEQ_SetEvt+0x3c>)
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	4a07      	ldr	r2, [pc, #28]	; (800a96c <UTIL_SEQ_SetEvt+0x3c>)
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	f383 8810 	msr	PRIMASK, r3
}
 800a95c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a95e:	bf00      	nop
}
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	200002b0 	.word	0x200002b0

0800a970 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a978:	4b1b      	ldr	r3, [pc, #108]	; (800a9e8 <UTIL_SEQ_WaitEvt+0x78>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a97e:	4b1a      	ldr	r3, [pc, #104]	; (800a9e8 <UTIL_SEQ_WaitEvt+0x78>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a986:	d102      	bne.n	800a98e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	617b      	str	r3, [r7, #20]
 800a98c:	e005      	b.n	800a99a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800a98e:	4b16      	ldr	r3, [pc, #88]	; (800a9e8 <UTIL_SEQ_WaitEvt+0x78>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2201      	movs	r2, #1
 800a994:	fa02 f303 	lsl.w	r3, r2, r3
 800a998:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a99a:	4b14      	ldr	r3, [pc, #80]	; (800a9ec <UTIL_SEQ_WaitEvt+0x7c>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800a9a0:	4a12      	ldr	r2, [pc, #72]	; (800a9ec <UTIL_SEQ_WaitEvt+0x7c>)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800a9a6:	e005      	b.n	800a9b4 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800a9a8:	4b10      	ldr	r3, [pc, #64]	; (800a9ec <UTIL_SEQ_WaitEvt+0x7c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	6978      	ldr	r0, [r7, #20]
 800a9b0:	f7f5 fdc4 	bl	800053c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800a9b4:	4b0e      	ldr	r3, [pc, #56]	; (800a9f0 <UTIL_SEQ_WaitEvt+0x80>)
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <UTIL_SEQ_WaitEvt+0x7c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4013      	ands	r3, r2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0f2      	beq.n	800a9a8 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a9c2:	4a09      	ldr	r2, [pc, #36]	; (800a9e8 <UTIL_SEQ_WaitEvt+0x78>)
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800a9c8:	4b08      	ldr	r3, [pc, #32]	; (800a9ec <UTIL_SEQ_WaitEvt+0x7c>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	43da      	mvns	r2, r3
 800a9ce:	4b08      	ldr	r3, [pc, #32]	; (800a9f0 <UTIL_SEQ_WaitEvt+0x80>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	4a06      	ldr	r2, [pc, #24]	; (800a9f0 <UTIL_SEQ_WaitEvt+0x80>)
 800a9d6:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800a9d8:	4a04      	ldr	r2, [pc, #16]	; (800a9ec <UTIL_SEQ_WaitEvt+0x7c>)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6013      	str	r3, [r2, #0]

  return;
 800a9de:	bf00      	nop
}
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	200002b8 	.word	0x200002b8
 800a9ec:	200002b4 	.word	0x200002b4
 800a9f0:	200002b0 	.word	0x200002b0

0800a9f4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a9f8:	bf00      	nop
}
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800aa02:	b480      	push	{r7}
 800aa04:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800aa06:	bf00      	nop
}
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	0c1b      	lsrs	r3, r3, #16
 800aa20:	041b      	lsls	r3, r3, #16
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d104      	bne.n	800aa30 <SEQ_BitPosition+0x20>
 800aa26:	2310      	movs	r3, #16
 800aa28:	73fb      	strb	r3, [r7, #15]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	041b      	lsls	r3, r3, #16
 800aa2e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d105      	bne.n	800aa46 <SEQ_BitPosition+0x36>
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	73fb      	strb	r3, [r7, #15]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d105      	bne.n	800aa5c <SEQ_BitPosition+0x4c>
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	3304      	adds	r3, #4
 800aa54:	73fb      	strb	r3, [r7, #15]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	011b      	lsls	r3, r3, #4
 800aa5a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	0f1b      	lsrs	r3, r3, #28
 800aa60:	4a07      	ldr	r2, [pc, #28]	; (800aa80 <SEQ_BitPosition+0x70>)
 800aa62:	5cd2      	ldrb	r2, [r2, r3]
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	4413      	add	r3, r2
 800aa68:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	f1c3 031f 	rsb	r3, r3, #31
 800aa70:	b2db      	uxtb	r3, r3
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3714      	adds	r7, #20
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	0800ae44 	.word	0x0800ae44

0800aa84 <__libc_init_array>:
 800aa84:	b570      	push	{r4, r5, r6, lr}
 800aa86:	4d0d      	ldr	r5, [pc, #52]	; (800aabc <__libc_init_array+0x38>)
 800aa88:	4c0d      	ldr	r4, [pc, #52]	; (800aac0 <__libc_init_array+0x3c>)
 800aa8a:	1b64      	subs	r4, r4, r5
 800aa8c:	10a4      	asrs	r4, r4, #2
 800aa8e:	2600      	movs	r6, #0
 800aa90:	42a6      	cmp	r6, r4
 800aa92:	d109      	bne.n	800aaa8 <__libc_init_array+0x24>
 800aa94:	4d0b      	ldr	r5, [pc, #44]	; (800aac4 <__libc_init_array+0x40>)
 800aa96:	4c0c      	ldr	r4, [pc, #48]	; (800aac8 <__libc_init_array+0x44>)
 800aa98:	f000 f88a 	bl	800abb0 <_init>
 800aa9c:	1b64      	subs	r4, r4, r5
 800aa9e:	10a4      	asrs	r4, r4, #2
 800aaa0:	2600      	movs	r6, #0
 800aaa2:	42a6      	cmp	r6, r4
 800aaa4:	d105      	bne.n	800aab2 <__libc_init_array+0x2e>
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}
 800aaa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaac:	4798      	blx	r3
 800aaae:	3601      	adds	r6, #1
 800aab0:	e7ee      	b.n	800aa90 <__libc_init_array+0xc>
 800aab2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aab6:	4798      	blx	r3
 800aab8:	3601      	adds	r6, #1
 800aaba:	e7f2      	b.n	800aaa2 <__libc_init_array+0x1e>
 800aabc:	0800ae7c 	.word	0x0800ae7c
 800aac0:	0800ae7c 	.word	0x0800ae7c
 800aac4:	0800ae7c 	.word	0x0800ae7c
 800aac8:	0800ae80 	.word	0x0800ae80

0800aacc <__itoa>:
 800aacc:	1e93      	subs	r3, r2, #2
 800aace:	2b22      	cmp	r3, #34	; 0x22
 800aad0:	b510      	push	{r4, lr}
 800aad2:	460c      	mov	r4, r1
 800aad4:	d904      	bls.n	800aae0 <__itoa+0x14>
 800aad6:	2300      	movs	r3, #0
 800aad8:	700b      	strb	r3, [r1, #0]
 800aada:	461c      	mov	r4, r3
 800aadc:	4620      	mov	r0, r4
 800aade:	bd10      	pop	{r4, pc}
 800aae0:	2a0a      	cmp	r2, #10
 800aae2:	d109      	bne.n	800aaf8 <__itoa+0x2c>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	da07      	bge.n	800aaf8 <__itoa+0x2c>
 800aae8:	232d      	movs	r3, #45	; 0x2d
 800aaea:	700b      	strb	r3, [r1, #0]
 800aaec:	4240      	negs	r0, r0
 800aaee:	2101      	movs	r1, #1
 800aaf0:	4421      	add	r1, r4
 800aaf2:	f000 f81b 	bl	800ab2c <__utoa>
 800aaf6:	e7f1      	b.n	800aadc <__itoa+0x10>
 800aaf8:	2100      	movs	r1, #0
 800aafa:	e7f9      	b.n	800aaf0 <__itoa+0x24>

0800aafc <itoa>:
 800aafc:	f7ff bfe6 	b.w	800aacc <__itoa>

0800ab00 <memcpy>:
 800ab00:	440a      	add	r2, r1
 800ab02:	4291      	cmp	r1, r2
 800ab04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab08:	d100      	bne.n	800ab0c <memcpy+0xc>
 800ab0a:	4770      	bx	lr
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab16:	4291      	cmp	r1, r2
 800ab18:	d1f9      	bne.n	800ab0e <memcpy+0xe>
 800ab1a:	bd10      	pop	{r4, pc}

0800ab1c <memset>:
 800ab1c:	4402      	add	r2, r0
 800ab1e:	4603      	mov	r3, r0
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d100      	bne.n	800ab26 <memset+0xa>
 800ab24:	4770      	bx	lr
 800ab26:	f803 1b01 	strb.w	r1, [r3], #1
 800ab2a:	e7f9      	b.n	800ab20 <memset+0x4>

0800ab2c <__utoa>:
 800ab2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab2e:	4c1f      	ldr	r4, [pc, #124]	; (800abac <__utoa+0x80>)
 800ab30:	b08b      	sub	sp, #44	; 0x2c
 800ab32:	4605      	mov	r5, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	466e      	mov	r6, sp
 800ab38:	f104 0c20 	add.w	ip, r4, #32
 800ab3c:	6820      	ldr	r0, [r4, #0]
 800ab3e:	6861      	ldr	r1, [r4, #4]
 800ab40:	4637      	mov	r7, r6
 800ab42:	c703      	stmia	r7!, {r0, r1}
 800ab44:	3408      	adds	r4, #8
 800ab46:	4564      	cmp	r4, ip
 800ab48:	463e      	mov	r6, r7
 800ab4a:	d1f7      	bne.n	800ab3c <__utoa+0x10>
 800ab4c:	7921      	ldrb	r1, [r4, #4]
 800ab4e:	7139      	strb	r1, [r7, #4]
 800ab50:	1e91      	subs	r1, r2, #2
 800ab52:	6820      	ldr	r0, [r4, #0]
 800ab54:	6038      	str	r0, [r7, #0]
 800ab56:	2922      	cmp	r1, #34	; 0x22
 800ab58:	f04f 0100 	mov.w	r1, #0
 800ab5c:	d904      	bls.n	800ab68 <__utoa+0x3c>
 800ab5e:	7019      	strb	r1, [r3, #0]
 800ab60:	460b      	mov	r3, r1
 800ab62:	4618      	mov	r0, r3
 800ab64:	b00b      	add	sp, #44	; 0x2c
 800ab66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab68:	1e58      	subs	r0, r3, #1
 800ab6a:	4684      	mov	ip, r0
 800ab6c:	fbb5 f7f2 	udiv	r7, r5, r2
 800ab70:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800ab74:	fb02 5617 	mls	r6, r2, r7, r5
 800ab78:	4476      	add	r6, lr
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ab80:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ab84:	462e      	mov	r6, r5
 800ab86:	42b2      	cmp	r2, r6
 800ab88:	f101 0101 	add.w	r1, r1, #1
 800ab8c:	463d      	mov	r5, r7
 800ab8e:	d9ed      	bls.n	800ab6c <__utoa+0x40>
 800ab90:	2200      	movs	r2, #0
 800ab92:	545a      	strb	r2, [r3, r1]
 800ab94:	1919      	adds	r1, r3, r4
 800ab96:	1aa5      	subs	r5, r4, r2
 800ab98:	42aa      	cmp	r2, r5
 800ab9a:	dae2      	bge.n	800ab62 <__utoa+0x36>
 800ab9c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800aba0:	780e      	ldrb	r6, [r1, #0]
 800aba2:	7006      	strb	r6, [r0, #0]
 800aba4:	3201      	adds	r2, #1
 800aba6:	f801 5901 	strb.w	r5, [r1], #-1
 800abaa:	e7f4      	b.n	800ab96 <__utoa+0x6a>
 800abac:	0800ae54 	.word	0x0800ae54

0800abb0 <_init>:
 800abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb2:	bf00      	nop
 800abb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abb6:	bc08      	pop	{r3}
 800abb8:	469e      	mov	lr, r3
 800abba:	4770      	bx	lr

0800abbc <_fini>:
 800abbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abbe:	bf00      	nop
 800abc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abc2:	bc08      	pop	{r3}
 800abc4:	469e      	mov	lr, r3
 800abc6:	4770      	bx	lr
